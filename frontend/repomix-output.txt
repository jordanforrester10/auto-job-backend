This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-12T01:59:43.924Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.prettierignore
.prettierrc
jsconfig.json
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.js
src/components/assistant/AiAssistantWidget.js
src/components/assistant/GlobalAiAssistant.js
src/components/auth/EmailVerification.js
src/components/auth/ForgotPassword.js
src/components/auth/Login.js
src/components/auth/ProtectedRoute.js
src/components/auth/Register.js
src/components/auth/ResetPassword.js
src/components/common/AutoJobLogo.js
src/components/common/GlobalSearch.js
src/components/common/PageHeader.js
src/components/Dashboard.js
src/components/jobs/AiSearchesPage.js
src/components/jobs/components/AiReasoningLogs.js
src/components/jobs/components/AiSearchDeleteDialog.js
src/components/jobs/components/AiSearchDetailsDialog.js
src/components/jobs/components/AiSearchExpandableRow.js
src/components/jobs/components/AiSearchSummaryCards.js
src/components/jobs/components/AiSearchTable.js
src/components/jobs/components/AiSearchTableRow.js
src/components/jobs/components/EmptySearchState.js
src/components/jobs/components/EnhancedCircularProgress.js
src/components/jobs/components/JobAnalysisStatus.js
src/components/jobs/components/JobDetailsCard.js
src/components/jobs/components/JobHeader.js
src/components/jobs/components/MatchAnalysisCard.js
src/components/jobs/components/SkillChip.js
src/components/jobs/FindJobsDialog.js
src/components/jobs/hooks/useAiSearches.js
src/components/jobs/hooks/useJobAnalysis.js
src/components/jobs/JobCreateDialog.js
src/components/jobs/JobDetail.js
src/components/jobs/JobsPage.js
src/components/jobs/ResumeTailoring.js
src/components/jobs/tabs/AnalysisTab.js
src/components/jobs/tabs/ContentTab.js
src/components/jobs/tabs/OverviewTab.js
src/components/jobs/utils/searchUtils.js
src/components/layout/Header.js
src/components/layout/MainLayout.js
src/components/layout/Sidebar.js
src/components/recruiters/OutreachComposer.js
src/components/recruiters/OutreachTracker.js
src/components/recruiters/RecruiterDetails.js
src/components/recruiters/RecruiterList.js
src/components/recruiters/RecruiterPage.js
src/components/recruiters/RecruiterSearch.js
src/components/resumes/components/AiEditingToolbar.js
src/components/resumes/components/BeforeAfterComparison.js
src/components/resumes/components/ProcessingView.js
src/components/resumes/components/ScoreDisplay.js
src/components/resumes/components/TabPanel.js
src/components/resumes/hooks/useAiIntegration.js
src/components/resumes/hooks/useResumeData.js
src/components/resumes/ResumeDetail.js
src/components/resumes/ResumesPage.js
src/components/resumes/ResumeUploadDialog.js
src/components/resumes/ResumeWithAssistant.js
src/components/resumes/tabs/AnalysisTab.js
src/components/resumes/tabs/ContentTab.js
src/components/resumes/tabs/OverviewTab.js
src/components/resumes/utils/resumeHelpers.js
src/components/search/SearchPage.js
src/components/SettingsPage.js
src/context/AiAssistantContext.js
src/context/AuthContext.js
src/hooks/useSearch.js
src/index.css
src/index.js
src/ThemeProvider.js
src/utils/assistantService.js
src/utils/axios.js
src/utils/jobService.js
src/utils/recruiterService.js
src/utils/resumeService.js
src/utils/searchService.js
src/utils/settingsService.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: .prettierignore
================
/build/

================
File: .prettierrc
================
{
  "printWidth": 100,
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5",
  "arrowParens": "avoid"
}

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": "src",
    "incremental": true
  },
  "include": ["src"],
  "exclude": ["node_modules", "build", "functions"]
}

================
File: package.json
================
{
  "name": "job-app-mui",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^5.17.1",
    "@mui/material": "^5.17.1",
    "apexcharts": "^4.7.0",
    "axios": "^1.9.0",
    "react": "^19.1.0",
    "react-apexcharts": "^1.7.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.5.3",
    "react-scripts": "5.0.1",
    "recharts": "^2.15.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title></title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "",
  "name": "",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting

### Analyzing the Bundle Size

This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size

### Making a Progressive Web App

This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app

### Advanced Configuration

This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration

### Deployment

This section has moved here: https://facebook.github.io/create-react-app/docs/deployment

### `yarn build` fails to minify

This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { AiAssistantProvider } from './context/AiAssistantContext';
import ThemeProvider from './ThemeProvider';
import ProtectedRoute from './components/auth/ProtectedRoute';
import Login from './components/auth/Login';
import Register from './components/auth/Register';
import ForgotPassword from './components/auth/ForgotPassword';
import ResetPassword from './components/auth/ResetPassword';
import EmailVerification from './components/auth/EmailVerification';
import Dashboard from './components/Dashboard';
import ResumesPage from './components/resumes/ResumesPage';
import ResumeUpload from './components/resumes/ResumeUploadDialog';
import ResumeDetail from './components/resumes/ResumeDetail';

// Import job-related components
import JobsPage from './components/jobs/JobsPage';
import JobDetail from './components/jobs/JobDetail';
import ResumeTailoring from './components/jobs/ResumeTailoring';
import AiSearchesPage from './components/jobs/AiSearchesPage';

// Import recruiter-related components
import RecruiterPage from './components/recruiters/RecruiterPage';
import RecruiterDetails from './components/recruiters/RecruiterDetails';
import OutreachTracker from './components/recruiters/OutreachTracker';

// Import Settings
import SettingsPage from './components/SettingsPage';

// Import Global AI Assistant
import GlobalAiAssistant from './components/assistant/GlobalAiAssistant';

// Placeholder components for other sections
const ApplicationsPage = () => <div>Applications Page (Coming Soon)</div>;
const AISettingsPage = () => <div>AI Settings Page (Coming Soon)</div>;

function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <Router>
          <Routes>
            {/* Public Auth Routes - NO AiAssistantProvider wrapper */}
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/reset-password/:token" element={<ResetPassword />} />
            <Route path="/verify-email/:token" element={<EmailVerification />} />
            
            {/* Protected Routes - WITH AiAssistantProvider wrapper */}
            <Route
              path="/dashboard"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <Dashboard />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Resume Routes */}
            <Route
              path="/resumes"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <ResumesPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/resumes/upload"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <ResumeUpload />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/resumes/:id"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <ResumeDetail />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Job Routes */}
            <Route
              path="/jobs"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <JobsPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/jobs/:id"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <JobDetail />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/jobs/:jobId/tailor/:resumeId"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <ResumeTailoring />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/jobs/ai-searches"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <AiSearchesPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Recruiter Routes */}
            <Route
              path="/recruiters"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <RecruiterPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/recruiters/:id"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <RecruiterDetails />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/recruiters/outreach"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <OutreachTracker />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Settings Route */}
            <Route
              path="/settings"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <SettingsPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Other Routes */}
            <Route
              path="/applications"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <ApplicationsPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            <Route
              path="/ai-settings"
              element={
                <ProtectedRoute>
                  <AiAssistantProvider>
                    <AISettingsPage />
                    <GlobalAiAssistant />
                  </AiAssistantProvider>
                </ProtectedRoute>
              }
            />
            
            {/* Default Route */}
            <Route path="/" element={<Navigate to="/dashboard" replace />} />
          </Routes>
        </Router>
      </AuthProvider>
    </ThemeProvider>
  );
}

export default App;

================
File: src/components/assistant/AiAssistantWidget.js
================
// src/components/assistant/AiAssistantWidget.js - UPDATED VERSION
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Paper,
  TextField,
  IconButton,
  Typography,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Chip,
  Button,
  Divider,
  Slide,
  CircularProgress,
  Tooltip,
  useTheme,
  alpha
} from '@mui/material';
import {
  SmartToy as RobotIcon,
  Send as SendIcon,
  Close as CloseIcon,
  Fullscreen as FullscreenIcon,
  FullscreenExit as FullscreenExitIcon,
  Refresh as RefreshIcon,
  Description as ResumeIcon,
  Edit as EditIcon,
  AutoFixHigh as SuggestionIcon
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
// import assistantService from '../../utils/assistantService'; // Comment out for now

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const AiAssistantWidget = ({ 
  resumeId = null, 
  resumeData = null, 
  onResumeUpdate = null,
  position = { bottom: 24, right: 24 },
  // NEW: Accept external open control
  externalOpen = null,
  onExternalClose = null,
  showFab = true // NEW: Control whether to show the floating button
}) => {
  const theme = useTheme();
  const { currentUser } = useAuth();
  
  // Use external open state if provided, otherwise use internal state
  const [internalOpen, setInternalOpen] = useState(false);
  const isOpen = externalOpen !== null ? externalOpen : internalOpen;
  
  const [fullscreen, setFullscreen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [assistantTyping, setAssistantTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Initialize chat session
  useEffect(() => {
    if (isOpen && !sessionId) {
      initializeSession();
    }
  }, [isOpen]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initializeSession = async () => {
    try {
      console.log('🤖 Initializing AI Assistant session...');
      
      // For now, just add a welcome message without backend call
      const welcomeMessage = {
        id: Date.now(),
        type: 'assistant',
        content: `Hi! I'm AJ, your AI career assistant. I'm here to help you optimize your resume and discuss your career goals. ${resumeData ? `I can see you're working on your resume.` : ''} How can I help you today?`,
        timestamp: new Date(),
        suggestions: [
          'Analyze my resume strengths',
          'Suggest improvements', 
          'Help with job descriptions',
          'Review my experience section'
        ]
      };
      
      setMessages([welcomeMessage]);
      setSessionId('test-session-' + Date.now()); // Temporary session ID
      
      console.log('✅ AI Assistant session initialized (test mode)');
    } catch (error) {
      console.error('❌ Failed to initialize assistant session:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || loading) return;

    const userMessage = {
      id: Date.now(),
      type: 'user', 
      content: inputMessage.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentMessage = inputMessage.trim();
    setInputMessage('');
    setLoading(true);
    setAssistantTyping(true);

    try {
      // Simulate AI response for testing
      setTimeout(() => {
        const aiResponse = {
          id: Date.now() + 1,
          type: 'assistant',
          content: `Thanks for your message: "${currentMessage}". This is a test response! In the full version, I'll analyze your resume and provide specific suggestions based on your content.`,
          timestamp: new Date(),
          suggestions: ['Tell me more', 'Analyze my experience', 'Help with skills section']
        };

        setMessages(prev => [...prev, aiResponse]);
        setLoading(false);
        setAssistantTyping(false);
      }, 1500);

    } catch (error) {
      console.error('❌ Failed to send message:', error);
      const errorMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        content: 'I apologize, but I encountered an error. This is test mode - the full AI backend is not yet connected.',
        timestamp: new Date(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
      setLoading(false);
      setAssistantTyping(false);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleOpen = () => {
    console.log('🤖 Opening AI Assistant...');
    if (externalOpen !== null) {
      // If externally controlled, don't set internal state
      return;
    }
    setInternalOpen(true);
  };

  const handleClose = () => {
    console.log('🤖 Closing AI Assistant...');
    setFullscreen(false);
    
    if (onExternalClose) {
      onExternalClose();
    } else {
      setInternalOpen(false);
    }
  };

  const toggleFullscreen = () => {
    setFullscreen(!fullscreen);
  };

  const MessageBubble = ({ message }) => {
    const isUser = message.type === 'user';
    const isError = message.isError;

    return (
      <ListItem 
        sx={{ 
          flexDirection: isUser ? 'row-reverse' : 'row',
          alignItems: 'flex-start',
          pb: 2
        }}
      >
        <ListItemAvatar sx={{ 
          minWidth: 'auto', 
          ml: isUser ? 1 : 0, 
          mr: isUser ? 0 : 1 
        }}>
          <Avatar 
            sx={{ 
              width: 32, 
              height: 32,
              bgcolor: isUser ? theme.palette.primary.main : theme.palette.secondary.main,
              fontSize: '0.875rem'
            }}
          >
            {isUser ? currentUser?.firstName?.[0] || 'U' : <RobotIcon fontSize="small" />}
          </Avatar>
        </ListItemAvatar>
        
        <Box sx={{ 
          maxWidth: '75%',
          display: 'flex',
          flexDirection: 'column',
          alignItems: isUser ? 'flex-end' : 'flex-start'
        }}>
          <Paper
            elevation={1}
            sx={{
              p: 2,
              bgcolor: isError 
                ? alpha(theme.palette.error.main, 0.1)
                : isUser 
                  ? theme.palette.primary.main 
                  : theme.palette.background.paper,
              color: isUser ? 'white' : 'inherit',
              borderRadius: 2,
              border: isError ? `1px solid ${theme.palette.error.main}` : 'none'
            }}
          >
            <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
              {message.content}
            </Typography>
          </Paper>

          {/* Suggestions */}
          {message.suggestions && (
            <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {message.suggestions.map((suggestion, index) => (
                <Chip
                  key={index}
                  label={suggestion}
                  size="small"
                  variant="outlined"
                  onClick={() => handleSuggestionClick(suggestion)}
                  sx={{ 
                    cursor: 'pointer',
                    '&:hover': {
                      bgcolor: alpha(theme.palette.primary.main, 0.1)
                    }
                  }}
                />
              ))}
            </Box>
          )}

          {/* Resume Edit Actions */}
          {message.resumeEdits && (
            <Box sx={{ mt: 1 }}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 1.5, 
                  bgcolor: alpha(theme.palette.success.main, 0.1),
                  border: `1px solid ${alpha(theme.palette.success.main, 0.3)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <EditIcon fontSize="small" color="success" sx={{ mr: 1 }} />
                  <Typography variant="body2" fontWeight={500}>
                    Resume Updates Available
                  </Typography>
                </Box>
                <Button
                  size="small"
                  variant="contained"
                  color="success"
                  onClick={() => onResumeUpdate && onResumeUpdate(message.resumeEdits)}
                  startIcon={<SuggestionIcon />}
                >
                  Apply Changes
                </Button>
              </Paper>
            </Box>
          )}

          <Typography 
            variant="caption" 
            color="text.secondary" 
            sx={{ mt: 0.5 }}
          >
            {message.timestamp.toLocaleTimeString()}
          </Typography>
        </Box>
      </ListItem>
    );
  };

  const ChatInterface = () => (
    <Box sx={{ 
      height: fullscreen ? '100vh' : 500,
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* Header */}
      <Box sx={{ 
        p: 2, 
        borderBottom: `1px solid ${theme.palette.divider}`,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        bgcolor: alpha(theme.palette.primary.main, 0.05)
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Avatar sx={{ 
            width: 40, 
            height: 40, 
            bgcolor: theme.palette.secondary.main, 
            mr: 2 
          }}>
            <RobotIcon />
          </Avatar>
          <Box>
            <Typography variant="h6" fontWeight={600}>
              AJ Assistant
            </Typography>
            <Typography variant="caption" color="text.secondary">
              {resumeData ? `Working on your resume` : 'Ready to help with your resume'}
            </Typography>
          </Box>
        </Box>
        
        <Box>
          <Tooltip title={fullscreen ? 'Exit Fullscreen' : 'Fullscreen'}>
            <IconButton onClick={toggleFullscreen}>
              {fullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}
            </IconButton>
          </Tooltip>
          <Tooltip title="Close">
            <IconButton onClick={handleClose}>
              <CloseIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Messages */}
      <Box sx={{ 
        flex: 1, 
        overflow: 'auto',
        bgcolor: alpha(theme.palette.background.default, 0.3)
      }}>
        <List sx={{ p: 1 }}>
          {messages.map((message) => (
            <MessageBubble key={message.id} message={message} />
          ))}
          
          {/* Typing indicator */}
          {assistantTyping && (
            <ListItem>
              <ListItemAvatar>
                <Avatar sx={{ 
                  width: 32, 
                  height: 32, 
                  bgcolor: theme.palette.secondary.main 
                }}>
                  <RobotIcon fontSize="small" />
                </Avatar>
              </ListItemAvatar>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <CircularProgress size={16} sx={{ mr: 1 }} />
                <Typography variant="body2" color="text.secondary">
                  AJ is thinking...
                </Typography>
              </Box>
            </ListItem>
          )}
          
          <div ref={messagesEndRef} />
        </List>
      </Box>

      {/* Input */}
      <Box sx={{ 
        p: 2, 
        borderTop: `1px solid ${theme.palette.divider}`,
        bgcolor: theme.palette.background.paper
      }}>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <TextField
            ref={inputRef}
            fullWidth
            multiline
            maxRows={3}
            placeholder="Ask AJ about your resume, career goals, or get editing suggestions..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={loading}
            variant="outlined"
            size="small"
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 3
              }
            }}
          />
          <IconButton
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || loading}
            color="primary"
            sx={{
              bgcolor: theme.palette.primary.main,
              color: 'white',
              '&:hover': {
                bgcolor: theme.palette.primary.dark
              },
              '&:disabled': {
                bgcolor: theme.palette.action.disabled
              }
            }}
          >
            {loading ? <CircularProgress size={20} color="inherit" /> : <SendIcon />}
          </IconButton>
        </Box>
        
        {resumeData && (
          <Box sx={{ mt: 1, display: 'flex', alignItems: 'center' }}>
            <ResumeIcon fontSize="small" color="primary" sx={{ mr: 1 }} />
            <Typography variant="caption" color="text.secondary">
              Context: Resume with {resumeData.experience?.length || 0} jobs
            </Typography>
          </Box>
        )}
      </Box>
    </Box>
  );

  return (
    <>
      {/* Floating Action Button - Only show if not externally controlled */}
      {showFab && externalOpen === null && (
        <Tooltip title="Chat with AJ - Your AI Career Assistant">
          <Fab
            color="secondary"
            onClick={handleOpen}
            sx={{
              position: 'fixed',
              bottom: position.bottom,
              right: position.right,
              zIndex: 1000,
              background: `linear-gradient(45deg, ${theme.palette.secondary.main} 30%, ${theme.palette.secondary.light} 90%)`,
              boxShadow: '0 8px 24px rgba(0, 196, 180, 0.3)',
              '&:hover': {
                background: `linear-gradient(45deg, ${theme.palette.secondary.dark} 30%, ${theme.palette.secondary.main} 90%)`,
                transform: 'scale(1.05)',
              },
              transition: 'all 0.2s ease-in-out'
            }}
          >
            <RobotIcon sx={{ fontSize: 28 }} />
          </Fab>
        </Tooltip>
      )}

      {/* Chat Dialog */}
      <Dialog
        open={isOpen}
        onClose={handleClose}
        TransitionComponent={Transition}
        maxWidth={fullscreen ? false : 'sm'}
        fullWidth
        fullScreen={fullscreen}
        PaperProps={{
          sx: {
            borderRadius: fullscreen ? 0 : 2,
            overflow: 'hidden'
          }
        }}
      >
        <ChatInterface />
      </Dialog>
    </>
  );
};

export default AiAssistantWidget;

================
File: src/components/assistant/GlobalAiAssistant.js
================
// src/components/assistant/GlobalAiAssistant.js - COMPLETE FIXED VERSION
import React, { useState, useRef, useEffect, useCallback } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  IconButton,
  Chip,
  Avatar,
  Divider,
  Fade,
  Tooltip,
  CircularProgress,
  Alert,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ListItemIcon,
  Menu,
  MenuItem,
  Tab,
  Tabs,
  InputAdornment,
  LinearProgress,
  Card,
  CardContent
} from '@mui/material';
import {
  Send as SendIcon,
  Close as CloseIcon,
  ExpandLess as ChevronUpIcon,
  ExpandMore as ChevronDownIcon,
  Add as AddIcon,
  Search as SearchIcon,
  History as HistoryIcon,
  Memory as MemoryIcon,
  MoreVert as MoreVertIcon,
  Chat as ChatIcon,
  Psychology as PsychologyIcon,
  Delete as DeleteIcon,
  Star as StarIcon,
  StarBorder as StarBorderIcon,
  PushPin as PushPinIcon,
  AutoFixHigh as AutoFixHighIcon,
  Description as DescriptionIcon,
  TrendingUp as TrendingUpIcon,
  CheckCircle as CheckCircleIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { useAiAssistant } from '../../context/AiAssistantContext';
import { useAuth } from '../../context/AuthContext';
import AutoJobLogo from '../common/AutoJobLogo';
import assistantService from '../../utils/assistantService';

// Resume Editing Intelligence Hook
const useResumeEditingIntelligence = (currentContext, sendMessage) => {
  const [isProcessingResumeEdit, setIsProcessingResumeEdit] = useState(false);
  const [lastResumeAction, setLastResumeAction] = useState(null);

  const detectResumeEditIntent = useCallback((message) => {
    const resumeEditKeywords = [
      'update', 'improve', 'enhance', 'optimize', 'fix', 'add', 'remove', 'change',
      'work experience', 'skills', 'summary', 'education', 'ats', 'keywords',
      'bullet points', 'achievements', 'quantify', 'metrics', 'action verbs'
    ];

    const messageLower = message.toLowerCase();
    return resumeEditKeywords.some(keyword => messageLower.includes(keyword)) &&
           currentContext?.page === 'resumes' &&
           currentContext?.currentResume;
  }, [currentContext]);

  const processResumeEdit = useCallback(async (message) => {
    if (!detectResumeEditIntent(message)) {
      return sendMessage(message);
    }

    setIsProcessingResumeEdit(true);
    setLastResumeAction('Analyzing resume editing request...');

    try {
      // Enhanced message with resume context
      const enhancedMessage = `[RESUME EDITING REQUEST]
Resume: ${currentContext.currentResume.name}
Current Score: ${currentContext.currentResume.score || 'Unknown'}
Request: ${message}

Please provide specific improvements and apply them to the resume.`;

      // Send with special resume editing flag
      const response = await sendMessage(enhancedMessage, { 
        isResumeEdit: true,
        resumeId: currentContext.currentResume.id 
      });

      // Simulate resume update processing
      setLastResumeAction('Applying changes to resume...');
      
      // Dispatch resume update event
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('resumeUpdated', {
          detail: { 
            resumeId: currentContext.currentResume.id, 
            message: '✅ Resume successfully updated!',
            changes: message
          }
        }));
        setLastResumeAction('Resume updated successfully!');
        setTimeout(() => setLastResumeAction(null), 3000);
      }, 2000);

      return response;
    } catch (error) {
      console.error('Resume editing failed:', error);
      setLastResumeAction('❌ Resume editing failed. Please try again.');
      setTimeout(() => setLastResumeAction(null), 3000);
      throw error;
    } finally {
      setIsProcessingResumeEdit(false);
    }
  }, [detectResumeEditIntent, sendMessage, currentContext]);

  return {
    detectResumeEditIntent,
    processResumeEdit,
    isProcessingResumeEdit,
    lastResumeAction
  };
};

// Context-Aware Suggestions Component
const ContextualSuggestionsBar = ({ currentContext, onSuggestionClick }) => {
  const theme = useTheme();
  
  const getContextualSuggestions = () => {
    if (currentContext?.page === 'resumes' && currentContext?.currentResume) {
      const score = currentContext.currentResume.score || 0;
      return [
        score < 70 ? 'Improve my resume score' : 'Optimize for ATS',
        'Update work experience section',
        'Add missing skills',
        'Enhance summary section',
        'Check keyword optimization'
      ];
    }
    
    if (currentContext?.page === 'jobs' && currentContext?.currentJob) {
      return [
        'Match my resume to this job',
        'What skills am I missing?',
        'Write a cover letter',
        'How can I improve my match?',
        'Tailor my resume for this role'
      ];
    }

    return [
      'Help improve my resume',
      'Find job opportunities',
      'Career guidance',
      'Review my progress',
      'What should I focus on?'
    ];
  };

  const suggestions = getContextualSuggestions();

  if (!suggestions.length) return null;

  return (
    <Box sx={{ 
      p: 1.5, 
      borderBottom: `1px solid ${theme.palette.divider}`,
      bgcolor: theme.palette.background.default
    }}>
      <Typography variant="caption" color="text.secondary" sx={{ mb: 1, display: 'block' }}>
        Quick Actions:
      </Typography>
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
        {suggestions.slice(0, 3).map((suggestion, index) => (
          <Chip
            key={index}
            label={suggestion}
            size="small"
            variant="outlined"
            clickable
            onClick={() => onSuggestionClick(suggestion)}
            sx={{
              fontSize: '0.7rem',
              height: 22,
              '&:hover': {
                bgcolor: theme.palette.primary.light,
                color: 'white'
              }
            }}
          />
        ))}
      </Box>
    </Box>
  );
};

// Resume Context Display Component
const ResumeContextDisplay = ({ currentContext }) => {
  const theme = useTheme();

  if (!currentContext?.currentResume) return null;

  const getScoreColor = (score) => {
    if (score >= 80) return theme.palette.success.main;
    if (score >= 60) return theme.palette.warning.main;
    return theme.palette.error.main;
  };

  const score = currentContext.currentResume.score || 0;

  return (
    <Card sx={{ m: 1.5, mb: 0 }}>
      <CardContent sx={{ p: 1.5, '&:last-child': { pb: 1.5 } }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <DescriptionIcon fontSize="small" color="primary" />
          <Box sx={{ flex: 1, minWidth: 0 }}>
            <Typography variant="caption" color="text.secondary">
              Working on:
            </Typography>
            <Typography variant="body2" fontWeight={600} noWrap>
              {currentContext.currentResume.name}
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
            <Typography variant="caption" color="text.secondary">
              Score:
            </Typography>
            <Typography 
              variant="caption" 
              fontWeight={600}
              sx={{ color: getScoreColor(score) }}
            >
              {score}%
            </Typography>
          </Box>
        </Box>
        {score < 80 && (
          <Box sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 0.5 }}>
            <TrendingUpIcon fontSize="small" color="warning" />
            <Typography variant="caption" color="warning.main">
              Room for improvement
            </Typography>
         </Box>
       )}
     </CardContent>
   </Card>
 );
};

// Enhanced Message Component with Resume Actions
const EnhancedMessage = ({ message, theme, currentUser, onSuggestionClick, isResumeContext }) => {
 const formatTime = (timestamp) => {
   if (!timestamp) return '';
   
   try {
     const date = new Date(timestamp);
     
     if (isNaN(date.getTime())) {
       return '';
     }
     
     const now = new Date();
     const diffMs = now.getTime() - date.getTime();
     const diffMins = Math.floor(diffMs / (1000 * 60));
     const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
     const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
     
     if (diffMins < 1) return 'just now';
     if (diffMins < 60) return `${diffMins}m ago`;
     if (diffHours < 24) return `${diffHours}h ago`;
     if (diffDays < 7) return `${diffDays}d ago`;
     
     return date.toLocaleTimeString([], { 
       hour: '2-digit', 
       minute: '2-digit',
       month: 'short',
       day: 'numeric'
     });
   } catch (error) {
     console.warn('Error formatting timestamp:', error);
     return '';
   }
 };

 return (
   <Box
     sx={{
       display: 'flex',
       flexDirection: message.type === 'user' ? 'row-reverse' : 'row',
       alignItems: 'flex-start',
       gap: 1.5
     }}
   >
     {/* Avatar */}
     <Avatar
       sx={{
         width: 32,
         height: 32,
         fontSize: '0.875rem',
         fontWeight: 600,
         ...(message.type === 'user' ? {
           bgcolor: theme.palette.primary.main,
           color: 'white'
         } : {
           bgcolor: 'transparent',
           p: 0.5
         })
       }}
     >
       {message.type === 'user' ? (
         `${currentUser?.firstName?.[0] || 'U'}${currentUser?.lastName?.[0] || ''}`
       ) : (
         <AutoJobLogo 
           variant="icon-only" 
           size="small"
         />
       )}
     </Avatar>

     {/* Message Content */}
     <Box
       sx={{
         maxWidth: '75%',
         display: 'flex',
         flexDirection: 'column',
         gap: 1
       }}
     >
       <Paper
         elevation={message.type === 'user' ? 2 : 1}
         sx={{
           p: 1.5,
           borderRadius: 2,
           ...(message.type === 'user' ? {
             bgcolor: theme.palette.primary.main,
             color: 'white',
             borderBottomRightRadius: 4
           } : {
             bgcolor: message.isError ? theme.palette.error.light :
                      isResumeContext ? theme.palette.primary.light + '10' :
                      '#f5f5f5',
             color: message.isError ? theme.palette.error.contrastText :
                    theme.palette.text.primary,
             borderBottomLeftRadius: 4,
             border: isResumeContext ? `1px solid ${theme.palette.primary.light}30` : 'none'
           })
         }}
       >
            <Typography 
            variant="body2" 
            sx={{ whiteSpace: 'pre-wrap' }}
            dangerouslySetInnerHTML={{ 
                __html: assistantService.formatResponse(message.content)
            }}
            />
       </Paper>

       {/* Enhanced Suggestions with Icons */}
       {message.suggestions && message.suggestions.length > 0 && (
         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
           {message.suggestions.map((suggestion, index) => {
             const isResumeAction = suggestion.toLowerCase().includes('resume') || 
                                  suggestion.toLowerCase().includes('improve') ||
                                  suggestion.toLowerCase().includes('optimize');
             
             return (
               <Chip
                 key={index}
                 label={suggestion}
                 size="small"
                 variant="outlined"
                 clickable
                 icon={isResumeAction ? <AutoFixHighIcon sx={{ fontSize: '0.75rem' }} /> : undefined}
                 onClick={() => onSuggestionClick(suggestion)}
                 sx={{
                   fontSize: '0.75rem',
                   height: 24,
                   '&:hover': {
                     bgcolor: isResumeAction ? theme.palette.secondary.light : theme.palette.primary.light,
                     color: 'white'
                   },
                   ...(isResumeAction && {
                     borderColor: theme.palette.secondary.main,
                     color: theme.palette.secondary.main
                   })
                 }}
               />
             );
           })}
         </Box>
       )}

       {/* Resume Action Indicators */}
       {message.metadata?.isResumeEdit && (
         <Box sx={{ 
           mt: 0.5, 
           p: 1, 
           bgcolor: theme.palette.success.light + '20',
           borderRadius: 1,
           border: `1px solid ${theme.palette.success.light}50`,
           display: 'flex',
           alignItems: 'center',
           gap: 0.5
         }}>
           <CheckCircleIcon fontSize="small" color="success" />
           <Typography variant="caption" color="success.main" fontWeight={600}>
             Resume Action Applied
           </Typography>
         </Box>
       )}

       {/* Timestamp */}
       <Typography
         variant="caption"
         sx={{
           color: theme.palette.text.disabled,
           fontSize: '0.6875rem',
           textAlign: message.type === 'user' ? 'right' : 'left'
         }}
       >
         {formatTime(message.timestamp)}
       </Typography>
     </Box>
   </Box>
 );
};

// Conversation List Component
const ConversationList = ({ 
 conversations, 
 currentConversationId, 
 onSelectConversation, 
 onCreateNew,
 onUpdateConversation,
 onDeleteConversation,
 loading 
}) => {
 const theme = useTheme();
 const [menuAnchor, setMenuAnchor] = useState(null);
 const [selectedConv, setSelectedConv] = useState(null);

 const handleMenuClick = (event, conversation) => {
   event.stopPropagation();
   setMenuAnchor(event.currentTarget);
   setSelectedConv(conversation);
 };

 const handleMenuClose = () => {
   setMenuAnchor(null);
   setSelectedConv(null);
 };

 const handleStarToggle = async () => {
   if (selectedConv) {
     await onUpdateConversation(selectedConv._id, { starred: !selectedConv.starred });
   }
   handleMenuClose();
 };

 const handlePinToggle = async () => {
   if (selectedConv) {
     await onUpdateConversation(selectedConv._id, { pinned: !selectedConv.pinned });
   }
   handleMenuClose();
 };

 const handleDelete = async () => {
   if (selectedConv && window.confirm('Are you sure you want to delete this conversation?')) {
     await onDeleteConversation(selectedConv._id);
   }
   handleMenuClose();
 };

 if (loading) {
   return (
     <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
       <CircularProgress size={24} />
     </Box>
   );
 }

 return (
   <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
     {/* Header */}
     <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>
       <Button
         fullWidth
         variant="outlined"
         startIcon={<AddIcon />}
         onClick={onCreateNew}
         sx={{ mb: 1 }}
       >
         New Conversation
       </Button>
     </Box>

     {/* Conversations */}
     <List sx={{ flex: 1, overflow: 'auto', py: 0 }}>
       {conversations.map((conversation) => (
         <ListItem key={conversation._id} disablePadding>
           <ListItemButton
             selected={conversation._id === currentConversationId}
             onClick={() => onSelectConversation(conversation._id)}
             sx={{
               py: 1.5,
               px: 2,
               borderRadius: 1,
               mx: 1,
               my: 0.5,
               '&.Mui-selected': {
                 bgcolor: theme.palette.primary.light + '20',
                 '&:hover': {
                   bgcolor: theme.palette.primary.light + '30',
                 }
               }
             }}
           >
             <ListItemIcon sx={{ minWidth: 36 }}>
               <ChatIcon 
                 fontSize="small" 
                 color={conversation._id === currentConversationId ? 'primary' : 'action'}
               />
             </ListItemIcon>
             
             <ListItemText
               primary={conversation.title}
               secondary={
                 <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                   <Typography variant="caption" color="text.secondary">
                     {conversation.messageCount || 0} messages
                   </Typography>
                   {conversation.starred && <StarIcon sx={{ fontSize: 12, color: 'gold' }} />}
                   {conversation.pinned && <PushPinIcon sx={{ fontSize: 12, color: theme.palette.primary.main }} />}
                 </Box>
               }
               primaryTypographyProps={{
                 variant: 'body2',
                 noWrap: true,
                 fontWeight: conversation._id === currentConversationId ? 600 : 400
               }}
             />
             
             <IconButton
               size="small"
               onClick={(e) => handleMenuClick(e, conversation)}
               sx={{ opacity: 0.7, '&:hover': { opacity: 1 } }}
             >
               <MoreVertIcon fontSize="small" />
             </IconButton>
           </ListItemButton>
         </ListItem>
       ))}
       
       {conversations.length === 0 && (
         <Box sx={{ p: 3, textAlign: 'center' }}>
           <Typography variant="body2" color="text.secondary">
             No conversations yet. Start a new one!
           </Typography>
         </Box>
       )}
     </List>

     {/* Context Menu */}
     <Menu
       anchorEl={menuAnchor}
       open={Boolean(menuAnchor)}
       onClose={handleMenuClose}
     >
       <MenuItem onClick={handleStarToggle}>
         {selectedConv?.starred ? <StarIcon fontSize="small" /> : <StarBorderIcon fontSize="small" />}
         <Typography sx={{ ml: 1 }}>
           {selectedConv?.starred ? 'Unstar' : 'Star'}
         </Typography>
       </MenuItem>
       <MenuItem onClick={handlePinToggle}>
         <PushPinIcon fontSize="small" />
         <Typography sx={{ ml: 1 }}>
           {selectedConv?.pinned ? 'Unpin' : 'Pin'}
         </Typography>
       </MenuItem>
       <Divider />
       <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>
         <DeleteIcon fontSize="small" />
         <Typography sx={{ ml: 1 }}>Delete</Typography>
       </MenuItem>
     </Menu>
   </Box>
 );
};

// Main Enhanced AI Assistant Component
const GlobalAiAssistant = () => {
 const theme = useTheme();
 const { currentUser } = useAuth();
 const {
   // State
   isOpen,
   setIsOpen,
   isMinimized,
   setIsMinimized,
   
   // Conversations
   conversations,
   currentConversationId,
   currentConversation,
   conversationsLoading,
   
   // Memory & Context
   userMemories,
   memoryInsights,
   currentContext,
   contextualSuggestions,
   suggestionsCount,
   
   // Chat
   messages,
   isLoading,
   error,
   
   // Actions
   sendMessage,
   createNewConversation,
   switchConversation,
   updateConversation,
   deleteConversation,
   handleSuggestionClick,
   searchEverything,
   
   // Utilities
   setError,
   setMessages,
    setCurrentConversationId,    // ADD THIS
    setCurrentConversation       // ADD THIS
   
 } = useAiAssistant();

 // Local state
 const [inputValue, setInputValue] = useState('');
 const [showSidebar, setShowSidebar] = useState(false);
 const [activeTab, setActiveTab] = useState(0);
 const [searchQuery, setSearchQuery] = useState('');
 const [searchResults, setSearchResults] = useState(null);
 const [searchLoading, setSearchLoading] = useState(false);

 // Resume editing intelligence
 const {
   detectResumeEditIntent,
   processResumeEdit,
   isProcessingResumeEdit,
   lastResumeAction
 } = useResumeEditingIntelligence(currentContext, sendMessage);

 // Refs
 const messagesEndRef = useRef(null);
 const inputRef = useRef(null);
 const searchTimeoutRef = useRef(null);

 // Auto-scroll to bottom of messages
 const scrollToBottom = () => {
   messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
 };

 useEffect(() => {
   scrollToBottom();
 }, [messages]);

 // Enhanced close handler
const handleClose = useCallback(() => {
  setActiveTab(0);
  setSearchQuery('');
  setSearchResults(null);
  setSearchLoading(false);
  setInputValue('');
  setShowSidebar(false);
  setError(null);
  
  if (searchTimeoutRef.current) {
    clearTimeout(searchTimeoutRef.current);
  }
  
  // 🔥 PROPER CONVERSATION RESET: Use the context functions properly
  setMessages([]);
  setCurrentConversationId(null);
  setCurrentConversation(null);
  
  setIsOpen(false);
  
  console.log('🔄 AI Assistant closed - conversation reset');
}, [setIsOpen, setError, setMessages, setCurrentConversationId, setCurrentConversation]);

 // Enhanced search with debouncing
 const handleSearchChange = useCallback((query) => {
   setSearchQuery(query);
   
   if (searchTimeoutRef.current) {
     clearTimeout(searchTimeoutRef.current);
   }
   
   if (!query.trim()) {
     setSearchResults(null);
     setSearchLoading(false);
     return;
   }
   
   setSearchLoading(true);
   
   searchTimeoutRef.current = setTimeout(async () => {
     try {
       console.log('🔍 Dynamic search for:', query);
       const results = await searchEverything(query);
       setSearchResults(results);
     } catch (error) {
       console.error('Dynamic search failed:', error);
       setSearchResults(null);
     } finally {
       setSearchLoading(false);
     }
   }, 300);
 }, [searchEverything]);

 // Clean up timeout on unmount
 useEffect(() => {
   return () => {
     if (searchTimeoutRef.current) {
       clearTimeout(searchTimeoutRef.current);
     }
   };
 }, []);

 // Enhanced message sending with resume edit detection
 const handleSendMessage = async () => {
   if (!inputValue.trim() || isLoading || isProcessingResumeEdit) return;

   const messageText = inputValue.trim();
   setInputValue('');

   try {
     // Check if this is a resume editing request
     if (detectResumeEditIntent(messageText)) {
       console.log('🎯 Detected resume editing intent');
       await processResumeEdit(messageText);
     } else {
       await sendMessage(messageText);
     }
   } catch (error) {
     console.error('Failed to send message:', error);
   }
 };

 // Handle creating new conversation
 const handleCreateNewConversation = async () => {
   const title = currentContext?.currentResume 
     ? `Resume: ${currentContext.currentResume.name}`
     : `New Conversation ${conversations.length + 1}`;
   await createNewConversation(title, 'general');
   setShowSidebar(false);
 };

 // Handle conversation selection
 const handleSelectConversation = (conversationId) => {
   switchConversation(conversationId);
   setShowSidebar(false);
 };

 // Handle key press
 const handleKeyPress = (e) => {
   if (e.key === 'Enter' && !e.shiftKey) {
     e.preventDefault();
     handleSendMessage();
   }
 };

 // Handle suggestion clicks
 const handleSuggestionClickInternal = (suggestion) => {
   setInputValue(suggestion);
   inputRef.current?.focus();
 };

 // Check if we're in resume context
 const isResumeContext = currentContext?.page === 'resumes' && currentContext?.currentResume;

 // Don't render if not open - FIXED VERSION WITHOUT BADGE
 if (!isOpen) {
   return (
     <Tooltip title="Ask AJ - Your AI Job Assistant" placement="left">
       <Box
         sx={{
           position: 'fixed',
           bottom: 24,
           right: 24,
           zIndex: 1300,
           cursor: 'pointer'
         }}
         onClick={() => setIsOpen(true)}
       >
         <Paper
           elevation={8}
           sx={{
             width: 64,
             height: 64,
             borderRadius: '50%',
             display: 'flex',
             alignItems: 'center',
             justifyContent: 'center',
             background: isResumeContext 
               ? `linear-gradient(135deg, ${theme.palette.secondary.main} 0%, ${theme.palette.secondary.light} 100%)`
               : `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
             color: 'white',
             transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
             '&:hover': {
               transform: 'translateY(-4px) scale(1.05)',
               boxShadow: isResumeContext 
                 ? '0 12px 24px rgba(0, 188, 180, 0.3)'
                 : '0 12px 24px rgba(26, 115, 232, 0.3)'
             }
           }}
         >
           <AutoJobLogo 
             variant="icon-only" 
             size="small" 
             color="white"
           />
         </Paper>
       </Box>
     </Tooltip>
   );
 }

 return (
   <>
     <Fade in={isOpen}>
       <Paper
         elevation={16}
         sx={{
           position: 'fixed',
           bottom: 24,
           right: 24,
           width: isMinimized ? 400 : 500,
           height: isMinimized ? 60 : 700,
           zIndex: 1300,
           borderRadius: 3,
           overflow: 'hidden',
           display: 'flex',
           flexDirection: 'column',
           background: 'linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%)',
           boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',
           border: isResumeContext 
             ? `2px solid ${theme.palette.secondary.main}30`
             : `1px solid ${theme.palette.divider}`
         }}
       >
         {/* Header - FIXED VERSION */}
         <Box
           sx={{
             p: 2,
             background: isResumeContext
               ? `linear-gradient(135deg, ${theme.palette.secondary.main} 0%, ${theme.palette.secondary.light} 100%)`
               : `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
             color: 'white',
             display: 'flex',
             alignItems: 'center',
             justifyContent: 'space-between',
             minHeight: isMinimized ? 60 : 'auto',
             overflow: 'hidden'
           }}
         >
           <Box sx={{ 
             display: 'flex', 
             alignItems: 'center', 
             gap: 1.5,
             flex: 1,
             minWidth: 0
           }}>
             <AutoJobLogo 
               variant="icon-only" 
               size="small" 
               color="white"
             />
             <Box sx={{ 
               minWidth: 0,
               flex: 1 
             }}>
               <Typography 
                 variant="subtitle1" 
                 fontWeight={600}
                 sx={{
                   overflow: 'hidden',
                   textOverflow: 'ellipsis',
                   whiteSpace: 'nowrap',
                   fontSize: isMinimized ? '0.9rem' : '1rem',
                   lineHeight: 1.2
                 }}
               >
                 AJ - Your AI Job Assistant {isResumeContext && '• Resume Mode'}
               </Typography>
               {!isMinimized && (
                 <Typography 
                   variant="caption" 
                   sx={{ 
                     opacity: 0.8,
                     overflow: 'hidden',
                     textOverflow: 'ellipsis',
                     whiteSpace: 'nowrap',
                     display: 'block'
                   }}
                 >
                   {currentConversation?.title || 'AI Career Assistant'}
                 </Typography>
               )}
             </Box>
           </Box>
           <Box sx={{ 
             display: 'flex', 
             alignItems: 'center', 
             gap: 0.5,
             flexShrink: 0
           }}>
            <IconButton
               size="small"
               onClick={() => setShowSidebar(!showSidebar)}
               sx={{ 
                 color: 'white',
                 display: isMinimized ? 'none' : 'flex'
               }}
             >
               <HistoryIcon />
             </IconButton>
             <IconButton
               size="small"
               onClick={() => setIsMinimized(!isMinimized)}
               sx={{ color: 'white' }}
             >
               {isMinimized ? <ChevronUpIcon /> : <ChevronDownIcon />}
             </IconButton>
             <IconButton
               size="small"
               onClick={handleClose}
               sx={{ color: 'white' }}
             >
               <CloseIcon />
             </IconButton>
           </Box>
         </Box>

         {/* Resume Context Display */}
         {!isMinimized && isResumeContext && (
           <ResumeContextDisplay currentContext={currentContext} />
         )}

         {/* Resume Processing Indicator */}
         {!isMinimized && (isProcessingResumeEdit || lastResumeAction) && (
           <Box sx={{ px: 2, py: 1, bgcolor: theme.palette.info.light + '20' }}>
             {isProcessingResumeEdit && (
               <LinearProgress sx={{ mb: 1, borderRadius: 1 }} />
             )}
             <Typography variant="caption" color="info.main" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
               <AutoFixHighIcon fontSize="small" />
               {lastResumeAction || 'Processing resume changes...'}
             </Typography>
           </Box>
         )}

         {/* Main Content - Hidden when minimized */}
         {!isMinimized && (
           <Box sx={{ flex: 1, display: 'flex', overflow: 'hidden' }}>
             {/* Sidebar */}
             {showSidebar && (
               <Box
                 sx={{
                   width: 280,
                   borderRight: `1px solid ${theme.palette.divider}`,
                   display: 'flex',
                   flexDirection: 'column'
                 }}
               >
                 <ConversationList
                   conversations={conversations}
                   currentConversationId={currentConversationId}
                   onSelectConversation={handleSelectConversation}
                   onCreateNew={handleCreateNewConversation}
                   onUpdateConversation={updateConversation}
                   onDeleteConversation={deleteConversation}
                   loading={conversationsLoading}
                 />
               </Box>
             )}

             {/* Chat Area */}
             <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
               {/* Tabs */}
               <Tabs
                 value={activeTab}
                 onChange={(e, newValue) => setActiveTab(newValue)}
                 variant="fullWidth"
                 sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}
               >
                 <Tab icon={<ChatIcon />} label="Chat" />
                 <Tab icon={<PsychologyIcon />} label="Memory" />
                 <Tab icon={<SearchIcon />} label="Search" />
               </Tabs>

               {/* Contextual Suggestions Bar */}
               {activeTab === 0 && (
                 <ContextualSuggestionsBar 
                   currentContext={currentContext}
                   onSuggestionClick={handleSuggestionClickInternal}
                 />
               )}

               {/* Tab Content */}
               {activeTab === 0 && (
                 <>
                   {/* Messages */}
                   <Box
                     sx={{
                       flex: 1,
                       overflow: 'auto',
                       p: 2,
                       display: 'flex',
                       flexDirection: 'column',
                       gap: 2
                     }}
                   >
                     {messages.map((message) => (
                       <EnhancedMessage
                         key={message.id}
                         message={message}
                         theme={theme}
                         currentUser={currentUser}
                         onSuggestionClick={handleSuggestionClickInternal}
                         isResumeContext={isResumeContext}
                       />
                     ))}

                     {/* Loading indicator */}
                     {(isLoading || isProcessingResumeEdit) && (
                       <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                         <Avatar sx={{ width: 32, height: 32, bgcolor: 'transparent', p: 0.5 }}>
                           <AutoJobLogo variant="icon-only" size="small" />
                         </Avatar>
                         <Paper
                           elevation={1}
                           sx={{
                             p: 2,
                             borderRadius: 2,
                             bgcolor: isProcessingResumeEdit ? theme.palette.secondary.light + '20' : '#f5f5f5',
                             borderBottomLeftRadius: 4,
                             display: 'flex',
                             alignItems: 'center',
                             gap: 1,
                             border: isProcessingResumeEdit ? `1px solid ${theme.palette.secondary.light}50` : 'none'
                           }}
                         >
                           <CircularProgress size={16} color={isProcessingResumeEdit ? 'secondary' : 'primary'} />
                           <Typography variant="body2" color="text.secondary">
                             {isProcessingResumeEdit ? 'AJ is updating your resume...' : 'AJ is thinking...'}
                           </Typography>
                         </Paper>
                       </Box>
                     )}

                     {/* Error message */}
                     {error && (
                       <Alert 
                         severity="error" 
                         onClose={() => setError(null)}
                         sx={{ fontSize: '0.875rem' }}
                       >
                         {error}
                       </Alert>
                     )}

                     <div ref={messagesEndRef} />
                   </Box>

                   <Divider />

                   {/* Enhanced Input with Resume Context */}
                   <Box sx={{ p: 2 }}>
                     <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>
                       <TextField
                         ref={inputRef}
                         fullWidth
                         multiline
                         maxRows={3}
                         value={inputValue}
                         onChange={(e) => setInputValue(e.target.value)}
                         onKeyPress={handleKeyPress}
                         placeholder={
                           isResumeContext 
                             ? "Ask AJ to improve your resume: 'Update my work experience' or 'Optimize for ATS'..."
                             : "Ask AJ anything about your career, resumes, or job search..."
                         }
                         variant="outlined"
                         size="small"
                         disabled={isLoading || isProcessingResumeEdit}
                         sx={{
                           '& .MuiOutlinedInput-root': {
                             borderRadius: 2,
                             fontSize: '0.875rem',
                             ...(isResumeContext && {
                               borderColor: theme.palette.secondary.main + '50',
                               '&:hover': {
                                 borderColor: theme.palette.secondary.main
                               },
                               '&.Mui-focused': {
                                 borderColor: theme.palette.secondary.main
                               }
                             })
                           }
                         }}
                       />
                       <IconButton
                         color={isResumeContext ? 'secondary' : 'primary'}
                         onClick={handleSendMessage}
                         disabled={!inputValue.trim() || isLoading || isProcessingResumeEdit}
                         sx={{
                           bgcolor: isResumeContext ? theme.palette.secondary.main : theme.palette.primary.main,
                           color: 'white',
                           '&:hover': {
                             bgcolor: isResumeContext ? theme.palette.secondary.dark : theme.palette.primary.dark
                           },
                           '&:disabled': {
                             bgcolor: theme.palette.action.disabled
                           }
                         }}
                       >
                         <SendIcon fontSize="small" />
                       </IconButton>
                     </Box>
                     
                     {/* Resume Context Hint */}
                     {isResumeContext && (
                       <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
                         💡 Try: "Improve my summary", "Add more skills", "Optimize for ATS", or "Update work experience"
                       </Typography>
                     )}
                   </Box>
                 </>
               )}

               {/* Memory Tab */}
               {activeTab === 1 && (
                 <Box sx={{ 
                   flex: 1, 
                   display: 'flex', 
                   flexDirection: 'column',
                   overflow: 'hidden'
                 }}>
                   <Box sx={{ 
                     p: 2, 
                     borderBottom: `1px solid ${theme.palette.divider}`,
                     flexShrink: 0
                   }}>
                     <Typography variant="h6" gutterBottom>
                       Memory Insights
                     </Typography>
                     <Typography variant="body2" color="text.secondary">
                       AJ remembers your preferences, skills, and career goals to provide personalized assistance.
                     </Typography>
                   </Box>
                   
                   <Box sx={{ 
                     flex: 1, 
                     overflow: 'auto',
                     p: 2 
                   }}>
                     {memoryInsights.length > 0 ? (
                       <Box>
                         {memoryInsights.map((insight, index) => (
                           <Paper 
                             key={index} 
                             sx={{ 
                               p: 2, 
                               mb: 1.5,
                               borderRadius: 2,
                               border: `1px solid ${theme.palette.divider}`,
                               '&:hover': {
                                 bgcolor: theme.palette.action.hover
                               }
                             }}
                           >
                             <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1, mb: 1 }}>
                               <Chip 
                                 label={insight.type} 
                                 size="small" 
                                 variant="outlined"
                                 color={
                                   insight.type === 'strength' ? 'success' :
                                   insight.type === 'opportunity' ? 'primary' :
                                   insight.type === 'challenge' ? 'warning' :
                                   insight.type === 'recommendation' ? 'info' : 'default'
                                 }
                                 sx={{ fontSize: '0.75rem', height: 20 }}
                               />
                               <Typography 
                                 variant="caption" 
                                 color="text.secondary"
                                 sx={{ ml: 'auto' }}
                               >
                                 {Math.round((insight.confidence || 0.8) * 100)}% confidence
                               </Typography>
                             </Box>
                             <Typography variant="body2" sx={{ lineHeight: 1.5 }}>
                               {insight.description}
                             </Typography>
                           </Paper>
                         ))}
                       </Box>
                     ) : (
                       <Box sx={{ 
                         textAlign: 'center', 
                         mt: 4,
                         display: 'flex',
                         flexDirection: 'column',
                         alignItems: 'center',
                         gap: 2
                       }}>
                         <MemoryIcon sx={{ fontSize: 48, color: 'text.disabled' }} />
                         <Box>
                           <Typography variant="body2" color="text.secondary" gutterBottom>
                             No memory insights yet. Start chatting to build your profile!
                           </Typography>
                           <Typography variant="caption" color="text.disabled">
                             AJ learns about your preferences, skills, and goals over time.
                           </Typography>
                         </Box>
                       </Box>
                     )}
                   </Box>
                 </Box>
               )}

               {/* Search Tab */}
               {activeTab === 2 && (
                 <Box sx={{ 
                   flex: 1, 
                   display: 'flex', 
                   flexDirection: 'column',
                   overflow: 'hidden'
                 }}>
                   <Box sx={{ 
                     p: 2, 
                     borderBottom: `1px solid ${theme.palette.divider}`,
                     flexShrink: 0
                   }}>
                     <TextField
                       fullWidth
                       value={searchQuery}
                       onChange={(e) => handleSearchChange(e.target.value)}
                       placeholder="Search conversations and memories..."
                       variant="outlined"
                       size="small"
                       InputProps={{
                         endAdornment: (
                           <InputAdornment position="end">
                             {searchLoading ? (
                               <CircularProgress size={20} />
                             ) : (
                               <SearchIcon />
                             )}
                           </InputAdornment>
                         )
                       }}
                       sx={{
                         '& .MuiOutlinedInput-root': {
                           borderRadius: 2
                         }
                       }}
                     />
                   </Box>
                   
                   <Box sx={{ 
                     flex: 1, 
                     overflow: 'auto',
                     p: 2 
                   }}>
                     {searchResults ? (
                       <Box>
                         {/* Conversations Results */}
                         {searchResults.conversations?.length > 0 && (
                           <Box sx={{ mb: 3 }}>
                             <Typography variant="subtitle2" gutterBottom sx={{ 
                               display: 'flex', 
                               alignItems: 'center', 
                               gap: 1,
                               color: theme.palette.primary.main,
                               fontWeight: 600
                             }}>
                               <ChatIcon fontSize="small" />
                               Conversations ({searchResults.conversations.length})
                             </Typography>
                             {searchResults.conversations.map((conv) => (
                               <Paper 
                                 key={conv._id} 
                                 sx={{ 
                                   p: 2, 
                                   mb: 1.5, 
                                   cursor: 'pointer',
                                   borderRadius: 2,
                                   border: `1px solid ${theme.palette.divider}`,
                                   '&:hover': {
                                     bgcolor: theme.palette.action.hover,
                                     borderColor: theme.palette.primary.light
                                   }
                                 }}
                                 onClick={() => handleSelectConversation(conv._id)}
                               >
                                 <Typography variant="body2" fontWeight={600} gutterBottom>
                                   {conv.title}
                                 </Typography>
                                 <Typography 
                                   variant="caption" 
                                   color="text.secondary"
                                   sx={{ 
                                     display: 'block',
                                     overflow: 'hidden',
                                     textOverflow: 'ellipsis',
                                     whiteSpace: 'nowrap'
                                   }}
                                 >
                                   {conv.preview || 'No preview available'}
                                 </Typography>
                                 <Typography variant="caption" color="primary.main" sx={{ mt: 0.5, display: 'block' }}>
                                   Click to view conversation →
                                 </Typography>
                               </Paper>
                             ))}
                           </Box>
                         )}
                         
                         {/* Memories Results */}
                         {searchResults.memories?.length > 0 && (
                           <Box>
                             <Typography variant="subtitle2" gutterBottom sx={{ 
                               display: 'flex', 
                               alignItems: 'center', 
                               gap: 1,
                               color: theme.palette.secondary.main,
                               fontWeight: 600
                             }}>
                               <MemoryIcon fontSize="small" />
                               Memories ({searchResults.memories.length})
                             </Typography>
                             {searchResults.memories.map((memory, index) => (
                               <Paper 
                                 key={index} 
                                 sx={{ 
                                   p: 2, 
                                   mb: 1.5,
                                   borderRadius: 2,
                                   border: `1px solid ${theme.palette.divider}`,
                                   bgcolor: theme.palette.background.default
                                 }}
                               >
                                 <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1, mb: 1 }}>
                                   <Chip 
                                     label={memory.type} 
                                     size="small" 
                                     variant="outlined"
                                     color="secondary"
                                     sx={{ fontSize: '0.75rem', height: 20 }}
                                   />
                                   <Typography 
                                     variant="caption" 
                                     color="text.secondary"
                                     sx={{ ml: 'auto' }}
                                   >
                                     {Math.round((memory.confidence || 0.8) * 100)}% confidence
                                   </Typography>
                                 </Box>
                                 <Typography variant="body2" sx={{ lineHeight: 1.5 }}>
                                   {memory.content}
                                 </Typography>
                               </Paper>
                             ))}
                           </Box>
                         )}
                         
                         {/* No Results */}
                         {(!searchResults.conversations?.length && !searchResults.memories?.length) && (
                           <Box sx={{ 
                             textAlign: 'center', 
                             mt: 4,
                             display: 'flex',
                             flexDirection: 'column',
                             alignItems: 'center',
                             gap: 2
                           }}>
                             <SearchIcon sx={{ fontSize: 48, color: 'text.disabled' }} />
                             <Box>
                               <Typography variant="body2" color="text.secondary" gutterBottom>
                                 No results found for "{searchQuery}"
                               </Typography>
                               <Typography variant="caption" color="text.disabled">
                                 Try searching for skills, career goals, or conversation topics.
                               </Typography>
                             </Box>
                           </Box>
                         )}
                       </Box>
                     ) : (
                       <Box sx={{ 
                         textAlign: 'center', 
                         mt: 4,
                         display: 'flex',
                         flexDirection: 'column',
                         alignItems: 'center',
                         gap: 2
                       }}>
                         <SearchIcon sx={{ fontSize: 48, color: 'text.disabled' }} />
                         <Box>
                           <Typography variant="body2" color="text.secondary" gutterBottom>
                             Search your conversations and memories
                           </Typography>
                           <Typography variant="caption" color="text.disabled">
                             Find past discussions, skills, preferences, and career insights.
                           </Typography>
                         </Box>
                       </Box>
                     )}
                   </Box>
                 </Box>
               )}
             </Box>
           </Box>
         )}
       </Paper>
     </Fade>
   </>
 );
};

export default GlobalAiAssistant;

================
File: src/components/auth/EmailVerification.js
================
// src/components/auth/EmailVerification.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Button,
  Alert,
  CircularProgress,
  Card,
  CardContent,
  Container
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Email as EmailIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import settingsService from '../../utils/settingsService';
import AutoJobLogo from '../common/AutoJobLogo';

const EmailVerification = () => {
  const theme = useTheme();
  const { token } = useParams();
  const navigate = useNavigate();
  
  const [status, setStatus] = useState('verifying'); // 'verifying', 'success', 'error'
  const [message, setMessage] = useState('');
  const [isResending, setIsResending] = useState(false);

  useEffect(() => {
    if (token) {
      verifyEmail(token);
    }
  }, [token]);

  const verifyEmail = async (verificationToken) => {
    try {
      const response = await settingsService.verifyEmail(verificationToken);
      setStatus('success');
      setMessage(response.message || 'Email verified successfully!');
      
      // Redirect to dashboard after 3 seconds
      setTimeout(() => {
        navigate('/dashboard');
      }, 3000);
      
    } catch (error) {
      setStatus('error');
      setMessage(settingsService.getErrorMessage(error));
    }
  };

  const handleResendVerification = async () => {
    try {
      setIsResending(true);
      await settingsService.sendVerificationEmail();
      setMessage('Verification email sent! Please check your inbox.');
      setStatus('success');
    } catch (error) {
      setMessage(settingsService.getErrorMessage(error));
      setStatus('error');
    } finally {
      setIsResending(false);
    }
  };

  const getStatusIcon = () => {
    switch (status) {
      case 'verifying':
        return <CircularProgress size={48} color="primary" />;
      case 'success':
        return <CheckCircleIcon sx={{ fontSize: 48, color: theme.palette.success.main }} />;
      case 'error':
        return <ErrorIcon sx={{ fontSize: 48, color: theme.palette.error.main }} />;
      default:
        return null;
    }
  };

  const getStatusColor = () => {
    switch (status) {
      case 'success':
        return 'success';
      case 'error':
        return 'error';
      default:
        return 'info';
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        <AutoJobLogo 
          variant="stacked" 
          size="large" 
          color="primary"
          showTagline={false}
        />
      </Box>

      <Card sx={{ borderRadius: 3, boxShadow: theme.shadows[8] }}>
        <CardContent sx={{ p: 4, textAlign: 'center' }}>
          <Box sx={{ mb: 3 }}>
            {getStatusIcon()}
          </Box>

          <Typography variant="h4" sx={{ fontWeight: 600, mb: 2 }}>
            {status === 'verifying' && 'Verifying Email...'}
            {status === 'success' && 'Email Verified!'}
            {status === 'error' && 'Verification Failed'}
          </Typography>

          {message && (
            <Alert 
              severity={getStatusColor()} 
              sx={{ mb: 3, textAlign: 'left', borderRadius: 2 }}
            >
              {message}
            </Alert>
          )}

          {status === 'success' && (
            <Box>
              <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                Your email has been successfully verified. You'll be redirected to your dashboard shortly.
              </Typography>
              <Button
                variant="contained"
                onClick={() => navigate('/dashboard')}
                sx={{ borderRadius: 2 }}
              >
                Go to Dashboard
              </Button>
            </Box>
          )}

          {status === 'error' && (
            <Box>
              <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                The verification link may have expired or is invalid.
              </Typography>
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                <Button
                  variant="outlined"
                  onClick={() => navigate('/login')}
                  sx={{ borderRadius: 2 }}
                >
                  Back to Login
                </Button>
                <Button
                  variant="contained"
                  startIcon={isResending ? <CircularProgress size={20} /> : <EmailIcon />}
                  onClick={handleResendVerification}
                  disabled={isResending}
                  sx={{ borderRadius: 2 }}
                >
                  {isResending ? 'Sending...' : 'Resend Email'}
                </Button>
              </Box>
            </Box>
          )}

          {status === 'verifying' && (
            <Typography variant="body2" color="text.secondary">
              Please wait while we verify your email address...
            </Typography>
          )}
        </CardContent>
      </Card>
    </Container>
  );
};

export default EmailVerification;

================
File: src/components/auth/ForgotPassword.js
================
// src/components/auth/ForgotPassword.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  TextField, 
  Button, 
  Typography, 
  Container, 
  Box, 
  Alert, 
  Paper,
  InputAdornment,
  Grid,
  Card,
  CardContent,
  CircularProgress
} from '@mui/material';
import { 
  Email as EmailIcon,
  ArrowBack as ArrowBackIcon,
  Help as HelpIcon,
  Security as SecurityIcon,
  CheckCircle as CheckCircleIcon,
  Send as SendIcon
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
import AutoJobLogo from '../common/AutoJobLogo';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const { forgotPassword, loading } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!email) {
      setError('Please enter your email address');
      return;
    }
    
    const result = await forgotPassword(email);
    
    if (result.success) {
      setSuccess('If an account with that email exists, you will receive password reset instructions shortly.');
    } else {
      setError(result.error);
    }
  };

  return (
    <Box sx={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 50%, #00c4b4 100%)',
      display: 'flex',
      alignItems: 'center',
      py: 3
    }}>
      <Container maxWidth="lg">
        <Grid container spacing={4} alignItems="center" sx={{ minHeight: '90vh' }}>
          {/* Left Side - Branding & Help */}
          <Grid item xs={12} md={6}>
            <Box sx={{ color: 'white', pr: { md: 4 } }}>
              {/* Logo Section */}
              <Box sx={{ mb: 4 }}>
                <AutoJobLogo 
                  variant="horizontal"
                  size="large"
                  color="white"
                  showTagline={true}
                />
              </Box>

              {/* Help Content */}
              <Typography 
                variant="h4" 
                sx={{ 
                  fontWeight: 600,
                  mb: 2,
                  lineHeight: 1.2
                }}
              >
                Need Help Accessing Your Account?
              </Typography>
              
              <Typography 
                variant="h6" 
                sx={{ 
                  opacity: 0.9,
                  fontWeight: 400,
                  mb: 4,
                  lineHeight: 1.4
                }}
              >
                Don't worry, it happens to the best of us. We'll help you get back 
                to your AI-powered job search in no time.
              </Typography>

              {/* Help Steps */}
              <Box sx={{ mb: 4 }}>
                <Typography variant="h6" sx={{ mb: 3, fontWeight: 600 }}>
                  How it works:
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <Card sx={{ 
                      background: 'rgba(255, 255, 255, 0.15)', 
                      backdropFilter: 'blur(10px)',
                      border: '1px solid rgba(255, 255, 255, 0.2)',
                      color: 'white',
                      mb: 2
                    }}>
                      <CardContent sx={{ p: 2.5 }}>
                        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                          <Box 
                            sx={{ 
                              background: '#34a853',
                              borderRadius: '50%',
                              width: 24,
                              height: 24,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              mr: 2,
                              mt: 0.5,
                              flexShrink: 0
                            }}
                          >
                            <Typography variant="caption" sx={{ color: 'white', fontWeight: 600 }}>
                              1
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 0.5 }}>
                              Enter your email address
                            </Typography>
                            <Typography variant="body2" sx={{ opacity: 0.9 }}>
                              The same email you used to create your auto-job.ai account
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>

                  <Grid item xs={12}>
                    <Card sx={{ 
                      background: 'rgba(255, 255, 255, 0.15)', 
                      backdropFilter: 'blur(10px)',
                      border: '1px solid rgba(255, 255, 255, 0.2)',
                      color: 'white',
                      mb: 2
                    }}>
                      <CardContent sx={{ p: 2.5 }}>
                        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                          <Box 
                            sx={{ 
                              background: '#4285f4',
                              borderRadius: '50%',
                              width: 24,
                              height: 24,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              mr: 2,
                              mt: 0.5,
                              flexShrink: 0
                            }}
                          >
                            <Typography variant="caption" sx={{ color: 'white', fontWeight: 600 }}>
                              2
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 0.5 }}>
                              Check your email
                            </Typography>
                            <Typography variant="body2" sx={{ opacity: 0.9 }}>
                              We'll send you a secure link to reset your password
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>

                  <Grid item xs={12}>
                    <Card sx={{ 
                      background: 'rgba(255, 255, 255, 0.15)', 
                      backdropFilter: 'blur(10px)',
                      border: '1px solid rgba(255, 255, 255, 0.2)',
                      color: 'white'
                    }}>
                      <CardContent sx={{ p: 2.5 }}>
                        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                          <Box 
                            sx={{ 
                              background: '#00c4b4',
                              borderRadius: '50%',
                              width: 24,
                              height: 24,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              mr: 2,
                              mt: 0.5,
                              flexShrink: 0
                            }}
                          >
                            <Typography variant="caption" sx={{ color: 'white', fontWeight: 600 }}>
                              3
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 0.5 }}>
                              Create a new password
                            </Typography>
                            <Typography variant="body2" sx={{ opacity: 0.9 }}>
                              Follow the link to set up a secure new password
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </Box>

              {/* Security Note */}
              <Box sx={{ 
                background: 'rgba(255, 255, 255, 0.1)', 
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                borderRadius: 2,
                p: 2.5
              }}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                  <SecurityIcon sx={{ mr: 1.5, color: '#34a853', mt: 0.5 }} />
                  <Box>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 0.5 }}>
                      Security First
                    </Typography>
                    <Typography variant="body2" sx={{ opacity: 0.9, lineHeight: 1.4 }}>
                      For your security, password reset links expire after 1 hour. 
                      If you don't see our email, check your spam folder.
                    </Typography>
                  </Box>
                </Box>
              </Box>
            </Box>
          </Grid>

          {/* Right Side - Reset Form */}
          <Grid item xs={12} md={6}>
            <Paper 
              elevation={0}
              sx={{ 
                p: 4, 
                background: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
              }}
            >
              {/* Header */}
              <Box sx={{ textAlign: 'center', mb: 3 }}>
                <AutoJobLogo 
                  variant="icon-only"
                  size="medium"
                  color="primary"
                />
                <Typography 
                  component="h1" 
                  variant="h4" 
                  sx={{ 
                    fontWeight: 600,
                    color: 'text.primary',
                    mb: 0.5,
                    mt: 1
                  }}
                >
                  Reset Your Password
                </Typography>
                <Typography 
                  variant="body1" 
                  color="text.secondary"
                  sx={{ mb: 2 }}
                >
                  Enter your email address and we'll send you instructions to reset your password
                </Typography>
              </Box>
              
              {error && (
                <Alert 
                  severity="error" 
                  sx={{ 
                    mb: 3,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  {error}
                </Alert>
              )}
              
              {success && (
                <Alert 
                  severity="success" 
                  sx={{ 
                    mb: 3,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  {success}
                </Alert>
              )}
              
              <Box component="form" onSubmit={handleSubmit}>
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  id="email"
                  label="Email Address"
                  name="email"
                  autoComplete="email"
                  autoFocus
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <EmailIcon color="primary" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ mb: 3 }}
                />
                
                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  size="large"
                  disabled={loading}
                  startIcon={!loading && <SendIcon />}
                  sx={{ 
                    py: 1.5,
                    fontSize: '1rem',
                    fontWeight: 600,
                    mb: 3,
                    background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 100%)',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #1557b0 0%, #3367d6 100%)',
                    },
                    '&:disabled': {
                      background: theme => theme.palette.action.disabledBackground
                    }
                  }}
                >
                  {loading ? (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CircularProgress size={20} color="inherit" />
                      Sending reset link...
                    </Box>
                  ) : (
                    'Send Reset Instructions'
                  )}
                </Button>
                
                <Button
                  component={Link}
                  to="/login"
                  fullWidth
                  variant="outlined"
                  size="large"
                  startIcon={<ArrowBackIcon />}
                  sx={{ 
                    py: 1.5,
                    fontSize: '1rem',
                    fontWeight: 500
                  }}
                >
                  Back to Sign In
                </Button>
              </Box>

              {/* Help Information */}
              <Box sx={{ 
                mt: 3, 
                pt: 3, 
                borderTop: '1px solid',
                borderColor: 'divider',
                textAlign: 'center'
              }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Still having trouble? We're here to help.
                </Typography>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  gap: 3,
                  flexWrap: 'wrap'
                }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <HelpIcon sx={{ fontSize: 16, color: 'primary.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      <Link to="/help" style={{ color: 'inherit', textDecoration: 'underline' }}>
                        Contact Support
                      </Link>
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <CheckCircleIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      Available 24/7
                    </Typography>
                  </Box>
                </Box>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default ForgotPassword;

================
File: src/components/auth/Login.js
================
// src/components/auth/Login.js
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { 
  TextField, 
  Button, 
  Typography, 
  Container, 
  Box, 
  Alert, 
  Paper,
  InputAdornment,
  IconButton,
  Divider,
  Grid,
  Card,
  CardContent,
  Chip,
  CircularProgress
} from '@mui/material';
import { 
  Email as EmailIcon,
  Lock as LockIcon,
  Visibility,
  VisibilityOff,
  PersonAdd as PersonAddIcon,
  Help as HelpIcon,
  SmartToy as SmartToyIcon,
  Work as WorkIcon,
  Speed as SpeedIcon,
  CheckCircle as CheckCircleIcon,
  TrendingUp as TrendingUpIcon,
  Security as SecurityIcon
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
import AutoJobLogo from '../common/AutoJobLogo';

const Login = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const { login, loading } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    const result = await login(formData.email, formData.password);
    
    if (result.success) {
      navigate('/dashboard');
    } else {
      setError(result.error);
    }
  };

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };

  return (
    <Box sx={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 50%, #00c4b4 100%)',
      display: 'flex',
      alignItems: 'center',
      py: 3
    }}>
      <Container maxWidth="lg">
        <Grid container spacing={4} alignItems="center" sx={{ minHeight: '90vh' }}>
          {/* Left Side - Branding & Features */}
          <Grid item xs={12} md={6}>
            <Box sx={{ color: 'white', pr: { md: 4 } }}>
              {/* Logo Section */}
              <Box sx={{ mb: 4 }}>
                <AutoJobLogo 
                  variant="horizontal"
                  size="large"
                  color="white"
                  showTagline={true}
                />
              </Box>

              {/* Value Proposition */}
              <Typography 
                variant="h4" 
                sx={{ 
                  fontWeight: 600,
                  mb: 2,
                  lineHeight: 1.2
                }}
              >
                Transform Your Job Search with AI
              </Typography>
              
              <Typography 
                variant="h6" 
                sx={{ 
                  opacity: 0.9,
                  fontWeight: 400,
                  mb: 4,
                  lineHeight: 1.4
                }}
              >
                Join thousands of professionals who've accelerated their careers 
                with our AI-powered job matching platform.
              </Typography>

              {/* Feature Grid */}
              <Grid container spacing={2} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={6}>
                  <Card sx={{ 
                    background: 'rgba(255, 255, 255, 0.15)', 
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    transition: 'transform 0.2s ease-in-out',
                    '&:hover': {
                      transform: 'translateY(-2px)'
                    }
                  }}>
                    <CardContent sx={{ p: 2.5 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 1.5 }}>
                        <SpeedIcon sx={{ mr: 1.5, color: '#34a853', fontSize: '1.5rem' }} />
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                            3x Faster Results
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.9, lineHeight: 1.4 }}>
                            Get interview callbacks 3x faster than traditional job searching methods
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <Card sx={{ 
                    background: 'rgba(255, 255, 255, 0.15)', 
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    transition: 'transform 0.2s ease-in-out',
                    '&:hover': {
                      transform: 'translateY(-2px)'
                    }
                  }}>
                    <CardContent sx={{ p: 2.5 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 1.5 }}>
                        <SmartToyIcon sx={{ mr: 1.5, color: '#4285f4', fontSize: '1.5rem' }} />
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                            AI Automation
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.9, lineHeight: 1.4 }}>
                            24/7 AI agents handle applications, follow-ups, and scheduling
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <Card sx={{ 
                    background: 'rgba(255, 255, 255, 0.15)', 
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    transition: 'transform 0.2s ease-in-out',
                    '&:hover': {
                      transform: 'translateY(-2px)'
                    }
                  }}>
                    <CardContent sx={{ p: 2.5 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 1.5 }}>
                        <WorkIcon sx={{ mr: 1.5, color: '#fbbc04', fontSize: '1.5rem' }} />
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                            Smart Matching
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.9, lineHeight: 1.4 }}>
                            AI analyzes your profile to find perfect job matches automatically
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <Card sx={{ 
                    background: 'rgba(255, 255, 255, 0.15)', 
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    transition: 'transform 0.2s ease-in-out',
                    '&:hover': {
                      transform: 'translateY(-2px)'
                    }
                  }}>
                    <CardContent sx={{ p: 2.5 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 1.5 }}>
                        <TrendingUpIcon sx={{ mr: 1.5, color: '#00c4b4', fontSize: '1.5rem' }} />
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                            Higher Success
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.9, lineHeight: 1.4 }}>
                            85% higher interview callback rate compared to manual applications
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>

              {/* Social Proof */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, flexWrap: 'wrap' }}>
                <Chip 
                  label="10,000+ Active Users" 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'rgba(255,255,255,0.4)',
                    background: 'rgba(255,255,255,0.1)',
                    fontWeight: 500
                  }} 
                  icon={<CheckCircleIcon sx={{ color: '#34a853 !important' }} />}
                />
                <Chip 
                  label="4.9/5 User Rating" 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'rgba(255,255,255,0.4)',
                    background: 'rgba(255,255,255,0.1)',
                    fontWeight: 500
                  }} 
                  icon={<CheckCircleIcon sx={{ color: '#fbbc04 !important' }} />}
                />
                <Chip 
                  label="50K+ Jobs Matched" 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'rgba(255,255,255,0.4)',
                    background: 'rgba(255,255,255,0.1)',
                    fontWeight: 500
                  }} 
                  icon={<CheckCircleIcon sx={{ color: '#00c4b4 !important' }} />}
                />
              </Box>
            </Box>
          </Grid>

          {/* Right Side - Login Form */}
          <Grid item xs={12} md={6}>
            <Paper 
              elevation={0}
              sx={{ 
                p: 4, 
                background: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
              }}
            >
              {/* Header */}
              <Box sx={{ textAlign: 'center', mb: 3 }}>
                <AutoJobLogo 
                  variant="icon-only"
                  size="medium"
                  color="primary"
                />
                <Typography 
                  component="h1" 
                  variant="h4" 
                  sx={{ 
                    fontWeight: 600,
                    color: 'text.primary',
                    mb: 0.5,
                    mt: 1
                  }}
                >
                  Welcome Back
                </Typography>
                <Typography 
                  variant="body1" 
                  color="text.secondary"
                  sx={{ mb: 2 }}
                >
                  Sign in to continue your AI-powered job search journey
                </Typography>
              </Box>
              
              {error && (
                <Alert 
                  severity="error" 
                  sx={{ 
                    mb: 3,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  {error}
                </Alert>
              )}
              
              <Box component="form" onSubmit={handleSubmit}>
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  id="email"
                  label="Email Address"
                  name="email"
                  autoComplete="email"
                  autoFocus
                  value={formData.email}
                  onChange={handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <EmailIcon color="primary" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ mb: 2 }}
                />
                
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  name="password"
                  label="Password"
                  type={showPassword ? 'text' : 'password'}
                  id="password"
                  autoComplete="current-password"
                  value={formData.password}
                  onChange={handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <LockIcon color="primary" />
                      </InputAdornment>
                    ),
                    endAdornment: (
                      <InputAdornment position="end">
                        <IconButton
                          aria-label="toggle password visibility"
                          onClick={handleClickShowPassword}
                          edge="end"
                          size="small"
                        >
                          {showPassword ? <VisibilityOff /> : <Visibility />}
                        </IconButton>
                      </InputAdornment>
                    ),
                  }}
                  sx={{ mb: 3 }}
                />
                
                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  size="large"
                  disabled={loading}
                  sx={{ 
                    py: 1.5,
                    fontSize: '1rem',
                    fontWeight: 600,
                    mb: 3,
                    background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 100%)',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #1557b0 0%, #3367d6 100%)',
                    },
                    '&:disabled': {
                      background: theme => theme.palette.action.disabledBackground
                    }
                  }}
                >
                  {loading ? (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CircularProgress size={20} color="inherit" />
                      Signing you in...
                    </Box>
                  ) : (
                    'Sign In'
                  )}
                </Button>

                <Divider sx={{ my: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    New to auto-job.ai?
                  </Typography>
                </Divider>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
                  <Button
                    component={Link}
                    to="/register"
                    fullWidth
                    variant="outlined"
                    size="large"
                    startIcon={<PersonAddIcon />}
                    sx={{ 
                      py: 1.5,
                      fontSize: '1rem',
                      fontWeight: 500
                    }}
                  >
                    Create Your Free Account
                  </Button>
                  
                  <Button
                    component={Link}
                    to="/forgot-password"
                    fullWidth
                    variant="text"
                    startIcon={<HelpIcon />}
                    sx={{ 
                      py: 1,
                      color: 'text.secondary'
                    }}
                  >
                    Forgot your password?
                  </Button>
                </Box>
              </Box>

              {/* Trust Indicators */}
              <Box sx={{ 
                mt: 3, 
                pt: 3, 
                borderTop: '1px solid',
                borderColor: 'divider',
                textAlign: 'center'
              }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 1.5 }}>
                  Trusted by professionals worldwide
                </Typography>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  gap: 3,
                  flexWrap: 'wrap'
                }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <SecurityIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      Bank-Level Security
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <CheckCircleIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      GDPR Compliant
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <CheckCircleIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      24/7 Support
                    </Typography>
                  </Box>
                </Box>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default Login;

================
File: src/components/auth/ProtectedRoute.js
================
// src/components/auth/ProtectedRoute.js - typical implementation
import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext';

const ProtectedRoute = ({ children }) => {
  console.log('ProtectedRoute rendering');
  const { isAuthenticated, loading } = useContext(AuthContext);
  console.log('Auth in ProtectedRoute:', { isAuthenticated, loading });

  if (loading) {
    // Add a simple loading indicator here
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    console.log('Not authenticated, redirecting to login');
    return <Navigate to="/login" replace />;
  }

  console.log('Authenticated, rendering children');
  return children;
};

export default ProtectedRoute;

================
File: src/components/auth/Register.js
================
// src/components/auth/Register.js
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { 
  TextField, 
  Button, 
  Typography, 
  Container, 
  Box, 
  Alert, 
  Paper, 
  Grid,
  InputAdornment,
  IconButton,
  Divider,
  Card,
  CardContent,
  Chip,
  LinearProgress,
  CircularProgress
} from '@mui/material';
import { 
  Person as PersonIcon,
  Email as EmailIcon,
  Lock as LockIcon,
  Visibility,
  VisibilityOff,
  Login as LoginIcon,
  CheckCircle as CheckCircleIcon,
  SmartToy as SmartToyIcon,
  Speed as SpeedIcon,
  Work as WorkIcon,
  TrendingUp as TrendingUpIcon,
  Security as SecurityIcon
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
import AutoJobLogo from '../common/AutoJobLogo';

const Register = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const { register, loading } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const validateForm = () => {
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return false;
    }
    
    const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;
    if (!passwordRegex.test(formData.password)) {
      setError('Password must be at least 8 characters and include uppercase, lowercase, number, and special character');
      return false;
    }
    
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!validateForm()) {
      return;
    }
    
    const { confirmPassword, ...registrationData } = formData;
    const result = await register(registrationData);
    
    if (result.success) {
      setSuccess('Registration successful! Please check your email to verify your account.');
      setTimeout(() => {
        navigate('/dashboard');
      }, 3000);
    } else {
      setError(result.error);
    }
  };

  // Password strength indicator
  const getPasswordStrength = () => {
    if (!formData.password) return { score: 0, label: '', color: 'error' };
    
    let score = 0;
    const checks = {
      length: formData.password.length >= 8,
      lowercase: /[a-z]/.test(formData.password),
      uppercase: /[A-Z]/.test(formData.password),
      number: /\d/.test(formData.password),
      special: /[!@#$%^&*]/.test(formData.password)
    };
    
    score = Object.values(checks).filter(Boolean).length;
    
    if (score === 5) return { score: 100, label: 'Strong', color: 'success' };
    if (score >= 3) return { score: 60, label: 'Medium', color: 'warning' };
    return { score: 20, label: 'Weak', color: 'error' };
  };

  const passwordStrength = getPasswordStrength();

  return (
    <Box sx={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 50%, #00c4b4 100%)',
      display: 'flex',
      alignItems: 'center',
      py: 3
    }}>
      <Container maxWidth="lg">
        <Grid container spacing={4} alignItems="center" sx={{ minHeight: '90vh' }}>
          {/* Left Side - Branding & Benefits */}
          <Grid item xs={12} md={6}>
            <Box sx={{ color: 'white', pr: { md: 4 } }}>
              {/* Logo Section */}
              <Box sx={{ mb: 4 }}>
                <AutoJobLogo 
                  variant="horizontal"
                  size="large"
                  color="white"
                  showTagline={true}
                />
              </Box>

              {/* Value Proposition */}
              <Typography 
                variant="h4" 
                sx={{ 
                  fontWeight: 600,
                  mb: 2,
                  lineHeight: 1.2
                }}
              >
                Stay Ahead of The Market and Power Your Job Search Today
              </Typography>
              
              <Typography 
                variant="h6" 
                sx={{ 
                  opacity: 0.9,
                  fontWeight: 400,
                  mb: 4,
                  lineHeight: 1.4
                }}
              >
                Join thousands of professionals who've transformed their job search 
                with our AI intelligent platform and accessing our database of over 300k recruiters
              </Typography>

              {/* Benefits List */}
              <Box sx={{ mb: 4 }}>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                  What you'll get with auto-job.ai:
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                      <CheckCircleIcon sx={{ mr: 2, color: '#34a853' }} />
                      <Typography variant="body1">
                        <strong>3x faster interview callbacks</strong> with AI-Tailored resumes
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={12}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                      <CheckCircleIcon sx={{ mr: 2, color: '#34a853' }} />
                      <Typography variant="body1">
                        <strong>24/7 AI agents</strong> finding you jobs and reaching out to recruiters
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={12}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                      <CheckCircleIcon sx={{ mr: 2, color: '#34a853' }} />
                      <Typography variant="body1">
                        <strong>Smart job matching</strong> based on your resume and preferences
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={12}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                      <CheckCircleIcon sx={{ mr: 2, color: '#34a853' }} />
                      <Typography variant="body1">
                        <strong>AI Assistant</strong> to help you stay ahead of the job market
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </Box>

              {/* Social Proof */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, flexWrap: 'wrap' }}>
                <Chip 
                  label="Free to Start" 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'rgba(255,255,255,0.4)',
                    background: 'rgba(255,255,255,0.1)',
                    fontWeight: 500
                  }} 
                  icon={<CheckCircleIcon sx={{ color: '#34a853 !important' }} />}
                />
                <Chip 
                  label="No Credit Card Required" 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'rgba(255,255,255,0.4)',
                    background: 'rgba(255,255,255,0.1)',
                    fontWeight: 500
                  }} 
                  icon={<SecurityIcon sx={{ color: '#4285f4 !important' }} />}
                />
              </Box>
            </Box>
          </Grid>

          {/* Right Side - Registration Form */}
          <Grid item xs={12} md={6}>
            <Paper 
              elevation={0}
              sx={{ 
                p: 4, 
                background: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
              }}
            >
              {/* Header */}
              <Box sx={{ textAlign: 'center', mb: 3 }}>
                <AutoJobLogo 
                  variant="icon-only"
                  size="medium"
                  color="primary"
                />
                <Typography 
                  component="h1" 
                  variant="h4" 
                  sx={{ 
                    fontWeight: 600,
                    color: 'text.primary',
                    mb: 0.5,
                    mt: 1
                  }}
                >
                  Create Your Account
                </Typography>
                <Typography 
                  variant="body1" 
                  color="text.secondary"
                  sx={{ mb: 2 }}
                >
                  Join auto-job.ai and accelerate your career today
                </Typography>
              </Box>
              
              {error && (
                <Alert 
                  severity="error" 
                  sx={{ 
                    mb: 3,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  {error}
                </Alert>
              )}
              
              {success && (
                <Alert 
                  severity="success" 
                  sx={{ 
                    mb: 3,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  {success}
                </Alert>
              )}
              
              <Box component="form" onSubmit={handleSubmit}>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      required
                      fullWidth
                      id="firstName"
                      label="First Name"
                      name="firstName"
                      autoComplete="given-name"
                      value={formData.firstName}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <PersonIcon color="primary" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      required
                      fullWidth
                      id="lastName"
                      label="Last Name"
                      name="lastName"
                      autoComplete="family-name"
                      value={formData.lastName}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <PersonIcon color="primary" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      required
                      fullWidth
                      id="email"
                      label="Email Address"
                      name="email"
                      autoComplete="email"
                      value={formData.email}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <EmailIcon color="primary" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      required
                      fullWidth
                      name="password"
                      label="Password"
                      type={showPassword ? 'text' : 'password'}
                      id="password"
                      autoComplete="new-password"
                      value={formData.password}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <LockIcon color="primary" />
                          </InputAdornment>
                        ),
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              aria-label="toggle password visibility"
                              onClick={() => setShowPassword(!showPassword)}
                              edge="end"
                              size="small"
                            >
                              {showPassword ? <VisibilityOff /> : <Visibility />}
                            </IconButton>
                          </InputAdornment>
                        ),
                      }}
                      helperText="At least 8 characters with uppercase, lowercase, number, and special character"
                    />
                    {formData.password && (
                      <Box sx={{ mt: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                          <Typography variant="caption" color="text.secondary">
                            Password strength:
                          </Typography>
                          <Typography 
                            variant="caption" 
                            color={`${passwordStrength.color}.main`}
                            sx={{ fontWeight: 500 }}
                          >
                            {passwordStrength.label}
                          </Typography>
                        </Box>
                        <LinearProgress 
                          variant="determinate" 
                          value={passwordStrength.score} 
                          color={passwordStrength.color}
                          sx={{ height: 4 }}
                        />
                      </Box>
                    )}
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      required
                      fullWidth
                      name="confirmPassword"
                      label="Confirm Password"
                      type={showConfirmPassword ? 'text' : 'password'}
                      id="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <LockIcon color="primary" />
                          </InputAdornment>
                        ),
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              aria-label="toggle confirm password visibility"
                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                              edge="end"
                              size="small"
                            >
                              {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                            </IconButton>
                          </InputAdornment>
                        ),
                      }}
                    />
                  </Grid>
                </Grid>
                
                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  size="large"
                  disabled={loading}
                  sx={{ 
                    mt: 3, 
                    mb: 3,
                    py: 1.5,
                    fontSize: '1rem',
                    fontWeight: 600,
                    background: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 100%)',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #1557b0 0%, #3367d6 100%)',
                    },
                    '&:disabled': {
                      background: theme => theme.palette.action.disabledBackground
                    }
                  }}
                >
                  {loading ? (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CircularProgress size={20} color="inherit" />
                      Creating your account...
                    </Box>
                  ) : (
                    'Create Your Free Account'
                  )}
                </Button>
                
                <Divider sx={{ my: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    Already have an account?
                  </Typography>
                </Divider>
                
                <Button
                  component={Link}
                  to="/login"
                  fullWidth
                  variant="outlined"
                  size="large"
                  startIcon={<LoginIcon />}
                  sx={{ 
                    py: 1.5,
                    fontSize: '1rem',
                    fontWeight: 500
                  }}
                >
                  Sign In Instead
                </Button>
              </Box>

              {/* Terms and Privacy */}
              <Box sx={{ 
                mt: 3, 
                pt: 3, 
                borderTop: '1px solid',
                borderColor: 'divider',
                textAlign: 'center'
              }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                  By creating an account, you agree to our{' '}
                  <Link to="/terms" style={{ color: 'inherit', textDecoration: 'underline' }}>
                    Terms of Service
                  </Link>
                  {' '}and{' '}
                  <Link to="/privacy" style={{ color: 'inherit', textDecoration: 'underline' }}>
                    Privacy Policy
                  </Link>
                </Typography>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  gap: 3,
                  flexWrap: 'wrap',
                  mt: 1
                }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <SecurityIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      SSL Encrypted
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <CheckCircleIcon sx={{ fontSize: 16, color: 'success.main' }} />
                    <Typography variant="caption" color="text.secondary">
                      No Spam Guarantee
                    </Typography>
                  </Box>
                </Box>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default Register;

================
File: src/components/auth/ResetPassword.js
================
import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { TextField, Button, Typography, Container, Box, Alert, Paper } from '@mui/material';
import { useAuth } from '../../context/AuthContext';

const ResetPassword = () => {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const { resetPassword, loading } = useAuth();
  const { token } = useParams();
  const navigate = useNavigate();

  const validateForm = () => {
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return false;
    }
    
    const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;
    if (!passwordRegex.test(password)) {
      setError('Password must be at least 8 characters and include uppercase, lowercase, number, and special character');
      return false;
    }
    
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!validateForm()) {
      return;
    }
    
    const result = await resetPassword(token, password);
    
    if (result.success) {
      setSuccess('Your password has been reset successfully.');
      setTimeout(() => {
        navigate('/dashboard');
      }, 3000);
    } else {
      setError(result.error);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 8 }}>
        <Paper sx={{ p: 4 }}>
          <Typography component="h1" variant="h5" align="center" gutterBottom>
            Reset Password
          </Typography>
          
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          
          {success && (
            <Alert severity="success" sx={{ mb: 2 }}>
              {success}
            </Alert>
          )}
          
          <Box component="form" onSubmit={handleSubmit}>
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="New Password"
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              helperText="At least 8 characters with uppercase, lowercase, number, and special character"
            />
            <TextField
              margin="normal"
              required
              fullWidth
              name="confirmPassword"
              label="Confirm Password"
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
              disabled={loading}
            >
              {loading ? 'Resetting...' : 'Reset Password'}
            </Button>
            <Box sx={{ textAlign: 'center' }}>
              <Link to="/login" style={{ textDecoration: 'none' }}>
                <Typography variant="body2" color="primary">
                  Back to Login
                </Typography>
              </Link>
            </Box>
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default ResetPassword;

================
File: src/components/common/AutoJobLogo.js
================
// src/components/common/AutoJobLogo.js
import React from 'react';
import { Box, Typography } from '@mui/material';

/**
 * Shared logo component for auto-job.ai
 * Can be used across the application with different variants and sizes
 */
const AutoJobLogo = ({ 
  variant = 'horizontal', // 'horizontal', 'stacked', 'icon-only'
  size = 'medium', // 'small', 'medium', 'large', 'xlarge'
  showTagline = true,
  customTagline = null,
  color = 'primary', // 'primary', 'white', 'gradient'
  className = '',
  onClick = null,
  sx = {}
}) => {
  // Size configurations
  const sizeConfig = {
    small: {
      icon: 32,
      logoText: '1.25rem',
      taglineText: '0.75rem',
      gap: 1
    },
    medium: {
      icon: 48,
      logoText: '1.75rem',
      taglineText: '0.875rem',
      gap: 1.5
    },
    large: {
      icon: 64,
      logoText: '2.25rem',
      taglineText: '1rem',
      gap: 2
    },
    xlarge: {
      icon: 80,
      logoText: '2.75rem',
      taglineText: '1.125rem',
      gap: 2.5
    }
  };

  const config = sizeConfig[size];

  // Color configurations
  const colorConfig = {
    primary: {
      logoText: (theme) => theme.palette.primary.main,
      taglineText: (theme) => theme.palette.text.secondary,
      robotFill: '#e3f2fd',
      robotStroke: (theme) => theme.palette.primary.main,
      antennaColor: (theme) => theme.palette.success.main,
      eyeColor: (theme) => theme.palette.primary.main,
      mouthColor: (theme) => theme.palette.success.main,
      sidePanelColor: (theme) => theme.palette.warning.main
    },
    white: {
      logoText: '#ffffff',
      taglineText: 'rgba(255, 255, 255, 0.8)',
      robotFill: 'rgba(255, 255, 255, 0.9)',
      robotStroke: '#ffffff',
      antennaColor: '#4caf50',
      eyeColor: '#2196f3',
      mouthColor: '#4caf50',
      sidePanelColor: '#ff9800'
    },
    gradient: {
      logoText: 'linear-gradient(135deg, #1a73e8 0%, #4285f4 50%, #34a853 100%)',
      taglineText: (theme) => theme.palette.text.secondary,
      robotFill: '#e3f2fd',
      robotStroke: '#1a73e8',
      antennaColor: '#34a853',
      eyeColor: '#1a73e8',
      mouthColor: '#34a853',
      sidePanelColor: '#fbbc04'
    }
  };

  const colors = colorConfig[color];

  // Robot SVG Component
  const RobotIcon = () => (
    <svg 
      width={config.icon} 
      height={config.icon} 
      viewBox="0 0 64 64" 
      xmlns="http://www.w3.org/2000/svg"
      style={{ display: 'block' }}
    >
      {/* Robot Head Background */}
      <rect 
        x="8" 
        y="12" 
        width="48" 
        height="40" 
        rx="8" 
        ry="8" 
        fill={typeof colors.robotFill === 'function' ? colors.robotFill : colors.robotFill}
        stroke={typeof colors.robotStroke === 'function' ? colors.robotStroke : colors.robotStroke}
        strokeWidth="2"
      />
      
      {/* Antenna */}
      <circle 
        cx="32" 
        cy="8" 
        r="2" 
        fill={colors.antennaColor}
      />
      <line 
        x1="32" 
        y1="10" 
        x2="32" 
        y2="12" 
        stroke={colors.antennaColor}
        strokeWidth="2"
      />
      
      {/* Eyes */}
      <circle cx="22" cy="26" r="4" fill="#ffffff"/>
      <circle cx="42" cy="26" r="4" fill="#ffffff"/>
      <circle cx="22" cy="26" r="2" fill={colors.eyeColor}/>
      <circle cx="42" cy="26" r="2" fill={colors.eyeColor}/>
      
      {/* Mouth */}
      <rect 
        x="26" 
        y="36" 
        width="12" 
        height="6" 
        rx="3" 
        ry="3" 
        fill={colors.mouthColor}
      />
      <rect x="28" y="38" width="2" height="2" fill="#ffffff"/>
      <rect x="32" y="38" width="2" height="2" fill="#ffffff"/>
      <rect x="36" y="38" width="2" height="2" fill="#ffffff"/>
      
      {/* Side panels */}
      <rect 
        x="4" 
        y="20" 
        width="6" 
        height="16" 
        rx="3" 
        ry="3" 
        fill={colors.sidePanelColor}
      />
      <rect 
        x="54" 
        y="20" 
        width="6" 
        height="16" 
        rx="3" 
        ry="3" 
        fill={colors.sidePanelColor}
      />
    </svg>
  );

  // Logo text styles
  const logoTextStyle = {
    fontSize: config.logoText,
    fontWeight: 700,
    lineHeight: 1,
    ...(color === 'gradient' ? {
      background: colors.logoText,
      WebkitBackgroundClip: 'text',
      WebkitTextFillColor: 'transparent',
      backgroundClip: 'text'
    } : {
      color: typeof colors.logoText === 'function' ? colors.logoText : colors.logoText
    })
  };

  const taglineTextStyle = {
    fontSize: config.taglineText,
    fontWeight: 500,
    color: typeof colors.taglineText === 'function' ? colors.taglineText : colors.taglineText,
    mt: 0.5
  };

  // Default tagline
  const taglineText = customTagline || 'Secure interviews faster with AI agents';

  // Render based on variant
  const renderLogo = () => {
    switch (variant) {
      case 'stacked':
        return (
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: config.gap / 2,
              cursor: onClick ? 'pointer' : 'default',
              ...sx
            }}
            className={className}
            onClick={onClick}
          >
            <RobotIcon />
            <Box sx={{ textAlign: 'center' }}>
              <Typography sx={logoTextStyle}>
                auto-job.ai
              </Typography>
              {showTagline && (
                <Typography sx={taglineTextStyle}>
                  {taglineText}
                </Typography>
              )}
            </Box>
          </Box>
        );

      case 'icon-only':
        return (
          <Box
            sx={{
              display: 'inline-flex',
              cursor: onClick ? 'pointer' : 'default',
              ...sx
            }}
            className={className}
            onClick={onClick}
          >
            <RobotIcon />
          </Box>
        );

      case 'horizontal':
      default:
        return (
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              gap: config.gap,
              cursor: onClick ? 'pointer' : 'default',
              ...sx
            }}
            className={className}
            onClick={onClick}
          >
            <RobotIcon />
            <Box>
              <Typography sx={logoTextStyle}>
                auto-job.ai
              </Typography>
              {showTagline && (
                <Typography sx={taglineTextStyle}>
                  {taglineText}
                </Typography>
              )}
            </Box>
          </Box>
        );
    }
  };

  return renderLogo();
};

export default AutoJobLogo;

================
File: src/components/common/GlobalSearch.js
================
// src/components/common/GlobalSearch.js
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  InputBase,
  IconButton,
  Paper,
  Typography,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Divider,
  CircularProgress,
  Tabs,
  Tab,
  Badge,
  useTheme,
  alpha,
  ClickAwayListener,
  Popper,
  Fade,
  ListItemButton
} from '@mui/material';
import {
  Search as SearchIcon,
  Work as WorkIcon,
  Description as DescriptionIcon,
  Person as PersonIcon,
  Clear as ClearIcon,
  History as HistoryIcon,
  TrendingUp as TrendingUpIcon,
  KeyboardArrowRight as KeyboardArrowRightIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import searchService from '../../utils/searchService';
import RecruiterDetails from '../recruiters/RecruiterDetails';

const GlobalSearch = ({ sx = {} }) => {
  const theme = useTheme();
  const navigate = useNavigate();
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [suggestions, setSuggestions] = useState([]);
  const [recentSearches, setRecentSearches] = useState([]);
  const [popularSearches, setPopularSearches] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const [error, setError] = useState(null);
  const [selectedRecruiter, setSelectedRecruiter] = useState(null);
  const [recruiterModalOpen, setRecruiterModalOpen] = useState(false);
  
  const inputRef = useRef(null);
  const resultsRef = useRef(null);
  const debouncedSearchRef = useRef(null);

  // Search categories
  const categories = searchService.getSearchCategories();

  // Initialize debounced search with dependency on selectedCategory
  useEffect(() => {
    debouncedSearchRef.current = searchService.createDebouncedSearch(
      async (searchQuery) => {
        if (searchQuery.trim().length >= 2) {
          await performSearch(searchQuery);
        } else {
          setResults(null);
          if (searchQuery.length >= 1) {
            await loadSuggestions(searchQuery);
          }
        }
      },
      300
    );
  }, []); // Remove selectedCategory dependency to prevent recreating debounced function

  // Load initial data when search opens
  useEffect(() => {
    if (isOpen) {
      loadInitialData();
    }
  }, [isOpen]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (event) => {
      // Global search shortcut (Ctrl/Cmd + K or /)
      if ((event.ctrlKey || event.metaKey) && event.key === 'k' || event.key === '/') {
        event.preventDefault();
        openSearch();
      }
      
      // Escape to close
      if (event.key === 'Escape' && isOpen) {
        closeSearch();
      }
      
      // Arrow navigation
      if (isOpen && results) {
        if (event.key === 'ArrowDown') {
          event.preventDefault();
          navigateResults(1);
        } else if (event.key === 'ArrowUp') {
          event.preventDefault();
          navigateResults(-1);
        } else if (event.key === 'Enter' && selectedIndex >= 0) {
          event.preventDefault();
          selectResult();
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, results, selectedIndex]);

  const loadInitialData = async () => {
    try {
      // Load recent searches
      const recent = searchService.getRecentSearches();
      setRecentSearches(recent);
      
      // Load popular searches
      const popular = await searchService.getPopularSearches();
      setPopularSearches(popular.searches || []);
    } catch (error) {
      console.error('Error loading initial data:', error);
    }
  };

  const loadSuggestions = async (searchQuery) => {
    try {
      const suggestionsData = await searchService.getSuggestions(searchQuery);
      setSuggestions(suggestionsData.suggestions || []);
    } catch (error) {
      console.error('Error loading suggestions:', error);
    }
  };

  const performSearch = async (searchQuery) => {
    try {
      setIsLoading(true);
      const searchResults = await searchService.globalSearch(searchQuery, {
        category: selectedCategory,
        limit: 20
      });
      
      if (searchResults.success) {
        const formattedResults = searchService.formatSearchResults(searchResults.data.results);
        setResults(formattedResults);
        
        // Save to recent searches
        searchService.saveRecentSearch(searchQuery, searchResults.data.results);
      }
    } catch (error) {
      console.error('Search error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (event) => {
    const value = event.target.value;
    setQuery(value);
    setSelectedIndex(-1);
    
    // Clear previous results when query changes and reset to 'all' category
    if (value.trim().length < 2) {
      setResults(null);
      setError(null);
      // Also clear recruiter modal state when query changes
      setSelectedRecruiter(null);
      setRecruiterModalOpen(false);
      if (value.trim().length === 0) {
        setSelectedCategory('all'); // Reset category when query is completely cleared
      }
    }
    
    if (debouncedSearchRef.current) {
      debouncedSearchRef.current(value);
    }
  };

  const openSearch = () => {
    setIsOpen(true);
    // Don't reset category when opening search - keep user's current tab
    setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    }, 100);
  };

  const closeSearch = () => {
    setIsOpen(false);
    // Don't clear query and results when closing - keep them for when user reopens
    setSelectedIndex(-1);
  };

  const handleRecruiterModalClose = () => {
    setRecruiterModalOpen(false);
    setSelectedRecruiter(null);
    // Don't clear the search results when closing the recruiter modal
    // This keeps the search context intact
  };

  const handleStartOutreach = (recruiter) => {
    // Close the modal and search
    handleRecruiterModalClose();
    closeSearch();
    // Navigate to outreach page or handle outreach
    console.log('Starting outreach for:', recruiter);
    // You can add navigation logic here if needed
  };

  const clearAll = () => {
    setQuery('');
    setResults(null);
    setSuggestions([]);
    setSelectedIndex(-1);
    setError(null);
  };

  const navigateResults = (direction) => {
    if (!results) return;
    
    const currentResults = results[selectedCategory] || [];
    const maxIndex = currentResults.length - 1;
    
    if (direction === 1) {
      setSelectedIndex(prev => prev < maxIndex ? prev + 1 : 0);
    } else {
      setSelectedIndex(prev => prev > 0 ? prev - 1 : maxIndex);
    }
  };

  const selectResult = () => {
    if (!results || selectedIndex < 0) return;
    
    const currentResults = results[selectedCategory] || [];
    const selectedResult = currentResults[selectedIndex];
    
    if (selectedResult) {
      navigate(selectedResult.url);
      closeSearch();
    }
  };

  const handleResultClick = (result) => {
    // Handle recruiter results differently - open modal instead of navigating
    if (result.type === 'recruiter') {
      setSelectedRecruiter(result.id);
      setRecruiterModalOpen(true);
    } else {
      // For jobs and resumes, navigate normally
      navigate(result.url);
      closeSearch();
    }
  };

  const handleCategoryChange = (event, newCategory) => {
    console.log(`🔄 Switching category from ${selectedCategory} to ${newCategory}`);
    const oldCategory = selectedCategory;
    setSelectedCategory(newCategory);
    setSelectedIndex(-1);
    
    // Don't re-search when switching categories - just show the existing results
    // The search was already performed with category 'all', so we have all the data
    console.log(`📊 Showing results for ${newCategory} from existing search results`);
    
    if (results) {
      console.log(`📊 Available results:`, {
        totalCount: results.totalCount,
        jobs: results.jobs?.length || 0,
        resumes: results.resumes?.length || 0,
        recruiters: results.recruiters?.length || 0,
        currentCategory: newCategory,
        resultsForCategory: getResultsForCategory(newCategory).length
      });
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setQuery(suggestion.text);
    performSearch(suggestion.text);
  };

  const handleRecentSearchClick = (recentSearch) => {
    setQuery(recentSearch.query);
    performSearch(recentSearch.query);
  };

  const clearQuery = () => {
    setQuery('');
    setResults(null);
    setSuggestions([]);
    setSelectedIndex(-1);
    setError(null);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  const getResultIcon = (type) => {
    switch (type) {
      case 'job': return <WorkIcon fontSize="small" />;
      case 'resume': return <DescriptionIcon fontSize="small" />;
      case 'recruiter': return <PersonIcon fontSize="small" />;
      default: return <SearchIcon fontSize="small" />;
    }
  };

  const getResultsForCategory = (category) => {
    if (!results) return [];
    
    // Handle 'all' category by combining results
    if (category === 'all') {
      const allResults = [
        ...(results.jobs || []),
        ...(results.resumes || []),
        ...(results.recruiters || [])
      ];
      
      // Sort by relevance/type
      return allResults.sort((a, b) => {
        // Prioritize by match score if available
        if (a.matchScore && b.matchScore) {
          return b.matchScore - a.matchScore;
        }
        // Then by creation date
        const aDate = new Date(a.createdAt || a.lastActiveDate || 0);
        const bDate = new Date(b.createdAt || b.lastActiveDate || 0);
        return bDate - aDate;
      });
    }
    
    // Return specific category results
    return results[category] || [];
  };

  const getResultCount = (category) => {
    if (!results) return 0;
    return results[category]?.length || 0;
  };

  const renderEmptyState = () => {
    if (query.trim().length === 0) {
      return (
        <Box sx={{ p: 3 }}>
          {/* Recent Searches */}
          {recentSearches.length > 0 && (
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                <HistoryIcon fontSize="small" sx={{ mr: 1 }} />
                Recent Searches
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {recentSearches.slice(0, 5).map((search, index) => (
                  <Chip
                    key={index}
                    label={search.query}
                    size="small"
                    onClick={() => handleRecentSearchClick(search)}
                    sx={{ cursor: 'pointer' }}
                  />
                ))}
              </Box>
            </Box>
          )}
          
          {/* Popular Searches */}
          {popularSearches.length > 0 && (
            <Box>
              <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                <TrendingUpIcon fontSize="small" sx={{ mr: 1 }} />
                Popular Searches
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {popularSearches.slice(0, 6).map((search, index) => (
                  <Chip
                    key={index}
                    label={search}
                    size="small"
                    variant="outlined"
                    onClick={() => handleSuggestionClick({ text: search })}
                    sx={{ cursor: 'pointer' }}
                  />
                ))}
              </Box>
            </Box>
          )}
          
          {/* Keyboard Shortcuts */}
          <Box sx={{ mt: 3, pt: 2, borderTop: '1px solid', borderColor: 'divider' }}>
            <Typography variant="caption" color="text.secondary">
              Tip: Use <kbd>/</kbd> or <kbd>Ctrl+K</kbd> to search from anywhere
            </Typography>
          </Box>
        </Box>
      );
    }

    if (query.trim().length >= 2 && results && results.totalCount === 0) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <SearchIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" gutterBottom>
            No results found
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Try different keywords or check spelling
          </Typography>
          
          {/* Suggestions */}
          {suggestions.length > 0 && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="subtitle2" sx={{ mb: 1 }}>
                Did you mean:
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, justifyContent: 'center' }}>
                {suggestions.map((suggestion, index) => (
                  <Chip
                    key={index}
                    label={suggestion.text}
                    size="small"
                    onClick={() => handleSuggestionClick(suggestion)}
                    sx={{ cursor: 'pointer' }}
                  />
                ))}
              </Box>
            </Box>
          )}
        </Box>
      );
    }

    return null;
  };

  const renderResults = () => {
    if (!results || results.totalCount === 0) {
      return renderEmptyState();
    }

    const currentResults = results[selectedCategory] || [];

    return (
      <Box>
        {/* Category Tabs */}
        <Tabs
          value={selectedCategory}
          onChange={handleCategoryChange}
          variant="scrollable"
          scrollButtons="auto"
          sx={{ borderBottom: 1, borderColor: 'divider', px: 2 }}
        >
          {categories.map((category) => (
            <Tab
              key={category.value}
              value={category.value}
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  {category.label}
                  {getResultCount(category.value) > 0 && (
                    <Badge
                      badgeContent={getResultCount(category.value)}
                      color="primary"
                      sx={{
                        '& .MuiBadge-badge': {
                          fontSize: '0.7rem',
                          height: 16,
                          minWidth: 16
                        }
                      }}
                    />
                  )}
                </Box>
              }
            />
          ))}
        </Tabs>

        {/* Results List */}
        <List sx={{ maxHeight: 400, overflow: 'auto' }}>
          {currentResults.map((result, index) => {
            const isSelected = index === selectedIndex;
            const typeDisplay = searchService.getResultTypeDisplay(result.type);
            
            return (
              <ListItemButton
                key={`${result.type}-${result.id}`}
                selected={isSelected}
                onClick={() => handleResultClick(result)}
                sx={{
                  py: 1.5,
                  '&.Mui-selected': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.08),
                  }
                }}
              >
                <ListItemIcon sx={{ minWidth: 40 }}>
                  <Box
                    sx={{
                      width: 32,
                      height: 32,
                      borderRadius: 1,
                      backgroundColor: alpha(typeDisplay.color, 0.1),
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: typeDisplay.color
                    }}
                  >
                    {getResultIcon(result.type)}
                  </Box>
                </ListItemIcon>
                
                <ListItemText
                  primary={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {result.title}
                      </Typography>
                      {result.matchScore && (
                        <Chip
                          label={`${result.matchScore}% match`}
                          size="small"
                          color={result.matchScore >= 80 ? 'success' : result.matchScore >= 60 ? 'info' : 'warning'}
                          sx={{ height: 20, fontSize: '0.7rem' }}
                        />
                      )}
                      {result.isActive && (
                        <Chip
                          label="Active"
                          size="small"
                          color="success"
                          sx={{ height: 20, fontSize: '0.7rem' }}
                        />
                      )}
                    </Box>
                  }
                  secondary={
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {result.subtitle}
                      </Typography>
                      {result.description && (
                        <Typography variant="caption" display="block" color="text.secondary">
                          {result.description}
                        </Typography>
                      )}
                      {result.skills && result.skills.length > 0 && (
                        <Box sx={{ mt: 0.5, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                          {result.skills.slice(0, 3).map((skill, skillIndex) => (
                            <Chip
                              key={skillIndex}
                              label={typeof skill === 'string' ? skill : skill.name}
                              size="small"
                              variant="outlined"
                              sx={{ height: 18, fontSize: '0.65rem' }}
                            />
                          ))}
                          {result.skills.length > 3 && (
                            <Typography variant="caption" color="text.secondary">
                              +{result.skills.length - 3} more
                            </Typography>
                          )}
                        </Box>
                      )}
                    </Box>
                  }
                />
                
                <KeyboardArrowRightIcon fontSize="small" color="action" />
              </ListItemButton>
            );
          })}
        </List>
      </Box>
    );
  };

  return (
    <>
      <ClickAwayListener onClickAway={() => {
        if (isOpen) {
          closeSearch();
        }
      }}>
        <Box sx={{ position: 'relative', ...sx }}>
          {/* Search Input */}
          <Box
            sx={{
              display: 'flex',
              position: 'relative',
              borderRadius: 2,
              backgroundColor: alpha(theme.palette.common.black, 0.04),
              '&:hover': {
                backgroundColor: alpha(theme.palette.common.black, 0.06),
              },
              '&:focus-within': {
                backgroundColor: alpha(theme.palette.primary.main, 0.08),
                outline: `2px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              },
              width: '100%',
              maxWidth: { xs: '100%', sm: 400, md: 500 },
              transition: 'all 0.2s ease-in-out',
            }}
          >
            <IconButton 
              sx={{ 
                p: 1.5,
                color: 'text.secondary',
                '&:hover': {
                  color: 'primary.main'
                }
              }} 
              aria-label="search"
              onClick={openSearch}
            >
              <SearchIcon />
            </IconButton>
            
            <InputBase
              ref={inputRef}
              placeholder="Search jobs, companies, skills..."
              value={query}
              onChange={handleInputChange}
              onFocus={openSearch}
              sx={{
                color: 'text.primary',
                flex: 1,
                '& .MuiInputBase-input': {
                  padding: theme.spacing(1.5, 1, 1.5, 0),
                  width: '100%',
                  fontSize: '0.95rem',
                  '&::placeholder': {
                    color: 'text.secondary',
                    opacity: 0.7
                  }
                },
              }}
            />
            
            {isLoading && (
              <Box sx={{ display: 'flex', alignItems: 'center', pr: 1 }}>
                <CircularProgress size={20} />
              </Box>
            )}
            
            {query && !isLoading && (
              <IconButton
                onClick={clearQuery}
                size="small"
                sx={{ mr: 1 }}
              >
                <ClearIcon fontSize="small" />
              </IconButton>
            )}
          </Box>

          {/* Search Results Dropdown */}
          {isOpen && (
            <Paper
              ref={resultsRef}
              elevation={8}
              sx={{
                position: 'absolute',
                top: '100%',
                left: 0,
                right: 0,
                mt: 1,
                maxHeight: 500,
                overflow: 'hidden',
                boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
                border: '1px solid',
                borderColor: 'divider',
                zIndex: theme.zIndex.modal + 1,
                width: inputRef.current?.offsetWidth || '100%'
              }}
            >
              {/* Close button for mobile */}
              <Box sx={{ 
                display: { xs: 'block', md: 'none' },
                p: 1,
                borderBottom: '1px solid',
                borderColor: 'divider'
              }}>
                <IconButton
                  onClick={closeSearch}
                  size="small"
                  sx={{ float: 'right' }}
                >
                  <CloseIcon />
                </IconButton>
                <Typography variant="subtitle2" sx={{ pt: 1 }}>
                  Search Results
                </Typography>
              </Box>

              {renderResults()}
            </Paper>
          )}
        </Box>
      </ClickAwayListener>

      {/* Recruiter Details Modal */}
      <RecruiterDetails
        open={recruiterModalOpen}
        onClose={handleRecruiterModalClose}
        recruiterId={selectedRecruiter}
        onStartOutreach={handleStartOutreach}
      />
    </>
  );
};

export default GlobalSearch;

================
File: src/components/common/PageHeader.js
================
// src/components/common/PageHeader.js
import React from 'react';
import { Typography, Box, Paper, Breadcrumbs, Link } from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

const PageHeader = ({ title, breadcrumbs }) => {
  return (
    <Paper 
      elevation={0} 
      sx={{ 
        backgroundColor: 'background.default', 
        padding: 2, 
        marginBottom: 3,
        borderRadius: 1
      }}
    >
      <Typography variant="h4" component="h1" gutterBottom>
        {title}
      </Typography>
      
      {breadcrumbs && (
        <Breadcrumbs aria-label="breadcrumb">
          <Link component={RouterLink} to="/" color="inherit">
            Dashboard
          </Link>
          {breadcrumbs.map((crumb, index) => (
            <React.Fragment key={index}>
              {index === breadcrumbs.length - 1 ? (
                <Typography color="text.primary">{crumb.label}</Typography>
              ) : (
                <Link component={RouterLink} to={crumb.link} color="inherit">
                  {crumb.label}
                </Link>
              )}
            </React.Fragment>
          ))}
        </Breadcrumbs>
      )}
    </Paper>
  );
};

export default PageHeader;

================
File: src/components/Dashboard.js
================
// src/components/Dashboard.js - Redesigned Dashboard
import React, { useState, useEffect, useContext } from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  LinearProgress,
  Chip,
  useTheme,
  Paper,
  Alert,
  Skeleton,
  Avatar,
} from '@mui/material';
import {
  Description as DescriptionIcon,
  Work as WorkIcon,
  Assignment as AssignmentIcon,
  CheckCircle as CheckCircleIcon,
  Search as SearchIcon,
  People as PeopleIcon,
  Speed as SpeedIcon,
  AutoAwesome as AutoAwesomeIcon,
  Send as SendIcon,
  SmartToy as SmartToyIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import MainLayout from './layout/MainLayout';
import AutoJobLogo from './common/AutoJobLogo';
import resumeService from '../utils/resumeService';
import jobService from '../utils/jobService';

const Dashboard = () => {
  const theme = useTheme();
  const { currentUser } = useContext(AuthContext);
  const navigate = useNavigate();
  
  // State management
  const [loading, setLoading] = useState(true);
  const [resumes, setResumes] = useState([]);
  const [jobs, setJobs] = useState([]);
  const [stats, setStats] = useState({
    resumeCount: 0,
    jobMatches: 0,
    applications: 0,
    resumeScore: 0,
    hasActiveResume: false,
    hasAnalyzedResumes: false
  });

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        setLoading(true);
        
        // Load resumes and jobs in parallel
        const [resumesData, jobsData] = await Promise.all([
          resumeService.getUserResumes().catch(() => []),
          jobService.getUserJobs().catch(() => [])
        ]);
        
        setResumes(resumesData);
        setJobs(jobsData);
        
        // Calculate stats
        const activeResume = resumesData.find(r => r.isActive);
        const completedJobs = jobsData.filter(j => j.analysisStatus?.status === 'completed');
        const applications = jobsData.filter(j => j.applicationStatus && j.applicationStatus !== 'Not Applied');
        
        // Calculate average resume score from all analyzed resumes
        let resumeScore = 0;
        const analyzedResumes = resumesData.filter(r => r.analysis?.overallScore);
        if (analyzedResumes.length > 0) {
          const totalScore = analyzedResumes.reduce((sum, r) => sum + r.analysis.overallScore, 0);
          resumeScore = Math.round(totalScore / analyzedResumes.length);
        }
        
        setStats({
          resumeCount: resumesData.length,
          jobMatches: completedJobs.length,
          applications: applications.length,
          resumeScore: resumeScore,
          hasActiveResume: !!activeResume
        });
        
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    loadDashboardData();
  }, []);

  // Get user's first name
  const firstName = currentUser?.firstName || 'there';
  
  // Determine user journey stage
  const isFirstTimeUser = stats.resumeCount === 0;
  const hasResumes = stats.resumeCount > 0;
  const hasJobs = stats.jobMatches > 0;
  const hasApplications = stats.applications > 0;

  // Get contextual message based on user journey
  const getContextualMessage = () => {
    if (isFirstTimeUser) {
      return {
        title: `Welcome to auto-job.ai, ${firstName}!`,
        message: "Let's get you started! Upload your resume and I'll analyze it with AI to help you find perfect job matches and optimize your applications."
      };
    }
    
    if (!stats.hasAnalyzedResumes) {
      return {
        title: `Hi ${firstName}! Let's analyze your resumes`,
        message: "I see you have resumes uploaded. Let me analyze them with AI to identify strengths, weaknesses, and optimization opportunities for better job matches."
      };
    }
    
    if (stats.resumeScore > 0 && stats.resumeScore < 70) {
      return {
        title: `Hi ${firstName}! Your resume shows potential`,
        message: `Your average resume score is ${stats.resumeScore}/100. Let's work together to boost that score and find you better job opportunities!`
      };
    }
    
    if (stats.resumeScore >= 70 && stats.resumeScore < 85 && !hasJobs) {
      return {
        title: `Great progress, ${firstName}! Ready to find jobs?`,
        message: `Your resumes average ${stats.resumeScore}/100 - solid! Now let's put my AI agents to work finding you the perfect job matches.`
      };
    }

    if (stats.resumeScore >= 85 && !hasJobs) {
      return {
        title: `Excellent work, ${firstName}! Time to hunt for jobs`,
        message: `Your resumes average ${stats.resumeScore}/100 - outstanding! With scores like these, let's find you some amazing opportunities.`
      };
    }
    
    if (hasJobs && !hasApplications) {
      return {
        title: `Perfect timing, ${firstName}!`,
        message: `I found ${stats.jobMatches} job matches for you! Ready to start applying? I can help you tailor your applications for better results.`
      };
    }
    
    if (hasApplications && stats.applications < 10) {
      return {
        title: `You're building momentum, ${firstName}!`,
        message: `You've applied to ${stats.applications} positions - great start! Let's keep the applications flowing and find even more opportunities.`
      };
    }
    
    return {
      title: `You're crushing it, ${firstName}!`,
      message: `With ${stats.applications} applications and ${stats.jobMatches} matches, you're in full job-hunting mode! I'm continuously finding new opportunities that match your profile.`
    };
  };

  // Welcome Speech Bubble Component
  const WelcomeSpeechBubble = () => {
    const contextMessage = getContextualMessage();
    
    return (
      <Paper
        elevation={0}
        sx={{
          p: 3,
          mb: 4,
          background: `linear-gradient(135deg, ${theme.palette.primary.main}12 0%, ${theme.palette.secondary.main}08 100%)`,
          border: `2px solid ${theme.palette.primary.main}25`,
          borderRadius: 3,
          position: 'relative',
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
          <Box sx={{ flexShrink: 0, mt: 0.5 }}>
            <AutoJobLogo variant="icon-only" size="medium" />
          </Box>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h5" gutterBottom sx={{ fontWeight: 600, color: 'primary.main' }}>
              {contextMessage.title}
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ lineHeight: 1.6 }}>
              {contextMessage.message}
            </Typography>
          </Box>
        </Box>
      </Paper>
    );
  };

  // Progress Steps Component
  const ProgressSteps = () => {
    const steps = [
      {
        id: 'upload',
        title: 'Upload Resume',
        description: 'Add your resume files',
        completed: hasResumes,
        action: () => navigate('/resumes'),
        icon: <DescriptionIcon />,
        actionText: hasResumes ? 'Add More Resumes' : 'Upload Resume'
      },
      {
        id: 'analyze',
        title: 'Analysis',
        description: 'Get resume insights',
        completed: stats.hasAnalyzedResumes,
        action: () => navigate('/resumes'),
        icon: <AutoAwesomeIcon />,
        actionText: stats.hasAnalyzedResumes ? 'View Analysis' : 'Analyze Resumes'
      },
      {
        id: 'search',
        title: 'Find Jobs',
        description: 'Discover opportunities',
        completed: hasJobs,
        action: () => hasJobs ? navigate('/jobs') : navigate('/jobs/ai-searches'),
        icon: <SearchIcon />,
        actionText: hasJobs ? 'View Matches' : 'Start Job Search'
      },
      {
        id: 'apply',
        title: 'Apply & Track',
        description: 'Submit applications',
        completed: hasApplications,
        action: () => navigate('/jobs'),
        icon: <SendIcon />,
        actionText: hasApplications ? 'Track Applications' : 'Start Applying'
      }
    ];

    const completedSteps = steps.filter(s => s.completed).length;
    const progressPercentage = (completedSteps / steps.length) * 100;

    return (
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Your Journey Progress
            </Typography>
            <Chip 
              label={`${completedSteps}/${steps.length} Complete`}
              color={completedSteps === steps.length ? 'success' : 'primary'}
              variant="outlined"
              size="small"
            />
          </Box>
          
          <LinearProgress 
            variant="determinate" 
            value={progressPercentage} 
            sx={{ 
              height: 8, 
              borderRadius: 4, 
              mb: 3,
              backgroundColor: theme.palette.grey[200],
              '& .MuiLinearProgress-bar': {
                borderRadius: 4,
                background: `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`
              }
            }} 
          />
          
          <Grid container spacing={2}>
            {steps.map((step, index) => (
              <Grid item xs={12} sm={6} md={3} key={step.id}>
                <Box
                  sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    p: 2,
                    height: 140, // Fixed height for consistency
                    borderRadius: 2,
                    backgroundColor: step.completed ? 'success.main' : 'background.paper',
                    color: step.completed ? 'white' : 'text.primary',
                    border: step.completed ? 'none' : `2px solid ${theme.palette.grey[200]}`,
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[4],
                      borderColor: step.completed ? 'transparent' : theme.palette.primary.main,
                      backgroundColor: step.completed ? 'success.dark' : 'background.paper'
                    }
                  }}
                  onClick={step.action}
                >
                  <Box sx={{ color: step.completed ? 'white' : theme.palette.primary.main, mb: 1 }}>
                    {step.completed ? <CheckCircleIcon /> : step.icon}
                  </Box>
                  
                  <Box sx={{ textAlign: 'center', flex: 1 }}>
                    <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 0.5 }}>
                      {step.title}
                    </Typography>
                    <Typography variant="caption" sx={{ opacity: 0.8, display: 'block', mb: 1 }}>
                      {step.description}
                    </Typography>
                  </Box>
                  
                  {!step.completed && (
                    <Button
                      size="small"
                      variant="text"
                      sx={{ 
                        fontSize: '0.7rem', 
                        minHeight: 'auto',
                        py: 0.5,
                        px: 1,
                        color: 'primary.main',
                        '&:hover': {
                          backgroundColor: 'primary.main',
                          color: 'white'
                        }
                      }}
                      onClick={(e) => {
                        e.stopPropagation();
                        step.action();
                      }}
                    >
                      {step.actionText}
                    </Button>
                  )}
                </Box>
              </Grid>
            ))}
          </Grid>
        </CardContent>
      </Card>
    );
  };

  // Stats Overview for existing users
  const StatsOverview = () => {
    if (isFirstTimeUser) return null;

    return (
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
            color: 'white'
          }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <SpeedIcon sx={{ fontSize: 32, color: 'white', mb: 1 }} />
              <Typography variant="h4" sx={{ fontWeight: 600, color: 'white' }}>
                {stats.resumeScore}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                Resume Score
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            background: `linear-gradient(135deg, ${theme.palette.info.main} 0%, ${theme.palette.info.dark} 100%)`,
            color: 'white'
          }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <WorkIcon sx={{ fontSize: 32, color: 'white', mb: 1 }} />
              <Typography variant="h4" sx={{ fontWeight: 600, color: 'white' }}>
                {stats.jobMatches}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                Job Matches
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            background: `linear-gradient(135deg, ${theme.palette.success.main} 0%, ${theme.palette.success.dark} 100%)`,
            color: 'white'
          }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <AssignmentIcon sx={{ fontSize: 32, color: 'white', mb: 1 }} />
              <Typography variant="h4" sx={{ fontWeight: 600, color: 'white' }}>
                {stats.applications}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                Applications
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            background: `linear-gradient(135deg, ${theme.palette.secondary.main} 0%, ${theme.palette.secondary.dark} 100%)`,
            color: 'white'
          }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <DescriptionIcon sx={{ fontSize: 32, color: 'white', mb: 1 }} />
              <Typography variant="h4" sx={{ fontWeight: 600, color: 'white' }}>
                {stats.resumeCount}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                Resumes
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    );
  };

  // Feature Discovery Component
  const FeatureDiscovery = () => (
    <Card sx={{ mb: 3 }}>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <AutoJobLogo variant="icon-only" size="small" sx={{ mr: 1 }} />
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            AI-Powered Features
          </Typography>
        </Box>
        <Grid container spacing={2}>
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32, mr: 2, mt: 0.5 }}>
                <AutoAwesomeIcon fontSize="small" />
              </Avatar>
              <Box>
                <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                  Smart Resume Analysis
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  AI analyzes your resume and suggests improvements for better job matches
                </Typography>
              </Box>
            </Box>
          </Grid>
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar sx={{ bgcolor: 'secondary.main', width: 32, height: 32, mr: 2, mt: 0.5 }}>
                <SearchIcon fontSize="small" />
              </Avatar>
              <Box>
                <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                  Intelligent Job Discovery
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Our AI agents continuously search for jobs that match your profile
                </Typography>
              </Box>
            </Box>
          </Grid>
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar sx={{ bgcolor: 'success.main', width: 32, height: 32, mr: 2, mt: 0.5 }}>
                <PeopleIcon fontSize="small" />
              </Avatar>
              <Box>
                <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                  Recruiter Outreach
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Connect directly with recruiters and hiring managers in your field
                </Typography>
              </Box>
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Skeleton variant="rectangular" height={120} sx={{ borderRadius: 3, mb: 3 }} />
          <Skeleton variant="rectangular" height={200} sx={{ borderRadius: 2, mb: 3 }} />
          <Grid container spacing={3}>
            {[...Array(4)].map((_, i) => (
              <Grid item xs={12} sm={6} md={3} key={i}>
                <Skeleton variant="rectangular" height={150} sx={{ borderRadius: 2 }} />
              </Grid>
            ))}
          </Grid>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <Box sx={{ p: 3 }}>
        <WelcomeSpeechBubble />
        
        {!isFirstTimeUser && <StatsOverview />}
        
        <ProgressSteps />
        
        {!isFirstTimeUser && <FeatureDiscovery />}
        
        {/* First-time user special prompt */}
        {isFirstTimeUser && (
          <Alert 
            severity="info" 
            sx={{ 
              mb: 3,
              borderRadius: 2,
              '& .MuiAlert-icon': {
                fontSize: 28
              }
            }}
            action={
              <Button 
                color="inherit" 
                size="small" 
                onClick={() => navigate('/resumes')}
                sx={{ fontWeight: 600 }}
              >
                Upload Now
              </Button>
            }
          >
            <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
              Ready to get started?
            </Typography>
            Upload your resume to unlock AI-powered job matching, resume optimization, and recruiter connections.
          </Alert>
        )}
      </Box>
    </MainLayout>
  );
};

export default Dashboard;

================
File: src/components/jobs/AiSearchesPage.js
================
// src/components/jobs/AiSearchesPage.js
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Button,
  CircularProgress,
  Alert,
  Grid,
  Snackbar
} from '@mui/material';
import {
  SmartToy as SmartToyIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import MainLayout from '../layout/MainLayout';
import PageHeader from '../common/PageHeader';
import { useAiSearches } from './hooks/useAiSearches';
import EmptySearchState from './components/EmptySearchState';
import AiSearchSummaryCards from './components/AiSearchSummaryCards';
import AiSearchTable from './components/AiSearchTable';
import AiSearchDetailsDialog from './components/AiSearchDetailsDialog';
import AiSearchDeleteDialog from './components/AiSearchDeleteDialog';

const AiSearchesPage = () => {
  const navigate = useNavigate();
  const {
    searches,
    loading,
    error,
    actionLoading,
    setError,
    fetchSearches,
    handlePauseResume,
    handleDelete
  } = useAiSearches();

  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedSearch, setSelectedSearch] = useState(null);
  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState({});
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  const toggleRowExpansion = (searchId) => {
    setExpandedRows(prev => ({
      ...prev,
      [searchId]: !prev[searchId]
    }));
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false
    });
  };

  const openDeleteDialog = (search) => {
    setSelectedSearch(search);
    setDeleteDialogOpen(true);
  };

  const closeDeleteDialog = () => {
    setDeleteDialogOpen(false);
    setSelectedSearch(null);
  };

  const openDetailsDialog = (search) => {
    setSelectedSearch(search);
    setDetailsDialogOpen(true);
  };

  const closeDetailsDialog = () => {
    setDetailsDialogOpen(false);
    setSelectedSearch(null);
  };

  const handlePauseResumeWithFeedback = async (searchId, currentStatus) => {
    const result = await handlePauseResume(searchId, currentStatus);
    if (result) {
      showSnackbar(result.message, result.success ? 'success' : 'error');
    }
  };

  const handleDeleteWithFeedback = async () => {
    if (!selectedSearch) return;
    
    const result = await handleDelete(selectedSearch._id);
    if (result) {
      showSnackbar(result.message, result.success ? 'success' : 'error');
      if (result.success) {
        closeDeleteDialog();
      }
    }
  };

  const handleStartSearch = () => {
    navigate('/jobs');
  };

  const handleViewJobs = () => {
    closeDetailsDialog();
    navigate('/jobs');
  };

  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '60vh' }}>
          <CircularProgress size={60} thickness={4} color="primary" />
          <Typography variant="h6" sx={{ mt: 3, color: 'text.secondary' }}>
            Loading your AI searches...
          </Typography>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      {/* Removed maxWidth constraint to match other pages */}
      <Box sx={{ p: 3 }}>
        <PageHeader
          title="Agent Job Searches"
          subtitle="Manage your automated AI job searches"
          icon={<SmartToyIcon />}
          action={
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={fetchSearches}
              >
                Refresh
              </Button>
              <Button
                variant="contained"
                color="primary"
                onClick={() => navigate('/jobs')}
              >
                View Jobs
              </Button>
            </Box>
          }
        />

        {error && (
          <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        {searches.length === 0 ? (
          <EmptySearchState onStartSearch={handleStartSearch} />
        ) : (
          <Grid container spacing={3}>
            {/* Summary Cards */}
            <Grid item xs={12}>
              <AiSearchSummaryCards searches={searches} />
            </Grid>

            {/* Enhanced Searches Table */}
            <Grid item xs={12}>
              <AiSearchTable
                searches={searches}
                expandedRows={expandedRows}
                onToggleExpansion={toggleRowExpansion}
                onPauseResume={handlePauseResumeWithFeedback}
                onDelete={openDeleteDialog}
                onViewDetails={openDetailsDialog}
                actionLoading={actionLoading}
              />
            </Grid>
          </Grid>
        )}

        {/* Delete Confirmation Dialog */}
        <AiSearchDeleteDialog
          open={deleteDialogOpen}
          onClose={closeDeleteDialog}
          onConfirm={handleDeleteWithFeedback}
          selectedSearch={selectedSearch}
          isLoading={actionLoading[selectedSearch?._id]}
        />

        {/* Enhanced Details Dialog */}
        <AiSearchDetailsDialog
          open={detailsDialogOpen}
          onClose={closeDetailsDialog}
          selectedSearch={selectedSearch}
          onViewJobs={handleViewJobs}
        />

        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
            variant="filled"
            sx={{ width: '100%' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </MainLayout>
  );
};

export default AiSearchesPage;

================
File: src/components/jobs/components/AiReasoningLogs.js
================
// src/components/jobs/components/AiReasoningLogs.js
import React from 'react';
import {
  Box,
  Typography,
  Paper,
  Stack,
  Avatar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  useTheme
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  AccessTime as TimeIcon,
  Speed as SpeedIcon,
  ExpandMore as ExpandMoreIcon
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';
import { getReasoningIcon, getReasoningColor, formatDate, formatDuration } from '../utils/searchUtils';

const AiReasoningLogs = ({ search }) => {
  const theme = useTheme();

  if (!search.reasoningLogs || search.reasoningLogs.length === 0) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="body2" color="text.secondary">
          No reasoning logs available for this search yet.
        </Typography>
      </Box>
    );
  }

  // Sort logs by timestamp, most recent first
  const sortedLogs = [...search.reasoningLogs].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  
  return (
    <Box sx={{ maxHeight: 400, overflow: 'auto', p: 2 }}>
      <Stack spacing={2}>
        {sortedLogs.slice(0, 10).map((log, index) => (
          <Paper 
            key={index}
            elevation={1} 
            sx={{ 
              p: 2.5, 
              backgroundColor: log.success === false ? 'rgba(234, 67, 53, 0.04)' : 
                             log.success === true ? 'rgba(52, 168, 83, 0.04)' : 
                             'rgba(0, 0, 0, 0.02)',
              border: `1px solid ${log.success === false ? 'rgba(234, 67, 53, 0.2)' : 
                                  log.success === true ? 'rgba(52, 168, 83, 0.2)' : 
                                  theme.palette.divider}`,
              borderRadius: 2,
              position: 'relative',
              transition: 'all 0.2s ease-in-out',
              '&:hover': {
                backgroundColor: log.success === false ? 'rgba(234, 67, 53, 0.06)' : 
                               log.success === true ? 'rgba(52, 168, 83, 0.06)' : 
                               'rgba(26, 115, 232, 0.02)',
                borderColor: log.success === false ? 'rgba(234, 67, 53, 0.3)' : 
                            log.success === true ? 'rgba(52, 168, 83, 0.3)' : 
                            'rgba(26, 115, 232, 0.2)',
                transform: 'translateY(-1px)',
                boxShadow: '0px 6px 12px rgba(0, 0, 0, 0.08)'
              }
            }}
          >
            {/* Custom Timeline Connection Line */}
            {index < sortedLogs.slice(0, 10).length - 1 && (
              <Box sx={{
                position: 'absolute',
                left: 18,
                top: 50,
                bottom: -16,
                width: 2,
                backgroundColor: theme.palette.divider,
                zIndex: 0
              }} />
            )}

            <Box sx={{ display: 'flex', gap: 2, position: 'relative', zIndex: 1 }}>
              {/* Custom Avatar Timeline Dot */}
              <Avatar sx={{ 
                width: 36, 
                height: 36,
                backgroundColor: getReasoningColor(log.phase, log.success, theme),
                border: `2px solid ${theme.palette.background.paper}`,
                boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
                '& .MuiSvgIcon-root': {
                  color: theme.palette.background.paper,
                  fontSize: '18px'
                }
              }}>
                {getReasoningIcon(log.phase)}
              </Avatar>

              <Box sx={{ flex: 1, minWidth: 0 }}>
                {/* Header with phase, success indicator, and timestamp */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Typography variant="subtitle2" sx={{ 
                      fontWeight: 600,
                      color: log.success === false ? theme.palette.error.main : 
                             log.success === true ? theme.palette.success.main : 
                             theme.palette.text.primary
                    }}>
                      {log.phase ? log.phase.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) : 'Unknown Phase'}
                    </Typography>
                    {log.success === true && (
                      <CheckCircleIcon sx={{ fontSize: '16px', color: theme.palette.success.main }} />
                    )}
                    {log.success === false && (
                      <ErrorIcon sx={{ fontSize: '16px', color: theme.palette.error.main }} />
                    )}
                  </Box>
                  <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                      <TimeIcon sx={{ fontSize: '12px', color: 'text.secondary' }} />
                      <Typography variant="caption" color="text.secondary">
                        {formatDate(log.timestamp)}
                      </Typography>
                    </Box>
                    {log.duration && log.duration > 0 && (
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                        <SpeedIcon sx={{ fontSize: '12px', color: 'text.secondary' }} />
                        <Typography variant="caption" color="text.secondary">
                          {formatDuration(log.duration)}
                        </Typography>
                      </Box>
                    )}
                  </Box>
                </Box>

                {/* Message */}
                <Typography variant="body2" sx={{ 
                  mb: 1.5, 
                  lineHeight: 1.5,
                  color: log.success === false ? theme.palette.error.dark : theme.palette.text.primary
                }}>
                  {log.message}
                </Typography>
                
                {/* Details/Metadata Accordion */}
                {((log.details && Object.keys(log.details).length > 0) || 
                  (log.metadata && Object.keys(log.metadata).length > 0)) && (
                  <Accordion 
                    elevation={0} 
                    sx={{ 
                      backgroundColor: 'transparent',
                      '&:before': { display: 'none' },
                      '& .MuiAccordionSummary-root': {
                        minHeight: 'auto',
                        padding: 0,
                        '& .MuiAccordionSummary-content': { 
                          margin: '8px 0',
                          '&.Mui-expanded': { margin: '8px 0' }
                        }
                      }
                    }}
                  >
                    <AccordionSummary
                      expandIcon={<ExpandMoreIcon sx={{ fontSize: '18px', color: theme.palette.primary.main }} />}
                    >
                      <Typography variant="caption" color="primary.main" sx={{ fontWeight: 500 }}>
                        View Technical Details
                      </Typography>
                    </AccordionSummary>
                    <AccordionDetails sx={{ pt: 0, pb: 1 }}>
                      {log.details && Object.keys(log.details).length > 0 && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="caption" fontWeight={600} color="primary.main">
                            Details:
                          </Typography>
                          <Box component="pre" sx={{ 
                            fontSize: '0.75rem', 
                            backgroundColor: theme.palette.background.default, 
                            p: 1.5, 
                            borderRadius: 1,
                            overflow: 'auto',
                            maxHeight: 150,
                            fontFamily: 'Consolas, Monaco, "Courier New", monospace',
                            whiteSpace: 'pre-wrap',
                            lineHeight: 1.4,
                            border: `1px solid ${theme.palette.divider}`,
                            mt: 1
                          }}>
                            {JSON.stringify(log.details, null, 2)}
                          </Box>
                        </Box>
                      )}
                      
                      {log.metadata && Object.keys(log.metadata).length > 0 && (
                        <Box>
                          <Typography variant="caption" fontWeight={600} color="secondary.main">
                            Metadata:
                          </Typography>
                          <Box component="pre" sx={{ 
                            fontSize: '0.75rem', 
                            backgroundColor: theme.palette.background.default, 
                            p: 1.5, 
                            borderRadius: 1,
                            overflow: 'auto',
                            maxHeight: 150,
                            fontFamily: 'Consolas, Monaco, "Courier New", monospace',
                            whiteSpace: 'pre-wrap',
                            lineHeight: 1.4,
                            border: `1px solid ${theme.palette.divider}`,
                            mt: 1
                          }}>
                            {JSON.stringify(log.metadata, null, 2)}
                          </Box>
                        </Box>
                      )}
                    </AccordionDetails>
                  </Accordion>
                )}
              </Box>
            </Box>
          </Paper>
        ))}
      </Stack>
      
      {sortedLogs.length > 10 && (
        <Box sx={{ textAlign: 'center', mt: 3, p: 2 }}>
          <Typography variant="caption" color="text.secondary" sx={{ 
            fontStyle: 'italic',
            backgroundColor: theme.palette.background.default,
            px: 2,
            py: 1,
            borderRadius: 1,
            border: `1px dashed ${theme.palette.divider}`
          }}>
            Showing latest 10 of {sortedLogs.length} reasoning logs
          </Typography>
        </Box>
      )}
    </Box>
  );
};

export default AiReasoningLogs;

================
File: src/components/jobs/components/AiSearchDeleteDialog.js
================
// src/components/jobs/components/AiSearchDeleteDialog.js
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  CircularProgress,
  useTheme
} from '@mui/material';
import {
  Delete as DeleteIcon,
  Description as DescriptionIcon,
  Work as WorkIcon,
  Assessment as AssessmentIcon
} from '@mui/icons-material';

const AiSearchDeleteDialog = ({ 
  open, 
  onClose, 
  onConfirm, 
  selectedSearch, 
  isLoading 
}) => {
  const theme = useTheme();

  return (
    <Dialog 
      open={open} 
      onClose={onClose}
      PaperProps={{
        sx: {
          borderRadius: 2,
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)'
        }
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <DeleteIcon color="error" />
          <Typography variant="h6">Cancel Agent Job Search?</Typography>
        </Box>
      </DialogTitle>
      <DialogContent sx={{ pt: 2 }}>
        <Typography>
          Are you sure you want to cancel this Agent job search? This action cannot be undone.
          The search will be stopped and removed from your active searches.
        </Typography>
        {selectedSearch && (
          <Box sx={{ mt: 3, p: 2, backgroundColor: 'rgba(0, 0, 0, 0.03)', borderRadius: 1 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <DescriptionIcon fontSize="small" sx={{ mr: 1, color: theme.palette.primary.main }} />
              <Typography variant="body2" fontWeight={500}>
                Resume: {selectedSearch.resumeName}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <WorkIcon fontSize="small" sx={{ mr: 1, color: theme.palette.primary.main }} />
              <Typography variant="body2" fontWeight={500}>
                Jobs found: {selectedSearch.totalJobsFound}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <AssessmentIcon fontSize="small" sx={{ mr: 1, color: theme.palette.primary.main }} />
              <Typography variant="body2" fontWeight={500}>
                Status: {selectedSearch.status}
              </Typography>
            </Box>
          </Box>
        )}
      </DialogContent>
      <DialogActions sx={{ px: 3, pb: 2 }}>
        <Button 
          onClick={onClose}
          variant="outlined"
        >
          Keep Search
        </Button>
        <Button
          onClick={onConfirm}
          color="error"
          variant="contained"
          disabled={isLoading}
          startIcon={isLoading ? <CircularProgress size={20} /> : <DeleteIcon />}
        >
          Cancel Search
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default AiSearchDeleteDialog;

================
File: src/components/jobs/components/AiSearchDetailsDialog.js
================
// src/components/jobs/components/AiSearchDetailsDialog.js
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Grid,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Divider,
  useTheme
} from '@mui/material';
import {
  Description as DescriptionIcon,
  Work as WorkIcon,
  LocationOn as LocationIcon,
  TrendingUp as TrendingUpIcon,
  CalendarToday as CalendarIcon,
  Assessment as AssessmentIcon,
  Code as CodeIcon,
  Search as SearchIcon
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';
import { getStatusColor, getStatusIcon, formatDate } from '../utils/searchUtils';
import AiReasoningLogs from './AiReasoningLogs';

const AiSearchDetailsDialog = ({ 
  open, 
  onClose, 
  selectedSearch, 
  onViewJobs 
}) => {
  const theme = useTheme();

  if (!selectedSearch) return null;

  return (
    <Dialog 
      open={open} 
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2,
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)',
          maxHeight: '90vh'
        }
      }}
    >
      <DialogTitle sx={{ 
        pb: 2,
        background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.primary.light} 90%)`,
        color: 'white',
        borderBottom: '1px solid rgba(0, 0, 0, 0.1)'
      }}>
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: 1.5,
          minHeight: '32px' // Ensure consistent height
        }}>
          <AutoJobLogo 
            variant="icon-only" 
            size="medium" 
            color="white"
            sx={{ 
              width: 32, 
              height: 32,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          />
          <Typography 
            variant="h6" 
            sx={{ 
              lineHeight: 1.2,
              display: 'flex',
              alignItems: 'center'
            }}
          >
            AI Search Details & Reasoning
          </Typography>
        </Box>
      </DialogTitle>
      <DialogContent sx={{ pt: 3, pb: 1 }}>
        <Box>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'rgba(26, 115, 232, 0.04)',
                  borderRadius: 2,
                  height: '100%'
                }}
              >
                <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 2, color: theme.palette.primary.main }}>
                  Search Configuration
                </Typography>
                <List disablePadding>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <DescriptionIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Resume</Typography>}
                      secondary={selectedSearch.resumeName}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <WorkIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Target Job Title</Typography>}
                      secondary={selectedSearch.searchCriteria.jobTitle}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <LocationIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Location</Typography>}
                      secondary={selectedSearch.searchCriteria.location}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <TrendingUpIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Experience Level</Typography>}
                      secondary={selectedSearch.searchCriteria.experienceLevel}
                    />
                  </ListItem>
                </List>
              </Paper>
            </Grid>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'rgba(0, 196, 180, 0.04)',
                  borderRadius: 2,
                  height: '100%'
                }}
              >
                <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 2, color: theme.palette.secondary.main }}>
                  Search Performance
                </Typography>
                <List disablePadding>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <CalendarIcon color="secondary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Started</Typography>}
                      secondary={formatDate(selectedSearch.createdAt)}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <WorkIcon color="secondary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Total Jobs Found</Typography>}
                      secondary={`${selectedSearch.totalJobsFound} jobs`}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <TrendingUpIcon color="secondary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Today's Progress</Typography>}
                      secondary={`${selectedSearch.jobsFoundToday}/${selectedSearch.dailyLimit} jobs`}
                    />
                  </ListItem>
                  <ListItem sx={{ px: 0, py: 1 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <AssessmentIcon color="secondary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={<Typography variant="body2" fontWeight={500}>Current Status</Typography>}
                      secondary={
                        <Chip 
                          label={selectedSearch.status} 
                          size="small" 
                          color={getStatusColor(selectedSearch.status)}
                          icon={getStatusIcon(selectedSearch.status)}
                        />
                      }
                    />
                  </ListItem>
                </List>
              </Paper>
            </Grid>
          </Grid>

          {selectedSearch.searchCriteria.skills && selectedSearch.searchCriteria.skills.length > 0 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 2, color: theme.palette.info.main }}>
                Target Skills
              </Typography>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'rgba(33, 150, 243, 0.04)',
                  borderRadius: 2
                }}
              >
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  {selectedSearch.searchCriteria.skills.slice(0, 10).map((skill, index) => (
                    <Chip 
                      key={index}
                      label={skill} 
                      size="small" 
                      variant="outlined"
                      color="info"
                      icon={<CodeIcon />}
                    />
                  ))}
                  {selectedSearch.searchCriteria.skills.length > 10 && (
                    <Chip 
                      label={`+${selectedSearch.searchCriteria.skills.length - 10} more`}
                      size="small" 
                      variant="outlined"
                      color="default"
                    />
                  )}
                </Box>
              </Paper>
            </Box>
          )}

          {selectedSearch.jobsFound && selectedSearch.jobsFound.length > 0 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 2, color: theme.palette.success.main }}>
                Recent Jobs Found
              </Typography>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'rgba(52, 168, 83, 0.04)',
                  borderRadius: 2,
                  maxHeight: 200,
                  overflow: 'auto'
                }}
              >
                {selectedSearch.jobsFound.slice(-5).reverse().map((job, index) => (
                  <Box key={index} sx={{ mb: index < 4 ? 2 : 0 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <WorkIcon 
                          fontSize="small" 
                          sx={{ mr: 1, color: theme.palette.success.main }} 
                        />
                        <Typography variant="body2" fontWeight={500}>
                          {job.title} at {job.company}
                        </Typography>
                      </Box>
                      <Typography 
                        variant="caption" 
                        color="text.secondary"
                        sx={{ ml: 2 }}
                      >
                        {formatDate(job.foundAt)}
                      </Typography>
                    </Box>
                    {index < 4 && <Divider sx={{ mt: 1.5 }} />}
                  </Box>
                ))}
              </Paper>
            </Box>
          )}

          {/* AI Reasoning Logs Section */}
          <Box sx={{ mt: 3 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, mb: 2 }}>
              <AutoJobLogo 
                variant="icon-only" 
                size="small" 
                sx={{ width: 24, height: 24 }}
              />
              <Typography variant="subtitle1" fontWeight={600} color="primary.main">
                AI Reasoning & Decision Making
              </Typography>
              <Chip 
                label={`${selectedSearch.reasoningLogs?.length || 0} entries`}
                size="small" 
                color="primary"
                variant="outlined"
              />
            </Box>
            <Paper 
              elevation={0} 
              sx={{ 
                backgroundColor: 'rgba(26, 115, 232, 0.02)',
                borderRadius: 2,
                border: '1px solid rgba(26, 115, 232, 0.1)',
                maxHeight: 400,
                overflow: 'hidden'
              }}
            >
              <AiReasoningLogs search={selectedSearch} />
            </Paper>
          </Box>
        </Box>
      </DialogContent>
      <DialogActions sx={{ px: 3, pb: 2 }}>
        <Button 
          onClick={onClose}
          variant="outlined"
        >
          Close
        </Button>
        <Button
          variant="contained"
          onClick={onViewJobs}
          startIcon={<SearchIcon />}
        >
          View All Jobs
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default AiSearchDetailsDialog;

================
File: src/components/jobs/components/AiSearchExpandableRow.js
================
// src/components/jobs/components/AiSearchExpandableRow.js
import React from 'react';
import {
  TableRow,
  TableCell,
  Collapse,
  Box,
  Typography,
  Chip,
  useTheme
} from '@mui/material';
import AutoJobLogo from '../../common/AutoJobLogo';
import AiReasoningLogs from './AiReasoningLogs';

const AiSearchExpandableRow = ({ search, expanded }) => {
  const theme = useTheme();

  return (
    <TableRow>
      <TableCell 
        style={{ paddingBottom: 0, paddingTop: 0 }} 
        colSpan={8}
      >
        <Collapse 
          in={expanded} 
          timeout="auto" 
          unmountOnExit
        >
          <Box sx={{ 
            margin: 2, 
            backgroundColor: 'rgba(26, 115, 232, 0.02)',
            borderRadius: 2,
            border: '1px solid rgba(26, 115, 232, 0.1)'
          }}>
            <Box sx={{ 
              p: 2.5, 
              borderBottom: '1px solid rgba(26, 115, 232, 0.1)',
              backgroundColor: 'rgba(26, 115, 232, 0.05)'
            }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                <AutoJobLogo 
                  variant="icon-only" 
                  size="small" 
                  sx={{ width: 28, height: 28 }}
                />
                <Box>
                  <Typography variant="h6" fontWeight={600}>
                    AI Search Reasoning & Progress
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Detailed step-by-step AI reasoning and decision-making process
                  </Typography>
                </Box>
                <Box sx={{ ml: 'auto' }}>
                  <Chip 
                    label={`${search.reasoningLogs?.length || 0} logs`}
                    size="small" 
                    color="primary"
                    variant="outlined"
                    sx={{ fontWeight: 500 }}
                  />
                </Box>
              </Box>
            </Box>
            
            <AiReasoningLogs search={search} />
          </Box>
        </Collapse>
      </TableCell>
    </TableRow>
  );
};

export default AiSearchExpandableRow;

================
File: src/components/jobs/components/AiSearchSummaryCards.js
================
// src/components/jobs/components/AiSearchSummaryCards.js
import React from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Box,
  useTheme
} from '@mui/material';
import {
  PlayArrow as PlayIcon,
  Work as WorkIcon,
  TrendingUp as TrendingUpIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';

const AiSearchSummaryCards = ({ searches }) => {
  const theme = useTheme();

  const summaryData = [
    {
      title: 'Active Searches',
      value: searches.filter(s => s.status === 'running').length,
      subtitle: 'Currently running',
      icon: <PlayIcon fontSize="small" sx={{ mr: 0.5, opacity: 0.8 }} />,
      gradient: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.primary.light} 90%)`,
      shadowColor: 'rgba(26, 115, 232, 0.25)'
    },
    {
      title: 'Total Jobs Found',
      value: searches.reduce((sum, s) => sum + s.totalJobsFound, 0),
      subtitle: 'Across all searches',
      icon: <WorkIcon fontSize="small" sx={{ mr: 0.5, opacity: 0.8 }} />,
      gradient: `linear-gradient(45deg, ${theme.palette.secondary.main} 30%, ${theme.palette.secondary.light} 90%)`,
      shadowColor: 'rgba(0, 196, 180, 0.25)'
    },
    {
      title: 'Jobs Found Today',
      value: searches.reduce((sum, s) => sum + s.jobsFoundToday, 0),
      subtitle: 'New discoveries',
      icon: <TrendingUpIcon fontSize="small" sx={{ mr: 0.5, opacity: 0.8 }} />,
      gradient: `linear-gradient(45deg, ${theme.palette.success.main} 30%, ${theme.palette.success.light} 90%)`,
      shadowColor: 'rgba(52, 168, 83, 0.25)'
    },
    {
      title: 'Daily Limit',
      value: searches.reduce((sum, s) => sum + s.dailyLimit, 0),
      subtitle: 'Maximum per day',
      icon: <ScheduleIcon fontSize="small" sx={{ mr: 0.5, opacity: 0.8 }} />,
      gradient: `linear-gradient(45deg, ${theme.palette.warning.main} 30%, ${theme.palette.warning.light} 90%)`,
      shadowColor: 'rgba(251, 188, 4, 0.25)'
    }
  ];

  return (
    <Grid container spacing={2}>
      {summaryData.map((item, index) => (
        <Grid item xs={12} sm={6} md={3} key={index}>
          <Card sx={{ 
            background: item.gradient,
            color: 'white',
            boxShadow: `0 4px 20px ${item.shadowColor}`,
            transition: 'transform 0.2s',
            '&:hover': {
              transform: 'translateY(-4px)',
            }
          }}>
            <CardContent>
              <Typography variant="overline" sx={{ opacity: 0.8 }} gutterBottom>
                {item.title}
              </Typography>
              <Typography variant="h3" sx={{ fontWeight: 600 }}>
                {item.value}
              </Typography>
              <Box sx={{ mt: 1, display: 'flex', alignItems: 'center' }}>
                {item.icon}
                <Typography variant="body2" sx={{ opacity: 0.8 }}>
                  {item.subtitle}
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default AiSearchSummaryCards;

================
File: src/components/jobs/components/AiSearchTable.js
================
// src/components/jobs/components/AiSearchTable.js
import React from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper
} from '@mui/material';
import AiSearchTableRow from './AiSearchTableRow';
import AiSearchExpandableRow from './AiSearchExpandableRow';

const AiSearchTable = ({ 
  searches, 
  expandedRows, 
  onToggleExpansion, 
  onPauseResume, 
  onDelete, 
  onViewDetails, 
  actionLoading 
}) => {
  return (
    <TableContainer 
      component={Paper} 
      sx={{ 
        borderRadius: 2, 
        overflow: 'hidden',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)'
      }}
    >
      <Table>
        <TableHead>
          <TableRow sx={{ backgroundColor: 'rgba(26, 115, 232, 0.08)' }}>
            <TableCell sx={{ fontWeight: 600, width: 50 }}>Details</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Resume</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Search Criteria</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Progress Today</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Total Found</TableCell>
            <TableCell sx={{ fontWeight: 600 }}>Last Update</TableCell>
            <TableCell align="right" sx={{ fontWeight: 600 }}>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {searches.map((search) => (
            <React.Fragment key={search._id}>
              <AiSearchTableRow
                search={search}
                expanded={expandedRows[search._id]}
                onToggleExpansion={onToggleExpansion}
                onPauseResume={onPauseResume}
                onDelete={onDelete}
                onViewDetails={onViewDetails}
                actionLoading={actionLoading}
              />
              <AiSearchExpandableRow
                search={search}
                expanded={expandedRows[search._id]}
              />
            </React.Fragment>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default AiSearchTable;

================
File: src/components/jobs/components/AiSearchTableRow.js
================
// src/components/jobs/components/AiSearchTableRow.js
import React from 'react';
import {
  TableRow,
  TableCell,
  Box,
  Typography,
  Chip,
  Badge,
  LinearProgress,
  IconButton,
  Tooltip,
  CircularProgress,
  useTheme
} from '@mui/material';
import {
  Description as DescriptionIcon,
  LocationOn as LocationIcon,
  Work as WorkIcon,
  PlayArrow as PlayIcon,
  Pause as PauseIcon,
  Delete as DeleteIcon,
  Info as InfoIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';
import { getStatusColor, getStatusIcon, getProgressPercentage, formatDate } from '../utils/searchUtils';

const AiSearchTableRow = ({ 
  search, 
  expanded, 
  onToggleExpansion, 
  onPauseResume, 
  onDelete, 
  onViewDetails, 
  actionLoading 
}) => {
  const theme = useTheme();

  return (
    <TableRow 
      sx={{ 
        '&:hover': { 
          backgroundColor: 'rgba(0, 0, 0, 0.04)' 
        },
        transition: 'background-color 0.2s'
      }}
    >
      <TableCell>
        <Tooltip title={expanded ? 'Hide AI Reasoning' : 'Show AI Reasoning'}>
          <IconButton
            size="small"
            onClick={() => onToggleExpansion(search._id)}
            sx={{ 
              backgroundColor: 'rgba(26, 115, 232, 0.08)',
              '&:hover': { backgroundColor: 'rgba(26, 115, 232, 0.15)' }
            }}
          >
            {expanded ? 
              <VisibilityOffIcon fontSize="small" /> : 
              <VisibilityIcon fontSize="small" />
            }
          </IconButton>
        </Tooltip>
      </TableCell>
      <TableCell>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <DescriptionIcon 
            color="primary" 
            fontSize="small" 
            sx={{ mr: 1, opacity: 0.7 }} 
          />
          <Typography variant="body2" fontWeight={500}>
            {search.resumeName}
          </Typography>
        </Box>
      </TableCell>
      <TableCell>
        <Box>
          <Typography variant="body2" fontWeight={500}>
            {search.searchCriteria.jobTitle}
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
            <LocationIcon 
              fontSize="small" 
              sx={{ mr: 0.5, color: theme.palette.text.secondary, fontSize: '0.875rem' }} 
            />
            <Typography variant="caption" color="text.secondary">
              {search.searchCriteria.location}
            </Typography>
          </Box>
        </Box>
      </TableCell>
      <TableCell>
        <Chip
          icon={getStatusIcon(search.status)}
          label={search.status}
          color={getStatusColor(search.status)}
          size="small"
          sx={{ 
            fontWeight: 500,
            boxShadow: '0 2px 5px rgba(0, 0, 0, 0.08)'
          }}
        />
      </TableCell>
      <TableCell>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Box sx={{ flex: 1 }}>
            <LinearProgress
              variant="determinate"
              value={getProgressPercentage(search)}
              color={search.status === 'running' ? 'primary' : 'inherit'}
              sx={{
                height: 8,
                borderRadius: 4,
                backgroundColor: 'rgba(0, 0, 0, 0.06)',
                '& .MuiLinearProgress-bar': {
                  borderRadius: 4,
                  backgroundImage: search.status === 'running' 
                    ? `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`
                    : undefined
                }
              }}
            />
          </Box>
          <Typography 
            variant="caption" 
            fontWeight={500}
            sx={{ 
              minWidth: '45px', 
              textAlign: 'right',
              color: search.jobsFoundToday >= search.dailyLimit 
                ? theme.palette.success.main 
                : 'inherit'
            }}
          >
            {search.jobsFoundToday}/{search.dailyLimit}
          </Typography>
        </Box>
      </TableCell>
      <TableCell>
        <Badge 
          badgeContent={search.totalJobsFound} 
          color="primary"
          sx={{ 
            '& .MuiBadge-badge': { 
              fontWeight: 600,
              boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)'
            }
          }}
        >
          <WorkIcon color="action" />
        </Badge>
      </TableCell>
      <TableCell>
        <Box>
          <Typography variant="caption" fontWeight={500}>
            {formatDate(search.lastUpdated)}
          </Typography>
          {search.lastUpdateMessage && (
            <Typography 
              variant="caption" 
              display="block" 
              color="text.secondary"
              sx={{ 
                mt: 0.5,
                maxWidth: 200,
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap'
              }}
            >
              {search.lastUpdateMessage}
            </Typography>
          )}
        </Box>
      </TableCell>
      <TableCell align="right">
        <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>
          <Tooltip title="View Details">
            <IconButton
              size="small"
              color="primary"
              onClick={() => onViewDetails(search)}
              sx={{ 
                backgroundColor: 'rgba(26, 115, 232, 0.08)',
                '&:hover': { backgroundColor: 'rgba(26, 115, 232, 0.15)' }
              }}
            >
              <InfoIcon fontSize="small" />
            </IconButton>
          </Tooltip>
          {(search.status === 'running' || search.status === 'paused') && (
            <Tooltip title={search.status === 'running' ? 'Pause' : 'Resume'}>
              <IconButton
                size="small"
                color={search.status === 'running' ? 'warning' : 'success'}
                onClick={() => onPauseResume(search._id, search.status)}
                disabled={actionLoading[search._id]}
                sx={{ 
                  backgroundColor: search.status === 'running' 
                    ? 'rgba(251, 188, 4, 0.08)'
                    : 'rgba(52, 168, 83, 0.08)',
                  '&:hover': { 
                    backgroundColor: search.status === 'running' 
                      ? 'rgba(251, 188, 4, 0.15)'
                      : 'rgba(52, 168, 83, 0.15)'
                  }
                }}
              >
                {actionLoading[search._id] ? (
                  <CircularProgress size={20} />
                ) : search.status === 'running' ? (
                  <PauseIcon fontSize="small" />
                ) : (
                  <PlayIcon fontSize="small" />
                )}
              </IconButton>
            </Tooltip>
          )}
          <Tooltip title="Cancel Search">
            <IconButton
              size="small"
              color="error"
              onClick={() => onDelete(search)}
              disabled={actionLoading[search._id]}
              sx={{ 
                backgroundColor: 'rgba(234, 67, 53, 0.08)',
                '&:hover': { backgroundColor: 'rgba(234, 67, 53, 0.15)' }
              }}
            >
              <DeleteIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
      </TableCell>
    </TableRow>
  );
};

export default AiSearchTableRow;

================
File: src/components/jobs/components/EmptySearchState.js
================
// src/components/jobs/components/EmptySearchState.js
import React from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Grid,
  Alert
} from '@mui/material';
import {
  TrendingUp as TrendingUpIcon,
  Notifications as NotificationsIcon,
  Assessment as AssessmentIcon
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';

const EmptySearchState = ({ onStartSearch }) => {
  return (
    <Box sx={{ mt: 2 }}>
      <Paper 
        elevation={0} 
        sx={{ 
          p: 4, // Reduced from 5
          textAlign: 'center', 
          display: 'flex', 
          flexDirection: 'column', 
          alignItems: 'center',
          backgroundColor: 'rgba(26, 115, 232, 0.04)',
          border: '1px dashed rgba(26, 115, 232, 0.3)',
          borderRadius: 2,
          mb: 4 // Reduced from 5
        }}
      >
        <Box sx={{ mb: 2 }}> {/* Reduced from 3 */}
          <AutoJobLogo 
            variant="icon-only" 
            size="medium" // Changed from large to medium
            color="primary"
            sx={{ 
              opacity: 0.7,
              filter: 'drop-shadow(0 2px 8px rgba(26, 115, 232, 0.2))'
            }}
          />
        </Box>
        <Typography variant="h5" gutterBottom fontWeight={600}> {/* Changed from h4 to h5 */}
          Start Your AI Agent Job Search
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3, maxWidth: 600, fontSize: '0.95rem' }}> {/* Reduced mb and maxWidth, added smaller fontSize */}
          Let our AI Agent continuously search for job opportunities that match your resume.
          Our platform will analyze matches, find relevant positions, and track your search progress automatically.
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<AutoJobLogo variant="icon-only" size="small" />} // Changed icon to AutoJobLogo
            onClick={onStartSearch}
            size="medium" // Changed from large to medium
            sx={{ 
              py: 1.2, // Reduced from 1.5
              px: 3, // Reduced from 4
              fontSize: '1rem', // Reduced from 1.1rem
              fontWeight: 500,
              boxShadow: '0 4px 12px rgba(26, 115, 232, 0.2)'
            }}
          >
            Begin AI Job Search {/* Updated text */}
          </Button>
        </Box>
        <Alert severity="info" sx={{ mt: 2.5, maxWidth: 550, fontSize: '0.875rem' }}> {/* Reduced mt and maxWidth, added smaller fontSize */}
          You need at least one active resume to use the AI Agent search feature.
          Please upload and activate a resume first.
        </Alert>
      </Paper>

      <Typography variant="h6" sx={{ mb: 2.5, fontWeight: 600 }}> {/* Changed from h5 to h6, reduced mb */}
        How Our AI Agent Search Works
      </Typography>

      <Grid container spacing={2.5} sx={{ mb: 3 }}> {/* Reduced spacing and mb */}
        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, // Reduced from 3
            borderRadius: 2, 
            borderLeft: '4px solid #4caf50',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={500}> {/* Changed from h6 to subtitle1 */}
              1. AI Resume Analysis
            </Typography>
            <Box sx={{ 
                height: 100, // Reduced from 140
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5 // Reduced from 2
              }}
            >
              <AutoJobLogo 
                variant="icon-only" 
                size="medium" // Reduced from large equivalent
                color="primary"
                sx={{ opacity: 0.7 }}
              />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}> {/* Added smaller fontSize */}
              Our AI analyzes your resume and career preferences to understand your ideal job profile
              and search criteria.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, // Reduced from 3
            borderRadius: 2, 
            borderLeft: '4px solid #2196f3',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={500}> {/* Changed from h6 to subtitle1 */}
              2. Continuous Job Discovery
            </Typography>
            <Box sx={{ 
                height: 100, // Reduced from 140
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5 // Reduced from 2
              }}
            >
              <TrendingUpIcon sx={{ fontSize: 60, color: '#2196f3', opacity: 0.7 }} /> {/* Reduced from 80 */}
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}> {/* Added smaller fontSize */}
              Searches multiple job boards and company websites 24/7 to find relevant opportunities
              matching your profile.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, // Reduced from 3
            borderRadius: 2, 
            borderLeft: '4px solid #ff9800',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={500}> {/* Changed from h6 to subtitle1 */}
              3. Smart Notifications
            </Typography>
            <Box sx={{ 
                height: 100, // Reduced from 140
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5 // Reduced from 2
              }}
            >
              <NotificationsIcon sx={{ fontSize: 60, color: '#ff9800', opacity: 0.7 }} /> {/* Reduced from 80 */}
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}> {/* Added smaller fontSize */}
              Get notified when new relevant jobs are found and receive detailed AI reasoning
              for each match.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper elevation={1} sx={{ 
            p: 2.5, // Reduced from 3
            borderRadius: 2, 
            borderLeft: '4px solid #9c27b0',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={500}> {/* Changed from h6 to subtitle1 */}
              4. Intelligent Matching
            </Typography>
            <Box sx={{ 
                height: 100, // Reduced from 140
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5 // Reduced from 2
              }}
            >
              <AssessmentIcon sx={{ fontSize: 60, color: '#9c27b0', opacity: 0.7 }} /> {/* Reduced from 80 */}
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}> {/* Added smaller fontSize */}
              Each found job is automatically analyzed for compatibility with your resume,
              providing match scores and improvement suggestions.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper elevation={1} sx={{ 
            p: 2.5, // Reduced from 3
            borderRadius: 2, 
            borderLeft: '4px solid #00bcd4',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={500}> {/* Changed from h6 to subtitle1 */}
              5. Progress Tracking
            </Typography>
            <Box sx={{ 
                height: 100, // Reduced from 140
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5 // Reduced from 2
              }}
            >
              <AutoJobLogo 
                variant="icon-only" 
                size="medium" // Reduced from large equivalent
                color="primary"
                sx={{ opacity: 0.7 }}
              />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}> {/* Added smaller fontSize */}
              Monitor your AI Agent's progress, view detailed reasoning logs, and manage
              your automated job search campaigns.
            </Typography>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default EmptySearchState;

================
File: src/components/jobs/components/EnhancedCircularProgress.js
================
// src/components/jobs/components/EnhancedCircularProgress.js
import React from 'react';
import {
  Box,
  Typography,
  CircularProgress,
  useTheme
} from '@mui/material';

export const EnhancedCircularProgress = ({ value, size = 120 }) => {
  const theme = useTheme();
  
  const getColor = (score) => {
    if (score >= 85) return theme.palette.success.main;
    if (score >= 70) return theme.palette.info.main;
    if (score >= 55) return theme.palette.warning.main;
    return theme.palette.error.main;
  };

  const getQualityLabel = (score) => {
    if (score >= 85) return 'Excellent';
    if (score >= 70) return 'Good';
    if (score >= 55) return 'Fair';
    return 'Needs Work';
  };

  return (
    <Box sx={{ position: 'relative', display: 'inline-flex', flexDirection: 'column', alignItems: 'center' }}>
      <Box sx={{ position: 'relative', display: 'inline-flex' }}>
        {/* Background circle */}
        <CircularProgress
          variant="determinate"
          size={size}
          thickness={6}
          value={100}
          sx={{ 
            color: getColor(value),
            opacity: 0.1,
            position: 'absolute'
          }}
        />
        {/* Progress circle */}
        <CircularProgress
          variant="determinate"
          size={size}
          thickness={6}
          value={value}
          sx={{ 
            color: getColor(value),
            transition: 'all 0.3s ease',
            '& .MuiCircularProgress-circle': {
              strokeLinecap: 'round',
            }
          }}
        />
        <Box
          sx={{
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            position: 'absolute',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column'
          }}
        >
          <Typography variant="h3" component="div" fontWeight="bold" color={getColor(value)}>
            {Math.round(value)}%
          </Typography>
          <Typography variant="body2" color="text.secondary" fontWeight={500}>
            {getQualityLabel(value)}
          </Typography>
        </Box>
      </Box>
    </Box>
  );
};

================
File: src/components/jobs/components/JobAnalysisStatus.js
================
// src/components/jobs/components/JobAnalysisStatus.js
import React from 'react';
import {
  Box,
  Typography,
  LinearProgress,
  Chip,
  CircularProgress,
  Tooltip,
  Alert
} from '@mui/material';
import {
  HourglassEmpty as HourglassEmptyIcon,
  AutoAwesome as AutoAwesomeIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  SmartToy as SmartToyIcon
} from '@mui/icons-material';

const JobAnalysisStatus = ({ 
  analysisStatus, 
  size = 'normal', // 'small', 'normal', 'large'
  variant = 'full', // 'full', 'chip', 'progress-only'
  showDetails = true 
}) => {
  if (!analysisStatus) {
    return null;
  }

  const { status, progress, message, skillsFound, experienceLevel } = analysisStatus;

  // Status configuration
  const statusConfig = {
    pending: {
      label: 'Analysis Queued',
      color: 'info',
      icon: HourglassEmptyIcon,
      bgColor: 'rgba(2, 136, 209, 0.1)',
      textColor: '#0288d1'
    },
    analyzing: {
      label: 'Analyzing Job',
      color: 'primary',
      icon: AutoAwesomeIcon,
      bgColor: 'rgba(26, 115, 232, 0.1)',
      textColor: '#1a73e8'
    },
    completed: {
      label: 'Analysis Complete',
      color: 'success',
      icon: CheckCircleIcon,
      bgColor: 'rgba(52, 168, 83, 0.1)',
      textColor: '#34a853'
    },
    error: {
      label: 'Analysis Failed',
      color: 'error',
      icon: ErrorIcon,
      bgColor: 'rgba(234, 67, 53, 0.1)',
      textColor: '#ea4335'
    }
  };

  const config = statusConfig[status] || statusConfig.pending;
  const IconComponent = config.icon;

  // Size configurations
  const sizeConfig = {
    small: {
      iconSize: 16,
      chipHeight: 24,
      typography: 'caption',
      progressHeight: 4
    },
    normal: {
      iconSize: 20,
      chipHeight: 28,
      typography: 'body2',
      progressHeight: 6
    },
    large: {
      iconSize: 24,
      chipHeight: 32,
      typography: 'body1',
      progressHeight: 8
    }
  };

  const currentSize = sizeConfig[size];

  // Render chip variant
  if (variant === 'chip') {
    return (
      <Chip
        icon={
          status === 'analyzing' ? (
            <CircularProgress 
              size={currentSize.iconSize} 
              thickness={6} 
              color={config.color}
            />
          ) : (
            <IconComponent 
              sx={{ 
                fontSize: `${currentSize.iconSize}px !important`,
                color: config.textColor 
              }} 
            />
          )
        }
        label={config.label}
        size={size}
        sx={{
          height: currentSize.chipHeight,
          backgroundColor: config.bgColor,
          color: config.textColor,
          border: `1px solid ${config.textColor}`,
          fontWeight: 500,
          '& .MuiChip-icon': {
            color: `${config.textColor} !important`
          }
        }}
      />
    );
  }

  // Render progress only
  if (variant === 'progress-only') {
    return (
      <Box sx={{ width: '100%' }}>
        <LinearProgress
          variant="determinate"
          value={progress}
          color={config.color}
          sx={{
            height: currentSize.progressHeight,
            borderRadius: currentSize.progressHeight / 2,
            backgroundColor: config.bgColor,
            '& .MuiLinearProgress-bar': {
              borderRadius: currentSize.progressHeight / 2,
            }
          }}
        />
        {showDetails && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
            <Typography variant={currentSize.typography} color="text.secondary">
              {message}
            </Typography>
            <Typography variant={currentSize.typography} color="text.secondary">
              {progress}%
            </Typography>
          </Box>
        )}
      </Box>
    );
  }

  // Render full variant
  return (
    <Box
      sx={{
        p: size === 'small' ? 1.5 : 2,
        borderRadius: 2,
        backgroundColor: config.bgColor,
        border: `1px solid ${config.textColor}`,
        display: 'flex',
        alignItems: 'center',
        gap: 1.5
      }}
    >
      {/* Status Icon */}
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        {status === 'analyzing' ? (
          <CircularProgress 
            size={currentSize.iconSize} 
            thickness={6} 
            color={config.color}
          />
        ) : (
          <IconComponent 
            sx={{ 
              fontSize: currentSize.iconSize,
              color: config.textColor 
            }} 
          />
        )}
      </Box>

      {/* Status Content */}
      <Box sx={{ flex: 1, minWidth: 0 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
          <Typography 
            variant={currentSize.typography} 
            fontWeight={600}
            color={config.textColor}
            noWrap
          >
            {config.label}
          </Typography>
          
          {/* AI Badge for analyzing status */}
          {status === 'analyzing' && (
            <Chip
              icon={<SmartToyIcon sx={{ fontSize: '14px !important' }} />}
              label="AI"
              size="small"
              sx={{
                height: 18,
                fontSize: '0.7rem',
                backgroundColor: config.textColor,
                color: 'white',
                '& .MuiChip-icon': {
                  color: 'white !important'
                }
              }}
            />
          )}
        </Box>

        {/* Progress Bar for non-completed status */}
        {status !== 'completed' && status !== 'error' && (
          <Box sx={{ mb: 1 }}>
            <LinearProgress
              variant="determinate"
              value={progress}
              color={config.color}
              sx={{
                height: currentSize.progressHeight,
                borderRadius: currentSize.progressHeight / 2,
                backgroundColor: 'rgba(255,255,255,0.3)',
                '& .MuiLinearProgress-bar': {
                  borderRadius: currentSize.progressHeight / 2,
                }
              }}
            />
          </Box>
        )}

        {/* Status Message */}
        <Typography 
          variant={size === 'small' ? 'caption' : 'body2'} 
          color={config.textColor}
          sx={{ opacity: 0.9 }}
        >
          {message}
        </Typography>

        {/* Success Details */}
        {status === 'completed' && showDetails && skillsFound !== undefined && (
          <Box sx={{ mt: 1, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            <Chip
              label={`${skillsFound} skills found`}
              size="small"
              variant="outlined"
              sx={{
                height: 20,
                fontSize: '0.7rem',
                borderColor: config.textColor,
                color: config.textColor
              }}
            />
            {experienceLevel && (
              <Chip
                label={`${experienceLevel} level`}
                size="small"
                variant="outlined"
                sx={{
                  height: 20,
                  fontSize: '0.7rem',
                  borderColor: config.textColor,
                  color: config.textColor
                }}
              />
            )}
          </Box>
        )}

        {/* Error Details */}
        {status === 'error' && showDetails && (
          <Alert 
            severity="error" 
            sx={{ 
              mt: 1, 
              py: 0.5,
              fontSize: '0.75rem',
              '& .MuiAlert-icon': {
                fontSize: '1rem'
              }
            }}
          >
            Analysis failed. You can still view the job, but some features may be limited.
          </Alert>
        )}
      </Box>

      {/* Progress Percentage */}
      {(status === 'analyzing' || status === 'pending') && (
        <Typography 
          variant={size === 'small' ? 'caption' : 'body2'} 
          fontWeight={600}
          color={config.textColor}
        >
          {progress}%
        </Typography>
      )}
    </Box>
  );
};

export default JobAnalysisStatus;

================
File: src/components/jobs/components/JobDetailsCard.js
================
// src/components/jobs/components/JobDetailsCard.js
import React from 'react';
import {
  Card,
  CardHeader,
  CardContent,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Typography,
  Divider
} from '@mui/material';
import {
  Work as WorkIcon,
  Business as BusinessIcon,
  LocationOn as LocationOnIcon,
  Schedule as ScheduleIcon,
  TrendingUp as TrendingUpIcon,
  AttachMoney as AttachMoneyIcon
} from '@mui/icons-material';

const JobDetailsCard = ({ job }) => {
  return (
    <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
      <CardHeader 
        title="Job Details" 
        avatar={<WorkIcon color="primary" />}
        sx={{ 
          pb: 1, 
          '& .MuiCardHeader-title': { fontWeight: 600 } 
        }}
      />
      <CardContent>
        <List sx={{ '& .MuiListItem-root': { py: 1.5 } }}>
          <ListItem>
            <ListItemIcon>
              <BusinessIcon color="primary" />
            </ListItemIcon>
            <ListItemText
              primary={<Typography variant="body2" color="text.secondary">Company</Typography>}
              secondary={<Typography variant="body1" fontWeight={500}>{job.company}</Typography>}
            />
          </ListItem>
          <Divider variant="inset" component="li" />
          
          <ListItem>
            <ListItemIcon>
              <LocationOnIcon color="primary" />
            </ListItemIcon>
            <ListItemText
              primary={<Typography variant="body2" color="text.secondary">Location</Typography>}
              secondary={
                <Typography variant="body1" fontWeight={500}>
                  {job.location?.city 
                    ? `${job.location.city}${job.location.state ? `, ${job.location.state}` : ''}`
                    : job.location?.remote ? 'Remote' : 'Location not specified'}
                </Typography>
              }
            />
          </ListItem>
          <Divider variant="inset" component="li" />
          
          <ListItem>
            <ListItemIcon>
              <ScheduleIcon color="primary" />
            </ListItemIcon>
            <ListItemText
              primary={<Typography variant="body2" color="text.secondary">Job Type</Typography>}
              secondary={<Typography variant="body1" fontWeight={500}>{job.jobType?.replace('_', ' ') || 'Full-time'}</Typography>}
            />
          </ListItem>
          
          {job.parsedData?.yearsOfExperience && (
            <>
              <Divider variant="inset" component="li" />
              <ListItem>
                <ListItemIcon>
                  <TrendingUpIcon color="primary" />
                </ListItemIcon>
                <ListItemText
                  primary={<Typography variant="body2" color="text.secondary">Experience Required</Typography>}
                  secondary={
                    <Typography variant="body1" fontWeight={500}>
                      {job.parsedData.yearsOfExperience.minimum || 0}
                      {job.parsedData.yearsOfExperience.preferred && job.parsedData.yearsOfExperience.preferred !== job.parsedData.yearsOfExperience.minimum 
                        ? `-${job.parsedData.yearsOfExperience.preferred}` 
                        : '+'} years
                    </Typography>
                  }
                />
              </ListItem>
            </>
          )}
          
          {job.salary?.min && (
            <>
              <Divider variant="inset" component="li" />
              <ListItem>
                <ListItemIcon>
                  <AttachMoneyIcon color="primary" />
                </ListItemIcon>
                <ListItemText
                  primary={<Typography variant="body2" color="text.secondary">Salary Range</Typography>}
                  secondary={
                    <Typography variant="body1" fontWeight={500}>
                      {`${job.salary.currency || '$'}${job.salary.min}${job.salary.max ? ` - ${job.salary.max}` : '+'}`}
                    </Typography>
                  }
                />
              </ListItem>
            </>
          )}
        </List>
      </CardContent>
    </Card>
  );
};

export default JobDetailsCard;

================
File: src/components/jobs/components/JobHeader.js
================
// src/components/jobs/components/JobHeader.js
import React from 'react';
import {
  Paper,
  Typography,
  Box,
  Chip,
  Button,
  IconButton,
  useTheme
} from '@mui/material';
import {
  Business as BusinessIcon,
  LocationOn as LocationOnIcon,
  SmartToy as SmartToyIcon,
  OpenInNew as OpenInNewIcon,
  MoreVert as MoreVertIcon,
  TrendingUp as TrendingUpIcon
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';

const JobHeader = ({ 
  job, 
  onTailorClick, 
  onMenuClick, 
  onOpenOriginal 
}) => {
  const theme = useTheme();

  // Safe AutoJobLogo wrapper component
  const SafeAutoJobLogo = ({ size = 'small' }) => {
    try {
      return (
        <AutoJobLogo 
          variant="icon-only" 
          size={size} 
          showTagline={false}
        />
      );
    } catch (error) {
      // Fallback to SmartToy icon if AutoJobLogo fails
      console.warn('AutoJobLogo failed to render:', error);
      return <SmartToyIcon sx={{ fontSize: size === 'small' ? 16 : 20 }} />;
    }
  };

  // Custom chip icon for discovered jobs - properly sized and positioned
  const DiscoveredChipIcon = () => {
    try {
      return (
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center', 
          width: 18, 
          height: 18,
          ml: 0.5  // Add left margin to bring logo closer to "Discovered" text
        }}>
          <AutoJobLogo 
            variant="icon-only" 
            size="small"
            showTagline={false}
            sx={{ 
              '& svg': { 
                width: 14, 
                height: 14,
                display: 'block'
              } 
            }}
          />
        </Box>
      );
    } catch (error) {
      console.warn('AutoJobLogo failed to render in chip:', error);
      return <SmartToyIcon sx={{ fontSize: 16 }} />;
    }
  };

  return (
    <Paper 
      elevation={2} 
      sx={{ 
        p: 3, 
        mb: 4, 
        borderRadius: 3,
        backgroundImage: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.primary.light}15 100%)` 
      }}
    >
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap' }}>
        <Box>
          <Typography variant="h4" component="h1" fontWeight={700} color="primary">
            {job.title}
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
            <Chip 
              icon={<BusinessIcon />} 
              label={job.company} 
              size="small" 
              sx={{ mr: 1 }} 
            />
            {job.location && (
              <Chip 
                icon={<LocationOnIcon />} 
                label={job.location.city ? 
                  `${job.location.city}${job.location.state ? `, ${job.location.state}` : ''}` : 
                  job.location.remote ? 'Remote' : 'Location not specified'} 
                size="small"
                sx={{ mr: 1 }} 
              />
            )}
            {job.isAiGenerated && (
              <Chip 
                icon={<DiscoveredChipIcon />} 
                label="Discovered" 
                size="small"
                sx={{ 
                  mr: 1,
                  backgroundColor: '#00c4b4',
                  color: 'white',
                  '& .MuiChip-icon': {
                    color: 'white'
                  }
                }} 
              />
            )}
            {job.parsedData?.experienceLevel && (
              <Chip 
                icon={<TrendingUpIcon />} 
                label={job.parsedData.experienceLevel.charAt(0).toUpperCase() + job.parsedData.experienceLevel.slice(1)} 
                size="small"
                color="secondary"
                sx={{ mr: 1 }} 
              />
            )}
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          {job.sourceUrl && (
            <Button
              variant="outlined"
              startIcon={<OpenInNewIcon />}
              onClick={onOpenOriginal}
              sx={{ borderRadius: 2 }}
            >
              Open Original
            </Button>
          )}
          <Button
            variant="contained"
            color="secondary"
            startIcon={<SafeAutoJobLogo size="small" />}
            onClick={onTailorClick}
            sx={{ borderRadius: 2 }}
          >
            Get Tailored Resume
          </Button>
          <IconButton
            onClick={onMenuClick}
            size="large"
            sx={{ ml: 1, border: '1px solid', borderColor: 'divider', borderRadius: 2 }}
          >
            <MoreVertIcon />
          </IconButton>
        </Box>
      </Box>
    </Paper>
  );
};

export default JobHeader;

================
File: src/components/jobs/components/MatchAnalysisCard.js
================
// src/components/jobs/components/MatchAnalysisCard.js
import React from 'react';
import {
  Card,
  CardHeader,
  CardContent,
  Box,
  Typography,
  LinearProgress,
  Chip,
  useTheme
} from '@mui/material';
import {
  Speed as SpeedIcon,
  CheckCircle as CheckCircleIcon,
  Info as InfoIcon,
  Warning as WarningIcon,
  Error as ErrorIcon
} from '@mui/icons-material';
import { EnhancedCircularProgress } from './EnhancedCircularProgress';

const MatchAnalysisCard = ({ job }) => {
  const theme = useTheme();

  const getScoreColor = (score) => {
    if (score >= 85) return 'success';
    if (score >= 70) return 'info';
    if (score >= 55) return 'warning';
    return 'error';
  };

  const getScoreIcon = (score) => {
    if (score >= 85) return <CheckCircleIcon color="success" />;
    if (score >= 70) return <InfoIcon color="info" />;
    if (score >= 55) return <WarningIcon color="warning" />;
    return <ErrorIcon color="error" />;
  };

  if (!job.matchAnalysis?.overallScore) {
    return null;
  }

  return (
    <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
      <CardHeader 
        title="Match Analysis" 
        avatar={<SpeedIcon color="primary" />}
        sx={{ 
          pb: 1, 
          '& .MuiCardHeader-title': { fontWeight: 600 } 
        }}
      />
      <CardContent sx={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center' }}>
        <EnhancedCircularProgress 
          value={job.matchAnalysis.overallScore}
          size={120}
        />
        
        <Box sx={{ width: '100%', mt: 3 }}>
          {['skills', 'experience', 'education'].map((category) => {
            const score = job.matchAnalysis.categoryScores?.[category] || 0;
            return (
              <Box key={category} sx={{ mb: 2 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body1" sx={{ textTransform: 'capitalize' }}>
                    {category} Match
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    {getScoreIcon(score)}
                    <Typography variant="h6" fontWeight="medium" color={getScoreColor(score)}>
                      {score}%
                    </Typography>
                  </Box>
                </Box>
                <LinearProgress
                  variant="determinate"
                  value={score}
                  sx={{
                    height: 8,
                    borderRadius: 4,
                    bgcolor: 'rgba(0,0,0,0.1)',
                    '& .MuiLinearProgress-bar': {
                      borderRadius: 4,
                      bgcolor: theme.palette[getScoreColor(score)].main,
                    }
                  }}
                />
              </Box>
            );
          })}
        </Box>

        {job.matchAnalysis.matchedSkills && (
          <Box sx={{ width: '100%', mt: 2, p: 2, bgcolor: 'action.hover', borderRadius: 2 }}>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              <strong>Skills:</strong> {job.matchAnalysis.matchedSkills.filter(s => s.found).length} of {job.matchAnalysis.matchedSkills.length} matched
            </Typography>
            {job.matchAnalysis.experienceAnalysis && (
              <Typography variant="body2" color="text.secondary">
                <strong>Experience:</strong> {job.matchAnalysis.experienceAnalysis.relevantYearsExperience || 0} years relevant
              </Typography>
            )}
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default MatchAnalysisCard;

================
File: src/components/jobs/components/SkillChip.js
================
// src/components/jobs/components/SkillChip.js
import React from 'react';
import {
  Chip,
  Tooltip,
  Box,
  Typography,
  useTheme
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Info as InfoIcon
} from '@mui/icons-material';

const SkillChip = ({ skill, isMatched, importance, matchQuality }) => {
  const theme = useTheme();
  
  // Extract skill name safely from different skill object structures
  const getSkillName = (skillObj) => {
    if (!skillObj) return 'Unknown Skill';
    if (typeof skillObj === 'string') return skillObj;
    if (typeof skillObj === 'object') {
      return skillObj.name || skillObj.skill || (skillObj.toString && typeof skillObj.toString === 'function' ? skillObj.toString() : 'Unknown Skill');
    }
    return 'Unknown Skill';
  };

  const skillName = getSkillName(skill);
  
  const getImportanceColor = (imp) => {
    if (!imp && imp !== 0) return theme.palette.info.main;
    if (imp >= 8) return theme.palette.error.main;
    if (imp >= 6) return theme.palette.warning.main;
    return theme.palette.info.main;
  };

  const getMatchQualityIcon = (quality) => {
    if (!quality) return null;
    switch (quality) {
      case 'exact': return <CheckCircleIcon fontSize="small" />;
      case 'partial': return <WarningIcon fontSize="small" />;
      case 'related': return <InfoIcon fontSize="small" />;
      default: return null;
    }
  };

  return (
    <Tooltip 
      title={
        <Box>
          <Typography variant="body2" fontWeight="bold">{skillName}</Typography>
          {importance && <Typography variant="caption">Importance: {importance}/10</Typography>}
          {matchQuality && <Typography variant="caption" display="block">Match: {matchQuality}</Typography>}
        </Box>
      }
    >
      <Chip 
        label={skillName}
        icon={isMatched ? getMatchQualityIcon(matchQuality) : null}
        variant={isMatched ? 'filled' : 'outlined'}
        color={isMatched ? 'success' : 'default'}
        size="medium"
        sx={{ 
          bgcolor: isMatched ? `${theme.palette.success.main}30` : 'transparent',
          color: isMatched ? theme.palette.success.dark : theme.palette.text.primary,
          fontWeight: 500,
          borderRadius: 2,
          border: isMatched 
            ? `2px solid ${theme.palette.success.main}` 
            : `1px solid ${getImportanceColor(importance || 5)}40`,
          borderLeftWidth: 4,
          borderLeftColor: getImportanceColor(importance || 5),
          transition: 'all 0.2s ease',
          '&:hover': {
            transform: 'translateY(-1px)',
            boxShadow: 2,
            bgcolor: isMatched ? `${theme.palette.success.main}40` : `${getImportanceColor(importance || 5)}10`,
          }
        }}
      />
    </Tooltip>
  );
};

export default SkillChip;

================
File: src/components/jobs/FindJobsDialog.js
================
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Stepper,
  Step,
  StepLabel,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  CircularProgress,
  IconButton,
  Chip,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  StepConnector,
  stepConnectorClasses,
  styled
} from '@mui/material';
import {
  Close as CloseIcon,
  Description as DescriptionIcon,
  Search as SearchIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  TrendingUp as TrendingUpIcon,
  Work as WorkIcon,
  CalendarToday as CalendarIcon,
  Speed as SpeedIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import resumeService from '../../utils/resumeService';
import jobService from '../../utils/jobService';
import AutoJobLogo from '../common/AutoJobLogo';

// Custom styled components for better theming
const CustomStepConnector = styled(StepConnector)(({ theme }) => ({
  [`&.${stepConnectorClasses.alternativeLabel}`]: {
    top: 22,
  },
  [`&.${stepConnectorClasses.active}`]: {
    [`& .${stepConnectorClasses.line}`]: {
      backgroundColor: theme.palette.primary.main,
    },
  },
  [`&.${stepConnectorClasses.completed}`]: {
    [`& .${stepConnectorClasses.line}`]: {
      backgroundColor: theme.palette.success.main,
    },
  },
  [`& .${stepConnectorClasses.line}`]: {
    height: 3,
    border: 0,
    backgroundColor: theme.palette.divider,
    borderRadius: 1,
  },
}));

const FeatureBox = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2.5),
  backgroundColor: theme.palette.background.default,
  border: `1px solid ${theme.palette.divider}`,
  borderRadius: theme.spacing(1.5),
  transition: 'all 0.2s ease-in-out',
  '&:hover': {
    borderColor: theme.palette.primary.light,
    backgroundColor: theme.palette.background.paper,
  },
}));

const SuccessBox = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  backgroundColor: theme.palette.success.light,
  border: `1px solid ${theme.palette.success.main}`,
  borderRadius: theme.spacing(1.5),
  '& .MuiTypography-root': {
    color: theme.palette.success.contrastText,
  },
}));

const FindJobsDialog = ({ open, onClose }) => {
  const navigate = useNavigate();
  const [activeStep, setActiveStep] = useState(0);
  const [resumes, setResumes] = useState([]);
  const [selectedResumeId, setSelectedResumeId] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [searchStarted, setSearchStarted] = useState(false);
  const [resumesLoading, setResumesLoading] = useState(true);

  const steps = ['Select Resume', 'Confirm Search', 'Search Started'];

  useEffect(() => {
    if (open) {
      fetchResumes();
      // Reset state when dialog opens
      setActiveStep(0);
      setSelectedResumeId('');
      setError('');
      setSearchStarted(false);
    }
  }, [open]);

  const fetchResumes = async () => {
    try {
      setResumesLoading(true);
      setError('');
      const resumesData = await resumeService.getUserResumes();
      setResumes(resumesData || []);
      
      if (resumesData && resumesData.length === 1) {
        setSelectedResumeId(resumesData[0]._id);
      }
    } catch (err) {
      console.error('Error fetching resumes:', err);
      setError('Failed to load resumes. Please try again.');
    } finally {
      setResumesLoading(false);
    }
  };

  const handleNext = () => {
    if (activeStep === 0 && !selectedResumeId) {
      setError('Please select a resume to continue');
      return;
    }
    
    if (activeStep === 1) {
      handleStartSearch();
    } else {
      setActiveStep((prevStep) => prevStep + 1);
      setError('');
    }
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
    setError('');
  };

  const handleClose = () => {
    if (!searchStarted || activeStep === 2) {
      setActiveStep(0);
      setSelectedResumeId('');
      setError('');
      setSearchStarted(false);
      onClose();
    }
  };

  const handleStartSearch = async () => {
    try {
      setLoading(true);
      setError('');
      setSearchStarted(true);

      const response = await jobService.findJobsWithAi(selectedResumeId);
      
      // The backend returns a 202 status with a message
      // This is actually a success response, not an error
      console.log('AI Search Response:', response);
      
      // Move to success step
      setActiveStep(2);
    } catch (err) {
      console.error('Error starting AI job search:', err);
      
      // Check if this is actually a success response (202 status)
      if (err.response && err.response.status === 202) {
        // This is actually success - the backend returns 202 for async operations
        setActiveStep(2);
      } else {
        // This is a real error
        setError(err.response?.data?.message || err.message || 'Failed to start job search. Please try again.');
        setSearchStarted(false);
      }
    } finally {
      setLoading(false);
    }
  };

  const getSelectedResume = () => {
    return resumes.find(r => r._id === selectedResumeId);
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0:
        return (
          <Box sx={{ mt: 2 }}>
            <Typography variant="body1" paragraph color="text.secondary">
              Select a resume to use for AI job discovery. AJ will analyze your resume and search for relevant job opportunities for you.
            </Typography>
            
            {resumesLoading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                <CircularProgress size={40} thickness={4} />
              </Box>
            ) : resumes.length === 0 ? (
              <Alert 
                severity="warning" 
                sx={{ 
                  mt: 2,
                  borderRadius: 2,
                  '& .MuiAlert-icon': {
                    fontSize: '1.5rem'
                  }
                }}
              >
                <Typography variant="body2" fontWeight={500} gutterBottom>
                  You don't have any resumes uploaded yet.
                </Typography>
                <Typography variant="body2">
                  Please upload a resume first before using the AI job search feature.
                </Typography>
              </Alert>
            ) : (
              <>
                <FormControl fullWidth sx={{ mt: 3 }}>
                  <InputLabel id="resume-select-label">Select Resume</InputLabel>
                  <Select
                    labelId="resume-select-label"
                    value={selectedResumeId}
                    onChange={(e) => setSelectedResumeId(e.target.value)}
                    label="Select Resume"
                    sx={{
                      borderRadius: 2,
                      '& .MuiSelect-select': {
                        py: 1.5,
                      }
                    }}
                  >
                    {resumes.map((resume) => (
                      <MenuItem key={resume._id} value={resume._id}>
                        <Box sx={{ width: '100%' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                            <Typography variant="body1" fontWeight={500}>{resume.name}</Typography>
                            {resume.isTailored && (
                              <Chip 
                                label="AI Tailored" 
                                size="small" 
                                color="secondary"
                                sx={{ ml: 1, borderRadius: 1 }}
                              />
                            )}
                          </Box>
                          <Typography variant="caption" color="text.secondary">
                            Updated: {new Date(resume.updatedAt || resume.createdAt).toLocaleDateString()}
                            {resume.analysis?.overallScore && ` • Score: ${resume.analysis.overallScore}/100`}
                          </Typography>
                        </Box>
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                {selectedResumeId && getSelectedResume() && (
                  <FeatureBox sx={{ mt: 3 }}>
                    <Typography variant="subtitle2" fontWeight={600} gutterBottom color="primary">
                      Selected Resume Details
                    </Typography>
                    {(() => {
                      const selected = getSelectedResume();
                      return (
                        <List dense disablePadding>
                          <ListItem disableGutters>
                            <ListItemIcon sx={{ minWidth: 36 }}>
                              <DescriptionIcon fontSize="small" color="primary" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={selected.name}
                              secondary={`File type: ${selected.fileType}`}
                              primaryTypographyProps={{ fontWeight: 500 }}
                            />
                          </ListItem>
                          {selected.parsedData?.experience?.[0] && (
                            <ListItem disableGutters>
                              <ListItemIcon sx={{ minWidth: 36 }}>
                                <WorkIcon fontSize="small" color="info" />
                              </ListItemIcon>
                              <ListItemText 
                                primary="Current/Recent Role"
                                secondary={`${selected.parsedData.experience[0].title} at ${selected.parsedData.experience[0].company}`}
                                primaryTypographyProps={{ fontWeight: 500 }}
                              />
                            </ListItem>
                          )}
                        </List>
                      );
                    })()}
                  </FeatureBox>
                )}
              </>
            )}
          </Box>
        );

      case 1:
        const selectedResume = getSelectedResume();
        return (
          <Box sx={{ mt: 2 }}>
            <Box sx={{ textAlign: 'center', mb: 3 }}>
              <AutoJobLogo 
                variant="icon-only" 
                size="large" 
                color="primary"
                sx={{ mb: 2 }}
              />
              <Typography variant="h6" gutterBottom fontWeight={600} color="text.primary">
                Ready to Let AJ our AI Agent Do Your Job Search?
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Our trained AI Agent will search for real job openings that match your profile
              </Typography>
            </Box>

            <Alert 
              severity="info" 
              icon={<InfoIcon />} 
              sx={{ 
                mb: 3,
                borderRadius: 2,
                backgroundColor: 'info.light',
                border: '1px solid',
                borderColor: 'info.main',
                '& .MuiAlert-icon': {
                  fontSize: '1.5rem'
                }
              }}
            >
              <Typography variant="body2" fontWeight={600} gutterBottom>
                Daily Job Limit: Up to 10 Jobs
              </Typography>
              <Typography variant="body2">
                AJ will find and add up to 10 relevant job openings per day to your job list. 
                The search will continue running daily until you pause or cancel it.
              </Typography>
            </Alert>

            <FeatureBox sx={{ mb: 3 }}>
              <Typography variant="subtitle2" fontWeight={600} gutterBottom color="primary">
                How it works:
              </Typography>
              <List dense>
                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <SearchIcon fontSize="small" color="success" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Real Job Search"
                    secondary="Our AI Agent acts like a human and searches for real openings"
                    primaryTypographyProps={{ fontWeight: 500 }}
                  />
                </ListItem>
                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <CalendarIcon fontSize="small" color="info" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Daily Updates"
                    secondary="Finds up to 10 new jobs per day matching your profile"
                    primaryTypographyProps={{ fontWeight: 500 }}
                  />
                </ListItem>
                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <SpeedIcon fontSize="small" color="warning" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Automatic Process"
                    secondary="Runs in the background - you can close this and check back later"
                    primaryTypographyProps={{ fontWeight: 500 }}
                  />
                </ListItem>
                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <CheckCircleIcon fontSize="small" color="success" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Quality Matches"
                    secondary="Only adds jobs that closely match your skills and experience"
                    primaryTypographyProps={{ fontWeight: 500 }}
                  />
                </ListItem>
              </List>
            </FeatureBox>

            <Alert 
              severity="warning" 
              icon={<WarningIcon />}
              sx={{
                borderRadius: 2,
                backgroundColor: 'warning.light',
                border: '1px solid',
                borderColor: 'warning.main',
                '& .MuiAlert-icon': {
                  fontSize: '1.5rem'
                }
              }}
            >
              <Typography variant="body2">
                <strong>Note:</strong> If no matching jobs are found, the search will notify you and provide suggestions for improving your search criteria.
              </Typography>
            </Alert>

            {loading && (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
                <CircularProgress size={40} thickness={4} />
              </Box>
            )}
          </Box>
        );

      case 2:
        return (
          <Box sx={{ mt: 2, textAlign: 'center' }}>
            <CheckCircleIcon sx={{ fontSize: 80, color: 'success.main', mb: 2 }} />
            <Typography variant="h6" gutterBottom fontWeight={600}>
              AI Job Search Started!
            </Typography>
            <Typography variant="body1" paragraph color="text.secondary">
              Your AI job search is now running in the background.
            </Typography>
            
            <SuccessBox sx={{ mb: 3 }}>
              <Typography variant="body1" fontWeight={600} gutterBottom sx={{ color: 'success.dark !important' }}>
                What happens next:
              </Typography>
              <List dense>
                <ListItem sx={{ px: 0 }}>
                  <ListItemText 
                    primary="• Up to 10 relevant jobs will be added daily"
                    primaryTypographyProps={{ 
                      variant: 'body2',
                      sx: { color: 'success.dark' }
                    }}
                  />
                </ListItem>
                <ListItem sx={{ px: 0 }}>
                  <ListItemText 
                    primary="• Jobs will appear in your job list marked with 'AI Found'"
                    primaryTypographyProps={{ 
                      variant: 'body2',
                      sx: { color: 'success.dark' }
                    }}
                  />
                </ListItem>
                <ListItem sx={{ px: 0 }}>
                  <ListItemText 
                    primary="• You'll receive notifications for new matches"
                    primaryTypographyProps={{ 
                      variant: 'body2',
                      sx: { color: 'success.dark' }
                    }}
                  />
                </ListItem>
              </List>
            </SuccessBox>
            
            <Button
              variant="contained"
              color="primary"
              onClick={() => {
                handleClose();
                navigate('/jobs/ai-searches');
              }}
              sx={{ 
                mb: 2,
                px: 4,
                py: 1.5,
                borderRadius: 2,
                fontWeight: 600,
                textTransform: 'none'
              }}
            >
              View AI Searches
            </Button>
            
            <Typography variant="body2" color="text.secondary">
              You can manage your AI job searches from the AI Discovery page
            </Typography>
          </Box>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={handleClose}
      maxWidth="sm"
      fullWidth
      disableEscapeKeyDown={searchStarted && activeStep !== 2}
      PaperProps={{
        sx: {
          borderRadius: 3,
          boxShadow: '0px 8px 32px rgba(0, 0, 0, 0.12)',
        }
      }}
    >
      <DialogTitle>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <AutoJobLogo 
              variant="icon-only" 
              size="small" 
              color="primary"
              sx={{ mr: 1.5 }}
            />
            <Typography variant="h6" fontWeight={600}>Find Jobs with AJ</Typography>
          </Box>
          <IconButton 
            onClick={handleClose} 
            size="small"
            disabled={searchStarted && activeStep !== 2}
            sx={{
              '&:hover': {
                backgroundColor: 'action.hover',
              }
            }}
          >
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>
      
      <DialogContent sx={{ px: 3 }}>
        <Stepper 
          activeStep={activeStep} 
          connector={<CustomStepConnector />}
          sx={{ 
            mb: 3,
            '& .MuiStepLabel-label': {
              fontWeight: 500,
              fontSize: '0.875rem'
            },
            '& .MuiStepLabel-label.Mui-active': {
              fontWeight: 600,
              color: 'primary.main'
            },
            '& .MuiStepLabel-label.Mui-completed': {
              color: 'success.main'
            }
          }}
        >
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
        
        {error && (
          <Alert 
            severity="error" 
            sx={{ 
              mb: 2,
              borderRadius: 2,
              '& .MuiAlert-icon': {
                fontSize: '1.5rem'
              }
            }} 
            onClose={() => setError('')}
          >
            {error}
          </Alert>
        )}
        
        {renderStepContent()}
      </DialogContent>
      
      <DialogActions sx={{ px: 3, pb: 3, gap: 1 }}>
        {activeStep === 0 && (
          <>
            <Button 
              onClick={handleClose}
              sx={{ 
                borderRadius: 2,
                textTransform: 'none',
                fontWeight: 500
              }}
            >
              Cancel
            </Button>
            <Button 
              variant="contained" 
              onClick={handleNext}
              disabled={!selectedResumeId || resumesLoading}
              sx={{ 
                borderRadius: 2,
                textTransform: 'none',
                fontWeight: 600,
                px: 3
              }}
            >
              Next
            </Button>
          </>
        )}
        
        {activeStep === 1 && (
          <>
            <Button 
              onClick={handleBack} 
              disabled={loading}
              sx={{ 
                borderRadius: 2,
                textTransform: 'none',
                fontWeight: 500
              }}
            >
              Back
            </Button>
            <Button 
              variant="contained" 
              onClick={handleNext}
              disabled={loading}
              startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <SearchIcon />}
              sx={{ 
                borderRadius: 2,
                textTransform: 'none',
                fontWeight: 600,
                px: 3
              }}
            >
              {loading ? 'Starting...' : 'Start AI Search'}
            </Button>
          </>
        )}
        
        {activeStep === 2 && (
          <Button 
            variant="contained" 
            onClick={handleClose}
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              fontWeight: 600,
              px: 4
            }}
          >
            Done
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default FindJobsDialog;

================
File: src/components/jobs/hooks/useAiSearches.js
================
// src/components/jobs/hooks/useAiSearches.js
import { useState, useEffect } from 'react';
import jobService from '../../../utils/jobService';

export const useAiSearches = () => {
  const [searches, setSearches] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [actionLoading, setActionLoading] = useState({});

  const fetchSearches = async () => {
    try {
      const data = await jobService.getAiSearches();
      // Filter out cancelled searches from the UI
      const activeSearches = data.filter(search => search.status !== 'cancelled');
      setSearches(activeSearches);
      setError('');
    } catch (err) {
      console.error('Error fetching AI searches:', err);
      setError('Failed to load AI searches');
    } finally {
      setLoading(false);
    }
  };

  const handlePauseResume = async (searchId, currentStatus) => {
    setActionLoading(prev => ({ ...prev, [searchId]: true }));
    try {
      if (currentStatus === 'running') {
        await jobService.pauseAiSearch(searchId);
        return { success: true, message: 'Search paused successfully' };
      } else if (currentStatus === 'paused') {
        await jobService.resumeAiSearch(searchId);
        return { success: true, message: 'Search resumed successfully' };
      }
      await fetchSearches();
    } catch (err) {
      console.error('Error updating search:', err);
      setError('Failed to update search status');
      return { success: false, message: 'Failed to update search status' };
    } finally {
      setActionLoading(prev => ({ ...prev, [searchId]: false }));
    }
  };

  const handleDelete = async (searchId) => {
    setActionLoading(prev => ({ ...prev, [searchId]: true }));
    try {
      await jobService.deleteAiSearch(searchId);
      await fetchSearches();
      return { success: true, message: 'Search cancelled successfully' };
    } catch (err) {
      console.error('Error deleting search:', err);
      setError('Failed to delete search');
      return { success: false, message: 'Failed to cancel search' };
    } finally {
      setActionLoading(prev => ({ ...prev, [searchId]: false }));
    }
  };

  useEffect(() => {
    fetchSearches();
    // Refresh every 30 seconds to show updates
    const interval = setInterval(fetchSearches, 30000);
    return () => clearInterval(interval);
  }, []);

  return {
    searches,
    loading,
    error,
    actionLoading,
    setError,
    fetchSearches,
    handlePauseResume,
    handleDelete
  };
};

================
File: src/components/jobs/hooks/useJobAnalysis.js
================
// src/components/jobs/hooks/useJobAnalysis.js
import { useState, useEffect, useCallback } from 'react';
import jobService from '../../../utils/jobService';

/**
 * Custom hook for managing job analysis status and polling
 * @param {string} jobId - The ID of the job to monitor
 * @param {Object} options - Configuration options
 * @returns {Object} Analysis status and control functions
 */
export const useJobAnalysis = (jobId, options = {}) => {
  const {
    autoStart = true,
    pollInterval = 2000,
    maxAttempts = 30,
    onComplete = null,
    onError = null,
    onProgress = null
  } = options;

  const [analysisStatus, setAnalysisStatus] = useState(null);
  const [isPolling, setIsPolling] = useState(false);
  const [error, setError] = useState(null);
  const [attempts, setAttempts] = useState(0);

  // Check if analysis is complete
  const isComplete = analysisStatus?.status === 'completed' || analysisStatus?.status === 'error';
  const canViewJob = analysisStatus?.canViewJob === true;

  // Fetch current status
  const fetchStatus = useCallback(async () => {
    if (!jobId) return null;

    try {
      const response = await jobService.getJobAnalysisStatus(jobId);
      const status = response.analysisStatus;
      
      setAnalysisStatus(status);
      setError(null);
      
      // Call progress callback
      if (onProgress && typeof onProgress === 'function') {
        onProgress(status);
      }
      
      return status;
    } catch (err) {
      console.error('Error fetching job analysis status:', err);
      setError(err.message || 'Failed to fetch analysis status');
      
      if (onError && typeof onError === 'function') {
        onError(err);
      }
      
      return null;
    }
  }, [jobId, onProgress, onError]);

  // Start polling for status updates
  const startPolling = useCallback(async () => {
    if (!jobId || isPolling) return;

    setIsPolling(true);
    setAttempts(0);
    setError(null);

    let currentAttempts = 0;
    let pollTimeoutId;

    const poll = async () => {
      try {
        currentAttempts++;
        setAttempts(currentAttempts);

        const status = await fetchStatus();
        
        if (!status) {
          throw new Error('Failed to fetch status');
        }

        // Check if analysis is complete
        if (status.status === 'completed' || status.status === 'error') {
          setIsPolling(false);
          
          if (onComplete && typeof onComplete === 'function') {
            onComplete(status);
          }
          
          return;
        }

        // Check if we've reached max attempts
        if (currentAttempts >= maxAttempts) {
          setIsPolling(false);
          const timeoutError = new Error('Analysis polling timed out');
          setError(timeoutError.message);
          
          if (onError && typeof onError === 'function') {
            onError(timeoutError);
          }
          
          return;
        }

        // Schedule next poll
        pollTimeoutId = setTimeout(poll, pollInterval);
        
      } catch (err) {
        console.error('Error during polling:', err);
        setIsPolling(false);
        setError(err.message || 'Polling failed');
        
        if (onError && typeof onError === 'function') {
          onError(err);
        }
      }
    };

    // Start polling
    await poll();

    // Return cleanup function
    return () => {
      if (pollTimeoutId) {
        clearTimeout(pollTimeoutId);
      }
      setIsPolling(false);
    };
  }, [jobId, isPolling, fetchStatus, pollInterval, maxAttempts, onComplete, onError]);

  // Stop polling
  const stopPolling = useCallback(() => {
    setIsPolling(false);
  }, []);

  // Reset analysis status
  const reset = useCallback(() => {
    setAnalysisStatus(null);
    setError(null);
    setAttempts(0);
    setIsPolling(false);
  }, []);

  // Auto-start polling if job needs analysis
  useEffect(() => {
    if (!autoStart || !jobId) return;

    const initializeAnalysis = async () => {
      const status = await fetchStatus();
      
      // Start polling if analysis is in progress
      if (status && (status.status === 'pending' || status.status === 'analyzing')) {
        startPolling();
      }
    };

    initializeAnalysis();
  }, [jobId, autoStart, fetchStatus, startPolling]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      setIsPolling(false);
    };
  }, []);

  return {
    // Status data
    analysisStatus,
    isPolling,
    error,
    attempts,
    
    // Computed states
    isComplete,
    canViewJob,
    isPending: analysisStatus?.status === 'pending',
    isAnalyzing: analysisStatus?.status === 'analyzing',
    hasError: analysisStatus?.status === 'error',
    progress: analysisStatus?.progress || 0,
    message: analysisStatus?.message || '',
    skillsFound: analysisStatus?.skillsFound || 0,
    experienceLevel: analysisStatus?.experienceLevel,
    
    // Control functions
    startPolling,
    stopPolling,
    fetchStatus,
    reset
  };
};

/**
 * Hook for managing multiple job analysis statuses
 * @param {Array} jobIds - Array of job IDs to monitor
 * @param {Object} options - Configuration options
 * @returns {Object} Analysis statuses and control functions
 */
export const useMultipleJobAnalysis = (jobIds = [], options = {}) => {
  const [statuses, setStatuses] = useState({});
  const [pollingJobs, setPollingJobs] = useState(new Set());

  const updateJobStatus = useCallback((jobId, status) => {
    setStatuses(prev => ({
      ...prev,
      [jobId]: status
    }));
  }, []);

  const startPollingJob = useCallback(async (jobId) => {
    if (pollingJobs.has(jobId)) return;

    setPollingJobs(prev => new Set([...prev, jobId]));

    try {
      await jobService.pollJobAnalysisStatus(
        jobId,
        (status) => updateJobStatus(jobId, status),
        options.maxAttempts || 30
      );
    } catch (error) {
      console.error(`Polling failed for job ${jobId}:`, error);
      updateJobStatus(jobId, {
        status: 'error',
        message: 'Polling failed',
        progress: 0
      });
    } finally {
      setPollingJobs(prev => {
        const newSet = new Set(prev);
        newSet.delete(jobId);
        return newSet;
      });
    }
  }, [pollingJobs, updateJobStatus, options.maxAttempts]);

  // Initialize polling for jobs that need it
  useEffect(() => {
    jobIds.forEach(async (jobId) => {
      if (!statuses[jobId] && !pollingJobs.has(jobId)) {
        try {
          const response = await jobService.getJobAnalysisStatus(jobId);
          const status = response.analysisStatus;
          
          updateJobStatus(jobId, status);
          
          // Start polling if needed
          if (status.status === 'pending' || status.status === 'analyzing') {
            startPollingJob(jobId);
          }
        } catch (error) {
          console.error(`Error fetching status for job ${jobId}:`, error);
        }
      }
    });
  }, [jobIds, statuses, pollingJobs, updateJobStatus, startPollingJob]);

  const getJobStatus = useCallback((jobId) => {
    return statuses[jobId] || null;
  }, [statuses]);

  const isJobPolling = useCallback((jobId) => {
    return pollingJobs.has(jobId);
  }, [pollingJobs]);

  const getAnalyzingCount = useCallback(() => {
    return Object.values(statuses).filter(status => 
      status.status === 'pending' || status.status === 'analyzing'
    ).length;
  }, [statuses]);

  const getCompletedCount = useCallback(() => {
    return Object.values(statuses).filter(status => 
      status.status === 'completed'
    ).length;
  }, [statuses]);

  const getErrorCount = useCallback(() => {
    return Object.values(statuses).filter(status => 
      status.status === 'error'
    ).length;
  }, [statuses]);

  return {
    statuses,
    pollingJobs,
    getJobStatus,
    isJobPolling,
    getAnalyzingCount,
    getCompletedCount,
    getErrorCount,
    updateJobStatus,
    startPollingJob
  };
};

export default useJobAnalysis;

================
File: src/components/jobs/JobCreateDialog.js
================
// src/components/jobs/JobCreateDialog.js
import React, { useState } from 'react';
import { 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions, 
  Button, 
  TextField, 
  Grid, 
  Box, 
  FormControl, 
  InputLabel, 
  Select, 
  MenuItem, 
  Switch, 
  FormControlLabel, 
  Typography, 
  Divider, 
  Alert,
  CircularProgress,
  Paper,
  InputAdornment,
  useTheme
} from '@mui/material';
import { 
  Add as AddIcon,
  Close as CloseIcon,
  Work as WorkIcon,
  Business as BusinessIcon,
  Link as LinkIcon,
  LocationOn as LocationOnIcon,
  Public as PublicIcon,
  Schedule as ScheduleIcon,
  AttachMoney as AttachMoneyIcon,
  Description as DescriptionIcon,
  Home as HomeIcon
} from '@mui/icons-material';
import jobService from '../../utils/jobService';

const JobCreateDialog = ({ open, onClose, onJobCreated }) => {
  const theme = useTheme();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const [jobData, setJobData] = useState({
    title: '',
    company: '',
    location: {
      city: '',
      state: '',
      country: 'US',
      remote: false
    },
    description: '',
    sourceUrl: '',
    salary: {
      min: '',
      max: '',
      currency: 'USD'
    },
    jobType: 'FULL_TIME'
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // Handle nested properties
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setJobData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setJobData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSwitchChange = (e) => {
    const { name, checked } = e.target;
    
    if (name === 'location.remote') {
      setJobData(prev => ({
        ...prev,
        location: {
          ...prev.location,
          remote: checked
        }
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    if (!jobData.title || !jobData.company || !jobData.description) {
      setError('Job title, company, and description are required');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      // Clean up salary data
      const formattedJobData = {
        ...jobData,
        salary: {
          ...jobData.salary,
          min: jobData.salary.min ? Number(jobData.salary.min) : undefined,
          max: jobData.salary.max ? Number(jobData.salary.max) : undefined
        }
      };
      
      await jobService.createJob(formattedJobData);
      
      // Clear form and close dialog
      setJobData({
        title: '',
        company: '',
        location: {
          city: '',
          state: '',
          country: 'US',
          remote: false
        },
        description: '',
        sourceUrl: '',
        salary: {
          min: '',
          max: '',
          currency: 'USD'
        },
        jobType: 'FULL_TIME'
      });
      
      onJobCreated();
    } catch (err) {
      console.error('Error creating job:', err);
      setError(err.response?.data?.message || 'Failed to create job. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    // Clear form
    setJobData({
      title: '',
      company: '',
      location: {
        city: '',
        state: '',
        country: 'US',
        remote: false
      },
      description: '',
      sourceUrl: '',
      salary: {
        min: '',
        max: '',
        currency: 'USD'
      },
      jobType: 'FULL_TIME'
    });
    setError('');
    onClose();
  };

  return (
    <Dialog 
      open={open} 
      onClose={loading ? null : handleCancel}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: { 
          borderRadius: 3,
          // Custom scrollbar styling specifically for this dialog
          '& .MuiDialogContent-root': {
            // Override scrollbar for dialog content
            '&::-webkit-scrollbar': {
              width: '4px',
            },
            '&::-webkit-scrollbar-track': {
              backgroundColor: 'transparent',
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: 'rgba(0, 0, 0, 0.2)',
              borderRadius: '2px',
              '&:hover': {
                backgroundColor: 'rgba(0, 0, 0, 0.3)',
              },
              '&:active': {
                backgroundColor: 'rgba(0, 0, 0, 0.4)',
              },
            },
            '&::-webkit-scrollbar-corner': {
              backgroundColor: 'transparent',
            },
            // Firefox scrollbar styling
            scrollbarWidth: 'thin',
            scrollbarColor: 'rgba(0, 0, 0, 0.2) transparent',
          }
        }
      }}
    >
      <DialogTitle sx={{ 
        background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
        color: 'white',
        py: 2
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
            <WorkIcon sx={{ fontSize: 28 }} />
            <Typography variant="h6" fontWeight={600}>Add New Job</Typography>
          </Box>
          <Button 
            color="inherit" 
            onClick={handleCancel}
            disabled={loading}
            sx={{ 
              minWidth: 'auto', 
              p: 1,
              borderRadius: 2,
              '&:hover': {
                bgcolor: 'rgba(255,255,255,0.1)'
              }
            }}
          >
            <CloseIcon />
          </Button>
        </Box>
      </DialogTitle>
      
      <form onSubmit={handleSubmit}>
        <DialogContent sx={{ 
          p: 3,
          // Enhanced scrollbar styling for the content area
          maxHeight: '70vh',
          overflowY: 'auto',
          // Custom scrollbar that matches your theme
          '&::-webkit-scrollbar': {
            width: '4px',
          },
          '&::-webkit-scrollbar-track': {
            backgroundColor: 'transparent',
          },
          '&::-webkit-scrollbar-thumb': {
            backgroundColor: 'rgba(0, 0, 0, 0.2)',
            borderRadius: '2px',
            '&:hover': {
              backgroundColor: 'rgba(0, 0, 0, 0.3)',
            },
            '&:active': {
              backgroundColor: 'rgba(0, 0, 0, 0.4)',
            },
          },
          '&::-webkit-scrollbar-corner': {
            backgroundColor: 'transparent',
          },
          // Firefox scrollbar styling
          scrollbarWidth: 'thin',
          scrollbarColor: 'rgba(0, 0, 0, 0.2) transparent',
        }}>
          {error && (
            <Alert 
              severity="error" 
              sx={{ 
                mb: 3, 
                borderRadius: 2,
                '& .MuiAlert-icon': {
                  fontSize: '1.2rem'
                }
              }}
            >
              {error}
            </Alert>
          )}
          
          {/* Basic Job Information Section */}
          <Paper elevation={1} sx={{ p: 2.5, mb: 3, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
              <WorkIcon color="primary" />
              <Typography variant="subtitle1" fontWeight={600} color="primary">
                Basic Job Information
              </Typography>
            </Box>
            
            <Grid container spacing={2.5}>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Job Title"
                  name="title"
                  value={jobData.title}
                  onChange={handleChange}
                  fullWidth
                  required
                  disabled={loading}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <WorkIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Company"
                  name="company"
                  value={jobData.company}
                  onChange={handleChange}
                  fullWidth
                  required
                  disabled={loading}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <BusinessIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  label="Job URL (Original Listing)"
                  name="sourceUrl"
                  value={jobData.sourceUrl}
                  onChange={handleChange}
                  fullWidth
                  placeholder="https://example.com/job-listing"
                  disabled={loading}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <LinkIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
            </Grid>
          </Paper>
          
          {/* Location Section */}
          <Paper elevation={1} sx={{ p: 2.5, mb: 3, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
              <LocationOnIcon color="secondary" />
              <Typography variant="subtitle1" fontWeight={600} color="secondary">
                Location
              </Typography>
            </Box>
            
            <Grid container spacing={2.5}>
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Switch 
                      checked={jobData.location.remote} 
                      onChange={handleSwitchChange}
                      name="location.remote"
                      disabled={loading}
                      color="secondary"
                    />
                  }
                  label={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <HomeIcon fontSize="small" color="secondary" />
                      <Typography variant="body2" fontWeight={500}>Remote Position</Typography>
                    </Box>
                  }
                />
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <TextField
                  label="City"
                  name="location.city"
                  value={jobData.location.city}
                  onChange={handleChange}
                  fullWidth
                  disabled={loading || jobData.location.remote}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <LocationOnIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <TextField
                  label="State/Province"
                  name="location.state"
                  value={jobData.location.state}
                  onChange={handleChange}
                  fullWidth
                  disabled={loading || jobData.location.remote}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <FormControl fullWidth disabled={loading || jobData.location.remote}>
                  <InputLabel>Country</InputLabel>
                  <Select
                    name="location.country"
                    value={jobData.location.country}
                    onChange={handleChange}
                    label="Country"
                    startAdornment={
                      <InputAdornment position="start">
                        <PublicIcon color="action" fontSize="small" />
                      </InputAdornment>
                    }
                    sx={{ borderRadius: 2 }}
                  >
                    <MenuItem value="US">🇺🇸 United States</MenuItem>
                    <MenuItem value="CA">🇨🇦 Canada</MenuItem>
                    <MenuItem value="UK">🇬🇧 United Kingdom</MenuItem>
                    <MenuItem value="AU">🇦🇺 Australia</MenuItem>
                    <MenuItem value="IN">🇮🇳 India</MenuItem>
                    <MenuItem value="DE">🇩🇪 Germany</MenuItem>
                    <MenuItem value="FR">🇫🇷 France</MenuItem>
                    <MenuItem value="OTHER">🌍 Other</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Paper>
          
          {/* Job Details Section */}
          <Paper elevation={1} sx={{ p: 2.5, mb: 3, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
              <ScheduleIcon color="success" />
              <Typography variant="subtitle1" fontWeight={600} color="success.main">
                Job Details
              </Typography>
            </Box>
            
            <Grid container spacing={2.5}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth disabled={loading}>
                  <InputLabel>Job Type</InputLabel>
                  <Select
                    name="jobType"
                    value={jobData.jobType}
                    onChange={handleChange}
                    label="Job Type"
                    startAdornment={
                      <InputAdornment position="start">
                        <ScheduleIcon color="action" fontSize="small" />
                      </InputAdornment>
                    }
                    sx={{ borderRadius: 2 }}
                  >
                    <MenuItem value="FULL_TIME">💼 Full-time</MenuItem>
                    <MenuItem value="PART_TIME">⏰ Part-time</MenuItem>
                    <MenuItem value="CONTRACT">📋 Contract</MenuItem>
                    <MenuItem value="FREELANCE">🎯 Freelance</MenuItem>
                    <MenuItem value="INTERNSHIP">🎓 Internship</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth disabled={loading}>
                  <InputLabel>Currency</InputLabel>
                  <Select
                    name="salary.currency"
                    value={jobData.salary.currency}
                    onChange={handleChange}
                    label="Currency"
                    startAdornment={
                      <InputAdornment position="start">
                        <AttachMoneyIcon color="action" fontSize="small" />
                      </InputAdornment>
                    }
                    sx={{ borderRadius: 2 }}
                  >
                    <MenuItem value="USD">💵 USD ($)</MenuItem>
                    <MenuItem value="EUR">💶 EUR (€)</MenuItem>
                    <MenuItem value="GBP">💷 GBP (£)</MenuItem>
                    <MenuItem value="CAD">🍁 CAD (C$)</MenuItem>
                    <MenuItem value="AUD">🦘 AUD (A$)</MenuItem>
                    <MenuItem value="INR">🇮🇳 INR (₹)</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Minimum Salary"
                  name="salary.min"
                  value={jobData.salary.min}
                  onChange={handleChange}
                  fullWidth
                  type="number"
                  InputProps={{ 
                    inputProps: { min: 0 },
                    startAdornment: (
                      <InputAdornment position="start">
                        <AttachMoneyIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  disabled={loading}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Maximum Salary"
                  name="salary.max"
                  value={jobData.salary.max}
                  onChange={handleChange}
                  fullWidth
                  type="number"
                  InputProps={{ 
                    inputProps: { min: 0 },
                    startAdornment: (
                      <InputAdornment position="start">
                        <AttachMoneyIcon color="action" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  disabled={loading}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              </Grid>
            </Grid>
          </Paper>

          {/* Job Description Section */}
          <Paper elevation={1} sx={{ p: 2.5, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
              <DescriptionIcon color="warning" />
              <Typography variant="subtitle1" fontWeight={600} color="warning.main">
                Job Description
              </Typography>
            </Box>
            
            <TextField
              label="Job Description"
              name="description"
              value={jobData.description}
              onChange={handleChange}
              fullWidth
              required
              multiline
              rows={8}
              placeholder="Paste the full job description here..."
              disabled={loading}
              sx={{ 
                '& .MuiOutlinedInput-root': { 
                  borderRadius: 2,
                  '& textarea': {
                    fontSize: '0.9rem',
                    lineHeight: 1.5,
                    // Custom scrollbar for textarea
                    '&::-webkit-scrollbar': {
                      width: '4px',
                    },
                    '&::-webkit-scrollbar-track': {
                      backgroundColor: 'transparent',
                    },
                    '&::-webkit-scrollbar-thumb': {
                      backgroundColor: 'rgba(0, 0, 0, 0.2)',
                      borderRadius: '2px',
                      '&:hover': {
                        backgroundColor: 'rgba(0, 0, 0, 0.3)',
                      },
                    },
                    '&::-webkit-scrollbar-corner': {
                      backgroundColor: 'transparent',
                    },
                  }
                } 
              }}
            />
          </Paper>
        </DialogContent>
        
        <DialogActions sx={{ 
          px: 3, 
          py: 2, 
          borderTop: `1px solid ${theme.palette.divider}`,
          bgcolor: 'rgba(0,0,0,0.02)'
        }}>
          <Button 
            onClick={handleCancel} 
            disabled={loading}
            variant="outlined"
            sx={{ 
              borderRadius: 2,
              px: 3
            }}
          >
            Cancel
          </Button>
          <Button 
            type="submit" 
            variant="contained" 
            color="primary" 
            disabled={loading}
            startIcon={loading ? <CircularProgress size={18} color="inherit" /> : <AddIcon />}
            sx={{ 
              borderRadius: 2,
              px: 3,
              py: 1
            }}
          >
            {loading ? 'Creating...' : 'Create Job'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default JobCreateDialog;

================
File: src/components/jobs/JobDetail.js
================
// src/components/jobs/JobDetail.js - Final refactored version with improved dialog
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Button,
  Tabs,
  Tab,
  CircularProgress,
  Alert,
  Snackbar,
  Menu,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  useTheme,
  Tooltip,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Card,
  CardContent,
  Divider,
  IconButton,
  Stack,
  Fade,
  alpha
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  SmartToy as SmartToyIcon,
  Description as DescriptionIcon,
  Lightbulb as LightbulbIcon,
  CheckCircle as CheckCircleIcon,
  AutoFixHigh as AutoFixHighIcon,
  Psychology as PsychologyIcon,
  TrendingUp as TrendingUpIcon,
  Speed as SpeedIcon,
  Insights as InsightsIcon,
  Close as CloseIcon,
  Stars as StarsIcon,
  Rocket as RocketIcon
} from '@mui/icons-material';

// Import our component files
import JobHeader from './components/JobHeader';
import OverviewTab from './tabs/OverviewTab';
import AnalysisTab from './tabs/AnalysisTab';
import ContentTab from './tabs/ContentTab';
import AutoJobLogo from '../common/AutoJobLogo';

import jobService from '../../utils/jobService';
import resumeService from '../../utils/resumeService';
import MainLayout from '../layout/MainLayout';

// Tab panel component
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`job-tabpanel-${index}`}
      aria-labelledby={`job-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

const JobDetail = () => {
  const theme = useTheme();
  const { id } = useParams();
  const navigate = useNavigate();
  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [tabValue, setTabValue] = useState(0);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'success' });
  const [allResumes, setAllResumes] = useState([]);
  const [resumeMatchStatus, setResumeMatchStatus] = useState({});
  const [anchorEl, setAnchorEl] = useState(null);
  const [tailorDialogOpen, setTailorDialogOpen] = useState(false);
  const [selectedResumeId, setSelectedResumeId] = useState('');
  const [matchLoading, setMatchLoading] = useState(false);

  useEffect(() => {
    fetchJobDetails();
    fetchAllResumes();
  }, [id]);

  const fetchJobDetails = async () => {
    try {
      setLoading(true);
      const jobData = await jobService.getJobById(id);
      setJob(jobData);
      
      // Fetch resume match status
      const matchStatus = await jobService.getResumeMatchStatus(id);
      setResumeMatchStatus(matchStatus.resumeStatusMap || {});
    } catch (error) {
      console.error('Error fetching job details:', error);
      setError('Failed to load job details. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const fetchAllResumes = async () => {
    try {
      const resumesData = await resumeService.getUserResumes();
      setAllResumes(resumesData || []);
    } catch (err) {
      console.error('Error fetching resumes:', err);
    }
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleAlertClose = () => {
    setAlert({ ...alert, open: false });
  };

  const handleMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleDeleteJob = async () => {
    try {
      await jobService.deleteJob(id);
      navigate('/jobs');
    } catch (error) {
      console.error('Error deleting job:', error);
      setAlert({
        open: true,
        message: 'Failed to delete job. Please try again.',
        severity: 'error'
      });
    }
  };

  const handleOpenTailorDialog = () => {
    setTailorDialogOpen(true);
    handleMenuClose();
  };

  const handleCloseTailorDialog = () => {
    setTailorDialogOpen(false);
    setSelectedResumeId('');
  };

  const handleResumeChange = (e) => {
    setSelectedResumeId(e.target.value);
  };

  const handleTailorResume = async () => {
    if (!selectedResumeId) {
      setAlert({
        open: true,
        message: 'Please select a resume to tailor',
        severity: 'warning'
      });
      return;
    }

    setMatchLoading(true);
    
    try {
      // First match the resume with the job using enhanced matching
      const matchResult = await jobService.matchResumeWithJob(id, selectedResumeId);
      
      // Show success message with match score
      setAlert({
        open: true,
        message: `Analysis complete! Match score: ${matchResult.matchAnalysis?.overallScore || 'N/A'}%`,
        severity: 'success'
      });
      
      // Refresh job data to show new match analysis
      await fetchJobDetails();
      
      // Navigate to the tailoring page
      navigate(`/jobs/${id}/tailor/${selectedResumeId}`);
    } catch (error) {
      console.error('Error initializing resume tailoring:', error);
      setAlert({
        open: true,
        message: 'Failed to start resume tailoring process. Please try again.',
        severity: 'error'
      });
      setMatchLoading(false);
    }
  };

  const renderResumeStatusChip = (resume) => {
    const status = resumeMatchStatus[resume._id];
    
    if (!status) {
      return null;
    }

    if (status.isTailored) {
      return (
        <Tooltip title={`${status.tailoredVersions.length} tailored version(s) for this job`}>
          <Chip
            icon={<AutoFixHighIcon />}
            label="Tailored"
            color="success"
            size="small"
            sx={{ ml: 1 }}
          />
        </Tooltip>
      );
    }

    if (status.isMatched) {
      return (
        <Tooltip title="Already matched with this job">
          <Chip
            icon={<CheckCircleIcon />}
            label="Matched"
            color="info"
            size="small"
            sx={{ ml: 1 }}
          />
        </Tooltip>
      );
    }

    return null;
  };

  // Render analysis status indicator
  const renderAnalysisStatus = () => {
    if (!job.parsedData || Object.keys(job.parsedData).length === 0) {
      return (
        <Alert severity="warning" sx={{ mb: 2 }}>
          <Typography variant="subtitle2">Job Analysis Pending</Typography>
          <Typography variant="body2">
            This job is still being analyzed. Some features may be limited.
          </Typography>
        </Alert>
      );
    }

    if (job.parsedData.analysisError) {
      return (
        <Alert severity="error" sx={{ mb: 2 }}>
          <Typography variant="subtitle2">Analysis Failed</Typography>
          <Typography variant="body2">
            {job.parsedData.analysisError}
          </Typography>
        </Alert>
      );
    }

    return null;
  };

  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
          <CircularProgress size={60} thickness={4} />
          <Typography variant="h6" sx={{ mt: 3, color: 'text.secondary' }}>
            Loading job details...
          </Typography>
        </Box>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Alert severity="error">{error}</Alert>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/jobs')}
            sx={{ mt: 2 }}
          >
            Back to Jobs
          </Button>
        </Box>
      </MainLayout>
    );
  }

  if (!job) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Alert severity="info">Job not found.</Alert>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/jobs')}
            sx={{ mt: 2 }}
          >
            Back to Jobs
          </Button>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <Box sx={{ p: 3, maxWidth: '1200px', mx: 'auto' }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate('/jobs')}
          variant="outlined"
          sx={{ mb: 3 }}
        >
          Back to Jobs
        </Button>

        {/* Job Header Component */}
        <JobHeader 
          job={job}
          onTailorClick={handleOpenTailorDialog}
          onMenuClick={handleMenuClick}
          onOpenOriginal={() => window.open(job.sourceUrl, '_blank')}
        />

        {/* Analysis Status */}
        {renderAnalysisStatus()}

        {/* Tabs without white container background */}
        <Box sx={{ mb: 4 }}>
          <Paper sx={{ borderRadius: 3, overflow: 'hidden', mb: 2 }}>
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              variant="scrollable"
              scrollButtons="auto"
              sx={{ 
                borderBottom: 1, 
                borderColor: 'divider',
                bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)',
                '& .MuiTab-root': { 
                  py: 2,
                  fontWeight: 500
                }
              }}
            >
              <Tab label="Overview" icon={<DescriptionIcon />} iconPosition="start" />
              <Tab label="Analysis" icon={<LightbulbIcon />} iconPosition="start" />
              <Tab label="Content" icon={<DescriptionIcon />} iconPosition="start" />
            </Tabs>
          </Paper>

          {/* Tab content without Paper wrapper */}
          {/* Overview Tab */}
          {tabValue === 0 && (
            <Box sx={{ py: 1 }}>
              <OverviewTab 
                job={job} 
                onTailorClick={handleOpenTailorDialog}
              />
            </Box>
          )}

          {/* Analysis Tab */}
          {tabValue === 1 && (
            <Box sx={{ py: 1 }}>
              <AnalysisTab 
                job={job} 
                onTailorClick={handleOpenTailorDialog}
              />
            </Box>
          )}

          {/* Content Tab */}
          {tabValue === 2 && (
            <Box sx={{ py: 1 }}>
              <ContentTab job={job} />
            </Box>
          )}
        </Box>

        {/* Menu */}
        <Menu
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={handleMenuClose}
          PaperProps={{
            elevation: 3,
            sx: { borderRadius: 2 }
          }}
        >

          <MenuItem onClick={handleDeleteJob} sx={{ color: 'error.main' }}>
            <ListItemIcon>
              <DeleteIcon fontSize="small" color="error" />
            </ListItemIcon>
            <ListItemText primary="Delete Job" />
          </MenuItem>
        </Menu>

        {/* Enhanced AI Resume Analysis Dialog */}
        <Dialog
          open={tailorDialogOpen}
          onClose={handleCloseTailorDialog}
          maxWidth="sm"
          fullWidth
          PaperProps={{
            sx: { 
              borderRadius: 4,
              overflow: 'hidden',
              boxShadow: '0px 24px 38px rgba(0, 0, 0, 0.14), 0px 9px 46px rgba(0, 0, 0, 0.12), 0px 11px 15px rgba(0, 0, 0, 0.20)',
              height: 'auto',
              maxHeight: '90vh'
            }
          }}
          TransitionComponent={Fade}
          transitionDuration={300}
        >
          {/* Custom Header with Solid Teal */}
          <DialogTitle 
            sx={{ 
              backgroundColor: theme.palette.secondary.main,
              color: 'white',
              p: 0,
              position: 'relative',
              overflow: 'hidden'
            }}
          >
            {/* Background Pattern */}
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: `radial-gradient(circle at 20% 50%, ${alpha('#ffffff', 0.1)} 0%, transparent 50%), 
                             radial-gradient(circle at 80% 20%, ${alpha('#ffffff', 0.08)} 0%, transparent 50%)`,
                zIndex: 0
              }}
            />
            
            {/* Header Content */}
            <Box sx={{ 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'space-between',
              p: 2.5,
              position: 'relative',
              zIndex: 1
            }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                <AutoJobLogo 
                  variant="icon-only" 
                  size="small" 
                  color="white"
                />
                <Box>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 700,
                      mb: 0.25,
                      textShadow: '0 2px 4px rgba(0,0,0,0.1)'
                    }}
                  >
                    Enhanced AI Resume Analysis
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      opacity: 0.9,
                      fontWeight: 500,
                      fontSize: '0.8rem'
                    }}
                  >
                    Powered by advanced AI agents
                  </Typography>
                </Box>
              </Box>
              
              <IconButton
                onClick={handleCloseTailorDialog}
                sx={{ 
                  color: 'white',
                  '&:hover': {
                    bgcolor: alpha('#ffffff', 0.1)
                  }
                }}
              >
                <CloseIcon />
              </IconButton>
            </Box>
          </DialogTitle>

          <DialogContent sx={{ p: 0, overflow: 'hidden' }}>
            {/* Hero Section */}
            <Box sx={{ 
              p: 2.5, 
              background: `linear-gradient(180deg, ${alpha(theme.palette.secondary.main, 0.02)} 0%, transparent 100%)`
            }}>
              <Typography 
                variant="body1" 
                sx={{ 
                  mb: 1.5,
                  fontWeight: 600,
                  color: 'text.primary',
                  fontSize: '1rem'
                }}
              >
                Select a resume for intelligent analysis and personalized recommendations.
              </Typography>
              
              <Typography 
                variant="body2" 
                sx={{ 
                  color: 'text.secondary',
                  lineHeight: 1.4,
                  fontSize: '0.875rem'
                }}
              >
                Our AI will analyze your resume against this job posting and provide detailed insights 
                to maximize your interview chances.
              </Typography>
            </Box>

            {/* AI Features Showcase */}
            <Box sx={{ px: 2.5, pb: 1.5 }}>
              <Card sx={{ 
                borderRadius: 2,
                border: `1px solid ${alpha(theme.palette.secondary.main, 0.12)}`,
                background: `linear-gradient(135deg, ${alpha(theme.palette.secondary.main, 0.02)} 0%, ${alpha(theme.palette.secondary.light, 0.02)} 100%)`
              }}>
                <CardContent sx={{ p: 2 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                    <StarsIcon 
                      sx={{ 
                        color: theme.palette.warning.main,
                        mr: 1,
                        fontSize: '1.25rem'
                      }} 
                    />
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontWeight: 600,
                        color: 'text.primary'
                      }}
                    >
                      Our enhanced AI will provide:
                    </Typography>
                  </Box>
                  
                  <Stack spacing={1.5}>
                    <Stack direction="row" spacing={1.5}>
                      <Card sx={{ flex: 1, p: 1.5, borderRadius: 1.5, bgcolor: alpha(theme.palette.success.main, 0.08) }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                          <TrendingUpIcon sx={{ color: 'success.main', mr: 0.75, fontSize: '1rem' }} />
                          <Typography variant="caption" sx={{ fontWeight: 600, fontSize: '0.75rem' }}>
                            Dynamic Match Scores
                          </Typography>
                        </Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                          Real-time compatibility analysis
                        </Typography>
                      </Card>
                      
                      <Card sx={{ flex: 1, p: 1.5, borderRadius: 1.5, bgcolor: alpha(theme.palette.info.main, 0.08) }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                          <SpeedIcon sx={{ color: 'info.main', mr: 0.75, fontSize: '1rem' }} />
                          <Typography variant="caption" sx={{ fontWeight: 600, fontSize: '0.75rem' }}>
                            Skill Importance Weighting
                          </Typography>
                        </Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                          Prioritized skill relevance
                        </Typography>
                      </Card>
                    </Stack>
                    
                    <Stack direction="row" spacing={1.5}>
                      <Card sx={{ flex: 1, p: 1.5, borderRadius: 1.5, bgcolor: alpha(theme.palette.warning.main, 0.08) }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                          <PsychologyIcon sx={{ color: 'warning.main', mr: 0.75, fontSize: '1rem' }} />
                          <Typography variant="caption" sx={{ fontWeight: 600, fontSize: '0.75rem' }}>
                            Experience Level Compatibility
                          </Typography>
                        </Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                          Career stage alignment
                        </Typography>
                      </Card>
                      
                      <Card sx={{ flex: 1, p: 1.5, borderRadius: 1.5, bgcolor: alpha(theme.palette.secondary.main, 0.08) }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                          <InsightsIcon sx={{ color: 'secondary.main', mr: 0.75, fontSize: '1rem' }} />
                          <Typography variant="caption" sx={{ fontWeight: 600, fontSize: '0.75rem' }}>
                            Personalized Improvement Suggestions
                          </Typography>
                        </Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                          Tailored enhancement recommendations
                        </Typography>
                      </Card>
                    </Stack>
                  </Stack>
                </CardContent>
              </Card>
            </Box>

            {/* Resume Selection */}
            <Box sx={{ px: 2.5, pb: 2.5 }}>
              <Divider sx={{ my: 2 }} />
              
              {allResumes.length === 0 ? (
                <Alert 
                  severity="warning" 
                  sx={{ 
                    borderRadius: 2,
                    '& .MuiAlert-icon': {
                      fontSize: '1.25rem'
                    }
                  }}
                >
                  <Typography variant="body2" sx={{ fontWeight: 600, mb: 0.25 }}>
                    No resumes found
                  </Typography>
                  <Typography variant="caption">
                    You don't have any resumes uploaded. Please upload a resume first to continue.
                  </Typography>
                </Alert>
              ) : (
                <Box>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1.5,
                      fontWeight: 600,
                      color: 'text.primary'
                    }}
                  >
                    Choose your resume for analysis
                  </Typography>
                  
                  <FormControl 
                    fullWidth 
                    sx={{ 
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2
                      }
                    }}
                  >
                    <InputLabel id="tailor-resume-label">Select Resume for Analysis</InputLabel>
                    <Select
                      labelId="tailor-resume-label"
                      value={selectedResumeId}
                      onChange={handleResumeChange}
                      label="Select Resume for Analysis"
                    >
                      {allResumes.map((resume) => (
                        <MenuItem 
                          key={resume._id} 
                          value={resume._id}
                          sx={{ 
                            minHeight: 48,
                            py: 1
                          }}
                        >
                          <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                            <DescriptionIcon sx={{ mr: 1.5, color: 'text.secondary', fontSize: '1.25rem' }} />
                            <Box sx={{ flex: 1 }}>
                              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                {resume.name}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                Updated {new Date(resume.updatedAt).toLocaleDateString()}
                              </Typography>
                            </Box>
                            {renderResumeStatusChip(resume)}
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>
              )}
            </Box>
          </DialogContent>

          <DialogActions sx={{ 
            p: 2.5, 
            pt: 0,
            gap: 1.5,
            background: `linear-gradient(180deg, transparent 0%, ${alpha(theme.palette.background.paper, 0.8)} 100%)`
          }}>
            <Button 
              onClick={handleCloseTailorDialog}
              variant="outlined"
              sx={{ 
                borderRadius: 2,
                px: 3,
                py: 1,
                fontWeight: 600
              }}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleTailorResume}
              variant="contained" 
              color="secondary"
              disabled={!selectedResumeId || matchLoading}
              startIcon={
                matchLoading ? (
                  <CircularProgress size={18} color="inherit" />
                ) : (
                  <AutoJobLogo 
                    variant="icon-only" 
                    size="small" 
                    color="white"
                    sx={{ transform: 'scale(0.7)' }}
                  />
                )
              }
              sx={{ 
                px: 3,
                py: 1,
                borderRadius: 2,
                fontWeight: 600,
                backgroundColor: theme.palette.secondary.main,
                color: 'white',
                boxShadow: `0px 8px 16px ${alpha(theme.palette.secondary.main, 0.24)}`,
                '&:hover': {
                  backgroundColor: theme.palette.secondary.dark,
                  boxShadow: `0px 12px 20px ${alpha(theme.palette.secondary.main, 0.32)}`,
                  transform: 'translateY(-1px)'
                },
                '&:disabled': {
                  backgroundColor: alpha(theme.palette.secondary.main, 0.6),
                  color: 'white'
                },
                transition: 'all 0.2s ease-in-out'
              }}
            >
              {matchLoading ? 'Analyzing Resume...' : 'Start Enhanced Analysis'}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Snackbar for notifications */}
        <Snackbar
          open={alert.open}
          autoHideDuration={6000}
          onClose={handleAlertClose}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert 
            onClose={handleAlertClose} 
            severity={alert.severity} 
            sx={{ width: '100%', borderRadius: 2 }}
            variant="filled"
          >
            {alert.message}
          </Alert>
        </Snackbar>
      </Box>
    </MainLayout>
  );
};

export default JobDetail;

================
File: src/components/jobs/JobsPage.js
================
// src/components/jobs/JobsPage.js - Fixed Analysis Status Logic
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Paper, 
  Grid, 
  Card, 
  CardContent, 
  CardActions, 
  Divider, 
  Chip, 
  CircularProgress, 
  Alert,
  LinearProgress,
  IconButton,
  Menu,
  MenuItem,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Tabs,
  Tab,
  Snackbar,
  Badge,
  Backdrop
} from '@mui/material';
import { 
  Add as AddIcon, 
  Work as WorkIcon,
  ErrorOutline as ErrorOutlineIcon,
  MoreVert as MoreVertIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  ContentCopy as ContentCopyIcon,
  SmartToy as SmartToyIcon,
  OpenInNew as OpenInNewIcon,
  Refresh as RefreshIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Schedule as ScheduleIcon,
  AutoAwesome as AutoAwesomeIcon,
  CheckCircle as CheckCircleIcon,
  HourglassEmpty as HourglassEmptyIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import jobService from '../../utils/jobService';
import resumeService from '../../utils/resumeService';
import MainLayout from '../layout/MainLayout';
import JobCreateDialog from './JobCreateDialog';
import FindJobsDialog from './FindJobsDialog';
import AutoJobLogo from '../common/AutoJobLogo';

// Helper function to determine job analysis status
const getJobAnalysisStatus = (job) => {
  // If job has explicit analysisStatus field, use it
  if (job.analysisStatus && job.analysisStatus.status) {
    return {
      status: job.analysisStatus.status,
      progress: job.analysisStatus.progress || 0,
      message: job.analysisStatus.message || 'Processing...',
      canViewJob: job.analysisStatus.canViewJob !== false,
      skillsFound: job.analysisStatus.skillsFound,
      experienceLevel: job.analysisStatus.experienceLevel
    };
  }
  
  // For existing jobs without analysisStatus field, infer status from parsedData
  if (job.parsedData && Object.keys(job.parsedData).length > 0 && !job.parsedData.analysisError) {
    return {
      status: 'completed',
      progress: 100,
      message: `Analysis complete! Found ${job.parsedData.keySkills?.length || 0} key skills.`,
      canViewJob: true,
      skillsFound: job.parsedData.keySkills?.length || 0,
      experienceLevel: job.parsedData.experienceLevel
    };
  }
  
  // If parsedData exists but has errors
  if (job.parsedData && job.parsedData.analysisError) {
    return {
      status: 'error',
      progress: 0,
      message: 'Analysis failed',
      canViewJob: true,
      error: job.parsedData.analysisError
    };
  }
  
  // No parsedData means analysis hasn't been done yet
  return {
    status: 'pending',
    progress: 0,
    message: 'Analysis pending...',
    canViewJob: false
  };
};

// Inline JobAnalysisStatus component
const JobAnalysisStatus = ({ 
  analysisStatus, 
  size = 'normal', 
  variant = 'full', 
  showDetails = true 
}) => {
  if (!analysisStatus) {
    return null;
  }

  const { status, progress, message, skillsFound, experienceLevel } = analysisStatus;

  const statusConfig = {
    pending: {
      label: 'Analysis Queued',
      color: 'info',
      icon: HourglassEmptyIcon,
      bgColor: 'rgba(2, 136, 209, 0.1)',
      textColor: '#0288d1'
    },
    analyzing: {
      label: 'Analyzing Job',
      color: 'primary',
      icon: AutoAwesomeIcon,
      bgColor: 'rgba(26, 115, 232, 0.1)',
      textColor: '#1a73e8'
    },
    completed: {
      label: 'Analysis Complete',
      color: 'success',
      icon: CheckCircleIcon,
      bgColor: 'rgba(52, 168, 83, 0.1)',
      textColor: '#34a853'
    },
    error: {
      label: 'Analysis Failed',
      color: 'error',
      icon: ErrorOutlineIcon,
      bgColor: 'rgba(234, 67, 53, 0.1)',
      textColor: '#ea4335'
    }
  };

  const config = statusConfig[status] || statusConfig.pending;
  const IconComponent = config.icon;

  const sizeConfig = {
    small: {
      iconSize: 16,
      chipHeight: 24,
      typography: 'caption',
      progressHeight: 4
    },
    normal: {
      iconSize: 20,
      chipHeight: 28,
      typography: 'body2',
      progressHeight: 6
    },
    large: {
      iconSize: 24,
      chipHeight: 32,
      typography: 'body1',
      progressHeight: 8
    }
  };

  const currentSize = sizeConfig[size];

  if (variant === 'chip') {
    return (
      <Chip
        icon={
          status === 'analyzing' ? (
            <CircularProgress 
              size={currentSize.iconSize} 
              thickness={6} 
              color={config.color}
            />
          ) : (
            <IconComponent 
              sx={{ 
                fontSize: `${currentSize.iconSize}px !important`,
                color: config.textColor 
              }} 
            />
          )
        }
        label={config.label}
        size={size}
        sx={{
          height: currentSize.chipHeight,
          backgroundColor: config.bgColor,
          color: config.textColor,
          border: `1px solid ${config.textColor}`,
          fontWeight: 500,
          '& .MuiChip-icon': {
            color: `${config.textColor} !important`
          }
        }}
      />
    );
  }

  if (variant === 'progress-only') {
    return (
      <Box sx={{ width: '100%' }}>
        <LinearProgress
          variant="determinate"
          value={progress}
          color={config.color}
          sx={{
            height: currentSize.progressHeight,
            borderRadius: currentSize.progressHeight / 2,
            backgroundColor: config.bgColor,
            '& .MuiLinearProgress-bar': {
              borderRadius: currentSize.progressHeight / 2,
            }
          }}
        />
        {showDetails && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
            <Typography variant={currentSize.typography} color="text.secondary">
              {message}
            </Typography>
            <Typography variant={currentSize.typography} color="text.secondary">
              {progress}%
            </Typography>
          </Box>
        )}
      </Box>
    );
  }

  return (
    <Box
      sx={{
        p: size === 'small' ? 1.5 : 2,
        borderRadius: 2,
        backgroundColor: config.bgColor,
        border: `1px solid ${config.textColor}`,
        display: 'flex',
        alignItems: 'center',
        gap: 1.5
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        {status === 'analyzing' ? (
          <CircularProgress 
            size={currentSize.iconSize} 
            thickness={6} 
            color={config.color}
          />
        ) : (
          <IconComponent 
            sx={{ 
              fontSize: currentSize.iconSize,
              color: config.textColor 
            }} 
          />
        )}
      </Box>

      <Box sx={{ flex: 1, minWidth: 0 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
          <Typography 
            variant={currentSize.typography} 
            fontWeight={600}
            color={config.textColor}
            noWrap
          >
            {config.label}
          </Typography>
          
          {status === 'analyzing' && (
            <Chip
              icon={<SmartToyIcon sx={{ fontSize: '14px !important' }} />}
              label="AI"
              size="small"
              sx={{
                height: 18,
                fontSize: '0.7rem',
                backgroundColor: config.textColor,
                color: 'white',
                '& .MuiChip-icon': {
                  color: 'white !important'
                }
              }}
            />
          )}
        </Box>

        {status !== 'completed' && status !== 'error' && (
          <Box sx={{ mb: 1 }}>
            <LinearProgress
              variant="determinate"
              value={progress}
              color={config.color}
              sx={{
                height: currentSize.progressHeight,
                borderRadius: currentSize.progressHeight / 2,
                backgroundColor: 'rgba(255,255,255,0.3)',
                '& .MuiLinearProgress-bar': {
                  borderRadius: currentSize.progressHeight / 2,
                }
              }}
            />
          </Box>
        )}

        <Typography 
          variant={size === 'small' ? 'caption' : 'body2'} 
          color={config.textColor}
          sx={{ opacity: 0.9 }}
        >
          {message}
        </Typography>

        {status === 'completed' && showDetails && skillsFound !== undefined && (
          <Box sx={{ mt: 1, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            <Chip
              label={`${skillsFound} skills found`}
              size="small"
              variant="outlined"
              sx={{
                height: 20,
                fontSize: '0.7rem',
                borderColor: config.textColor,
                color: config.textColor
              }}
            />
            {experienceLevel && (
              <Chip
                label={`${experienceLevel} level`}
                size="small"
                variant="outlined"
                sx={{
                  height: 20,
                  fontSize: '0.7rem',
                  borderColor: config.textColor,
                  color: config.textColor
                }}
              />
            )}
          </Box>
        )}

        {status === 'error' && showDetails && (
          <Alert 
            severity="error" 
            sx={{ 
              mt: 1, 
              py: 0.5,
              fontSize: '0.75rem',
              '& .MuiAlert-icon': {
                fontSize: '1rem'
              }
            }}
          >
            Analysis failed. You can still view the job, but some features may be limited.
          </Alert>
        )}
      </Box>

      {(status === 'analyzing' || status === 'pending') && (
        <Typography 
          variant={size === 'small' ? 'caption' : 'body2'} 
          fontWeight={600}
          color={config.textColor}
        >
          {progress}%
        </Typography>
      )}
    </Box>
  );
};

// Tab panel component
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`job-tabpanel-${index}`}
      aria-labelledby={`job-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

const JobsPage = () => {
  const navigate = useNavigate();
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [openCreateDialog, setOpenCreateDialog] = useState(false);
  const [openFindJobsDialog, setOpenFindJobsDialog] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [tabValue, setTabValue] = useState(0);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });
  const [activeResumes, setActiveResumes] = useState([]);
  const [pollingJobs, setPollingJobs] = useState(new Set());

  // Safe AutoJobLogo wrapper component
  const SafeAutoJobLogo = ({ size = 'small' }) => {
    try {
      return (
        <AutoJobLogo 
          variant="icon-only" 
          size={size} 
          showTagline={false}
        />
      );
    } catch (error) {
      console.warn('AutoJobLogo failed to render:', error);
      return <SmartToyIcon sx={{ fontSize: size === 'small' ? 16 : 20 }} />;
    }
  };

  useEffect(() => {
    fetchJobs();
    fetchActiveResumes();
  }, []);

  // Poll analysis status for jobs that are still processing
  useEffect(() => {
    const jobsNeedingPolling = jobs.filter(job => {
      const status = getJobAnalysisStatus(job);
      return (status.status === 'pending' || status.status === 'analyzing') && !pollingJobs.has(job._id);
    });

    jobsNeedingPolling.forEach(job => {
      startPollingJobStatus(job._id);
    });
  }, [jobs]);

  const fetchJobs = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('Fetching jobs...');
      const jobsData = await jobService.getAllJobs();
      setJobs(jobsData || []);
    } catch (err) {
      console.error('Error fetching jobs:', err);
      setError(err.response?.data?.message || 'Failed to load jobs. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const fetchActiveResumes = async () => {
    try {
      const resumesData = await resumeService.getUserResumes();
      setActiveResumes(resumesData.filter(r => r.isActive) || []);
    } catch (err) {
      console.error('Error fetching active resumes:', err);
    }
  };

  // Start polling for a specific job's analysis status
  const startPollingJobStatus = async (jobId) => {
    if (pollingJobs.has(jobId)) {
      return; // Already polling this job
    }

    setPollingJobs(prev => new Set([...prev, jobId]));

    try {
      // Check if jobService.pollJobAnalysisStatus exists before using it
      if (typeof jobService.pollJobAnalysisStatus === 'function') {
        await jobService.pollJobAnalysisStatus(
          jobId,
          (statusUpdate) => {
            // Update the specific job's status in real-time
            setJobs(prevJobs => prevJobs.map(job => 
              job._id === jobId 
                ? { ...job, analysisStatus: statusUpdate }
                : job
            ));
          },
          30 // Max 30 attempts (60 seconds)
        );
      } else {
        console.warn('pollJobAnalysisStatus method not available in jobService');
      }
    } catch (error) {
      console.error(`Polling failed for job ${jobId}:`, error);
      
      // Update job to show error state
      setJobs(prevJobs => prevJobs.map(job => 
        job._id === jobId 
          ? { 
              ...job, 
              analysisStatus: { 
                status: 'error', 
                message: 'Analysis status polling failed',
                progress: 0,
                canViewJob: true
              }
            }
          : job
      ));
    } finally {
      // Remove from polling set
      setPollingJobs(prev => {
        const newSet = new Set(prev);
        newSet.delete(jobId);
        return newSet;
      });
    }
  };

  const handleOpenCreateDialog = () => {
    setOpenCreateDialog(true);
  };

  const handleCloseCreateDialog = () => {
    setOpenCreateDialog(false);
  };

  const handleOpenFindJobsDialog = () => {
    setOpenFindJobsDialog(true);
  };

  const handleCloseFindJobsDialog = () => {
    setOpenFindJobsDialog(false);
  };

  const handleJobCreated = (newJob) => {
    fetchJobs(); // Refresh the entire list
    handleCloseCreateDialog();
    showSnackbar('Job created successfully - analysis in progress', 'success');
    
    // Start polling the new job if it has an ID
    if (newJob?.job?.id) {
      setTimeout(() => {
        startPollingJobStatus(newJob.job.id);
      }, 1000);
    }
  };

  const handleMenuOpen = (event, jobId) => {
    setAnchorEl(event.currentTarget);
    setSelectedJobId(jobId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedJobId(null);
  };

  const handleDeleteJob = async () => {
    if (!selectedJobId) return;
    
    try {
      await jobService.deleteJob(selectedJobId);
      setJobs(prevJobs => prevJobs.filter(job => job._id !== selectedJobId));
      handleMenuClose();
      showSnackbar('Job deleted successfully', 'success');
    } catch (err) {
      console.error('Error deleting job:', err);
      showSnackbar('Failed to delete job', 'error');
    }
  };

  const handleJobClick = (job) => {
    const status = getJobAnalysisStatus(job);
    
    // Check if analysis is complete before allowing navigation
    if (!status.canViewJob) {
      showSnackbar('Please wait for job analysis to complete before viewing details', 'warning');
      return;
    }
    
    navigate(`/jobs/${job._id}`);
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false
    });
  };

  const handleJobsFindCompleted = () => {
    fetchJobs();
    handleCloseFindJobsDialog();
    showSnackbar('AI job search initiated. Jobs will appear as they are found.', 'success');
  };

  const renderEmptyState = () => (
    <Box sx={{ mt: 2 }}>
      <Paper 
        elevation={1} 
        sx={{ 
          p: 3, 
          textAlign: 'center', 
          display: 'flex', 
          flexDirection: 'column', 
          alignItems: 'center',
          backgroundColor: theme => theme.palette.background.paper,
          border: `1px solid`,
          borderColor: 'divider',
          borderRadius: 3,
          mb: 3
        }}
      >
        <WorkIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2, opacity: 0.8 }} />
        <Typography variant="h5" gutterBottom fontWeight={600}>
          Find Your Perfect Job Match
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3, maxWidth: 560, lineHeight: 1.5 }}>
          Add jobs manually or let our AI find opportunities that match your resume.
          Our platform will help you analyze matches, tailor your application materials,
          and track your job search progress.
        </Typography>
        <Box sx={{ display: 'flex', gap: 1.5 }}>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<AddIcon />} 
            onClick={handleOpenCreateDialog}
            sx={{ 
              py: 1, 
              px: 3, 
              fontSize: '0.9rem', 
              fontWeight: 500,
              borderRadius: 2
            }}
          >
            Add Job Manually
          </Button>
          <Button 
            variant="outlined" 
            color="primary" 
            startIcon={<SafeAutoJobLogo size="small" />} 
            onClick={handleOpenFindJobsDialog}
            sx={{ 
              py: 1, 
              px: 3, 
              fontSize: '0.9rem', 
              fontWeight: 500,
              borderRadius: 2
            }}
          >
            Discover Jobs
          </Button>
        </Box>
        {activeResumes.length === 0 && (
          <Alert severity="info" sx={{ mt: 2.5, maxWidth: 480, fontSize: '0.85rem' }}>
            You need at least one active resume to use the AI job search feature.
            Please upload and activate a resume first.
          </Alert>
        )}
      </Paper>

      <Typography variant="h6" sx={{ mb: 2.5, fontWeight: 600 }}>
        How Our Job Matching Works
      </Typography>

      <Grid container spacing={2.5} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #4caf50',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              1. Find or Add Jobs
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <WorkIcon sx={{ fontSize: 56, color: '#4caf50', opacity: 0.8 }} />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Add jobs manually from listings you find, or let our AI find relevant positions 
              based on your resume.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #2196f3',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              2. Match Analysis
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <ContentCopyIcon sx={{ fontSize: 56, color: '#2196f3', opacity: 0.8 }} />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Our system analyzes how well your resume matches each job, identifying
              strengths and areas for improvement.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #ff9800',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              3. Tailor & Apply
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <SafeAutoJobLogo size="medium" />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Get AI-powered suggestions to tailor your resume for each job, increasing
              your chances of getting interviews.
            </Typography>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );

  const renderErrorState = () => (
    <Paper 
      elevation={0} 
      sx={{ 
        p: 4, 
        mt: 3,
        borderRadius: 2,
        border: '1px solid rgba(211, 47, 47, 0.2)',
        backgroundColor: 'rgba(211, 47, 47, 0.05)'
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
        <ErrorOutlineIcon color="error" sx={{ mr: 2, mt: 0.5 }} />
        <Box>
          <Typography variant="h6" color="error" gutterBottom fontWeight={500}>
            Error Loading Jobs
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            {error || 'Failed to load jobs. Please try again.'}
          </Typography>
        </Box>
      </Box>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Button 
          variant="outlined" 
          color="primary" 
          startIcon={<RefreshIcon />} 
          onClick={fetchJobs}
          sx={{ textTransform: 'none' }}
        >
          Try Again
        </Button>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<AddIcon />} 
          onClick={handleOpenCreateDialog}
          sx={{ textTransform: 'none' }}
        >
          Add Job Manually
        </Button>
      </Box>
    </Paper>
  );

  const renderJobGrid = (filteredJobs) => (
    <Grid container spacing={3} sx={{ mt: 1 }}>
      {filteredJobs.map((job) => {
        // FIXED: Use the helper function to get consistent status
        const analysisStatus = getJobAnalysisStatus(job);
        const canView = analysisStatus.canViewJob;
        const isAnalyzing = analysisStatus.status === 'analyzing' || analysisStatus.status === 'pending';
        
        return (
          <Grid item xs={12} sm={6} md={4} key={job._id}>
            <Card sx={{ 
              height: '100%', 
              display: 'flex', 
              flexDirection: 'column',
              position: 'relative',
              transition: 'transform 0.2s, box-shadow 0.2s',
              opacity: canView ? 1 : 0.8,
              cursor: canView ? 'pointer' : 'default',
              '&:hover': canView ? {
                transform: 'translateY(-4px)',
                boxShadow: '0 8px 24px rgba(0,0,0,0.12)'
              } : {}
            }}>
              {/* FIXED: Only show analysis overlay for jobs that are actually being analyzed */}
              {isAnalyzing && (
                <Box
                  sx={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    zIndex: 10,
                    bgcolor: 'rgba(255,255,255,0.95)',
                    backdropFilter: 'blur(2px)',
                    p: 1
                  }}
                >
                  <JobAnalysisStatus 
                    analysisStatus={analysisStatus}
                    size="small"
                    variant="full"
                    showDetails={false}
                  />
                </Box>
              )}

{/* Discovered Badge */}
{job.isAiGenerated && (
  <Chip 
    icon={<SafeAutoJobLogo size="small" sx={{ '& svg': { width: 12, height: 12 } }} />}
    label="Discovered" 
    size="small" 
    sx={{ 
      position: 'absolute', 
      top: 12, 
      right: 12,
      height: '28px',
      fontWeight: 600,
      fontSize: '0.75rem',
      backgroundColor: '#00c4b4',
      color: '#ffffff',
      border: '1px solid #00c4b4',
      boxShadow: '0 2px 8px rgba(38, 166, 154, 0.3)',
      zIndex: 5,
      '& .MuiChip-icon': {
        color: '#ffffff !important'
      },
      '&:hover': {
        backgroundColor: '#00695C',
        boxShadow: '0 4px 12px rgba(38, 166, 154, 0.4)'
      }
    }}
  />
)}

              <CardContent sx={{ flexGrow: 1, pt: job.isAiGenerated ? 5 : 3 }}>
                <Typography variant="h6" gutterBottom noWrap fontWeight={500}>
                  {job.title}
                </Typography>
                <Typography variant="subtitle1" color="text.secondary" noWrap>
                  {job.company}
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  {job.location?.city 
                    ? `${job.location.city}${job.location.state ? `, ${job.location.state}` : ''}`
                    : job.location?.remote ? 'Remote' : 'Location not specified'
                  }
                </Typography>
                <Divider sx={{ my: 2 }} />
                
{/* FIXED: Only show progress for jobs that are actually being analyzed */}
                {isAnalyzing && (
                  <Box sx={{ mb: 2 }}>
                    <JobAnalysisStatus 
                      analysisStatus={analysisStatus}
                      size="small"
                      variant="progress-only"
                      showDetails={true}
                    />
                  </Box>
                )}
                
                {/* Match Score - FIXED: Only show for completed analysis */}
                {job.matchAnalysis && job.matchAnalysis.overallScore && analysisStatus.status === 'completed' && (
                  <Box sx={{ mt: 2, mb: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                      <Typography variant="subtitle2" fontWeight={500}>
                        Match Score
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Typography variant="h6" fontWeight={600} color={getScoreColor(job.matchAnalysis.overallScore)}>
                          {job.matchAnalysis.overallScore}
                        </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ ml: 0.5 }}>
                          /100
                        </Typography>
                      </Box>
                    </Box>
                    <LinearProgress 
                      variant="determinate" 
                      value={job.matchAnalysis.overallScore} 
                      sx={{ 
                        height: 8, 
                        borderRadius: 2,
                        backgroundColor: 'rgba(0,0,0,0.05)',
                        '& .MuiLinearProgress-bar': {
                          backgroundColor: getScoreColor(job.matchAnalysis.overallScore)
                        }
                      }}
                    />
                  </Box>
                )}
                
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary" noWrap>
                    Posted: {new Date(job.createdAt).toLocaleDateString()}
                  </Typography>
                  
                  <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                    <Chip 
                      label={job.jobType?.replace('_', ' ') || 'Full-time'} 
                      size="small" 
                      variant="outlined" 
                    />
                    {job.salary?.min && (
                      <Chip 
                        label={`${job.salary.currency || '$'}${job.salary.min}${job.salary.max ? ` - ${job.salary.max}` : '+'}`} 
                        size="small" 
                        variant="outlined" 
                        color="success"
                      />
                    )}
                    <Chip 
                      label={job.applicationStatus?.replace('_', ' ') || 'Not Applied'} 
                      size="small" 
                      variant="outlined" 
                      color={job.applicationStatus === 'APPLIED' ? 'primary' : 'default'}
                    />
                  </Box>
                </Box>
              </CardContent>

              <CardActions sx={{ justifyContent: 'space-between', p: 2 }}>
                <Tooltip 
                  title={!canView ? "Analysis in progress - please wait" : "View job details"}
                  arrow
                >
                  <span> {/* Span wrapper needed for disabled button tooltip */}
                    <Button 
                      size="small" 
                      color="primary" 
                      onClick={() => handleJobClick(job)}
                      variant="contained"
                      disabled={!canView}
                      startIcon={
                        canView ? <VisibilityIcon /> : <ScheduleIcon />
                      }
                    >
                      {canView ? 'View Details' : 'Analyzing...'}
                    </Button>
                  </span>
                </Tooltip>
                <Box>
                  {job.sourceUrl && (
                    <Tooltip title="Open Original Listing">
                      <IconButton 
                        size="small" 
                        onClick={() => window.open(job.sourceUrl, '_blank')}
                        sx={{ mr: 1 }}
                      >
                        <OpenInNewIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  )}
                  <IconButton 
                    size="small"
                    aria-controls={`job-menu-${job._id}`}
                    aria-haspopup="true"
                    onClick={(e) => handleMenuOpen(e, job._id)}
                  >
                    <MoreVertIcon fontSize="small" />
                  </IconButton>
                </Box>
              </CardActions>
            </Card>
          </Grid>
        );
      })}
      
      {/* Add Job Card */}
      <Grid item xs={12} sm={6} md={4}>
        <Card 
          sx={{ 
            height: '100%', 
            minHeight: 250,
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'center', 
            alignItems: 'center',
            p: 3,
            backgroundColor: 'rgba(0, 0, 0, 0.02)',
            border: '2px dashed',
            borderColor: 'divider',
            cursor: 'pointer',
            transition: 'all 0.2s ease-in-out',
            '&:hover': {
              borderColor: 'primary.main',
              backgroundColor: 'rgba(63, 81, 181, 0.04)'
            }
          }}
          onClick={handleOpenCreateDialog}
        >
          <AddIcon sx={{ fontSize: 40, color: 'primary.main', mb: 2 }} />
          <Typography variant="h6" align="center" fontWeight={500}>
            Add New Job
          </Typography>
          <Typography variant="body2" color="text.secondary" align="center" sx={{ mt: 1 }}>
            Manually add a job listing to your collection
          </Typography>
        </Card>
      </Grid>
    </Grid>
  );

  // Helper function to get color based on score
  const getScoreColor = (score) => {
    if (score >= 80) return 'success.main';
    if (score >= 60) return 'warning.main';
    return 'error.main';
  };

  // Filter jobs based on tab selection
  const getFilteredJobs = () => {
    switch (tabValue) {
      case 0: // All jobs
        return jobs;
      case 1: // AI-found jobs
        return jobs.filter(job => job.isAiGenerated);
      case 2: // Manually added jobs
        return jobs.filter(job => !job.isAiGenerated);
      case 3: // Not applied
        return jobs.filter(job => !job.applicationStatus || job.applicationStatus === 'NOT_APPLIED');
      case 4: // Applied
        return jobs.filter(job => job.applicationStatus && job.applicationStatus !== 'NOT_APPLIED');
      default:
        return jobs;
    }
  };

  const filteredJobs = getFilteredJobs();

  // FIXED: Count jobs by analysis status using the helper function
  const analyzingCount = jobs.filter(job => {
    const status = getJobAnalysisStatus(job);
    return status.status === 'analyzing' || status.status === 'pending';
  }).length;

  return (
    <MainLayout>
      <Box sx={{ p: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box>
            <Typography variant="h4" component="h1" fontWeight={500}>
              Job Matches
            </Typography>
            {analyzingCount > 0 && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
                {analyzingCount} job{analyzingCount === 1 ? '' : 's'} currently being analyzed
              </Typography>
            )}
          </Box>
          {!loading && !error && jobs.length > 0 && (
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button 
                variant="outlined" 
                color="primary" 
                startIcon={<SafeAutoJobLogo size="small" />} 
                onClick={handleOpenFindJobsDialog}
                sx={{ textTransform: 'none' }}
              >
                Discover Jobs
              </Button>
              <Button 
                variant="contained" 
                color="primary" 
                startIcon={<AddIcon />} 
                onClick={handleOpenCreateDialog}
                sx={{ textTransform: 'none' }}
              >
                Add Job Manually
              </Button>
            </Box>
          )}
        </Box>

        {loading ? (
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '300px' }}>
            <CircularProgress size={60} thickness={4} color="primary" />
            <Typography variant="h6" sx={{ mt: 3, color: 'text.secondary' }}>
              Loading your jobs...
            </Typography>
          </Box>
        ) : error ? (
          renderErrorState()
        ) : jobs.length === 0 ? (
          renderEmptyState()
        ) : (
          <>
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              variant="scrollable"
              scrollButtons="auto"
              sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}
            >
              <Tab label={`All Jobs (${jobs.length})`} />
              <Tab label={`AI Found (${jobs.filter(job => job.isAiGenerated).length})`} />
              <Tab label={`Manually Added (${jobs.filter(job => !job.isAiGenerated).length})`} />
              <Tab label={`Not Applied (${jobs.filter(job => !job.applicationStatus || job.applicationStatus === 'NOT_APPLIED').length})`} />
              <Tab label={`Applied (${jobs.filter(job => job.applicationStatus && job.applicationStatus !== 'NOT_APPLIED').length})`} />
            </Tabs>
            
            {filteredJobs.length === 0 ? (
              <Box sx={{ textAlign: 'center', my: 6 }}>
                <Typography variant="h6" color="text.secondary">
                  No jobs found in this category
                </Typography>
              </Box>
            ) : (
              renderJobGrid(filteredJobs)
            )}
          </>
        )}
      </Box>

      {/* Job Create Dialog */}
      <JobCreateDialog 
        open={openCreateDialog}
        onClose={handleCloseCreateDialog}
        onJobCreated={handleJobCreated}
      />
      
      {/* Find Jobs Dialog */}
      <FindJobsDialog 
        open={openFindJobsDialog}
        onClose={handleCloseFindJobsDialog}
        onJobsFound={handleJobsFindCompleted}
        resumes={activeResumes}
      />
      
      {/* Job menu */}
      <Menu
        id="job-menu"
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem onClick={handleDeleteJob} sx={{ color: 'error.main' }}>
          <DeleteIcon fontSize="small" sx={{ mr: 1 }} />
          Delete Job
        </MenuItem>
      </Menu>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        message={snackbar.message}
        severity={snackbar.severity}
      />
    </MainLayout>
  );
};

export default JobsPage;

================
File: src/components/jobs/ResumeTailoring.js
================
// src/components/jobs/ResumeTailoring.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Grid,
  Paper,
  Button,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  CardHeader,
  Divider,
  Stepper,
  Step,
  StepLabel,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Snackbar,
  useTheme,
  alpha
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  ExpandMore as ExpandMoreIcon,
  Save as SaveIcon,
  SmartToy as SmartToyIcon,
  Lightbulb as LightbulbIcon,
  Business as BusinessIcon,
  WorkOutline as WorkOutlineIcon,
  FormatListBulleted as FormatListBulletedIcon,
  CropFree as CropFreeIcon,
  Keyboard as KeyboardIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import jobService from '../../utils/jobService';
import resumeService from '../../utils/resumeService';
import MainLayout from '../layout/MainLayout';

const ResumeTailoring = () => {
  const theme = useTheme();
  const { jobId, resumeId } = useParams();
  const navigate = useNavigate();
  
  const [job, setJob] = useState(null);
  const [resume, setResume] = useState(null);
  const [tailoringData, setTailoringData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeStep, setActiveStep] = useState(0);
  const [tailoringSaving, setTailoringSaving] = useState(false);
  const [versionName, setVersionName] = useState('');
  const [versionNotes, setVersionNotes] = useState('');
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  const steps = ['Analyze Match', 'Review Recommendations', 'Create Tailored Version'];

  useEffect(() => {
    fetchData();
  }, [jobId, resumeId]);

  useEffect(() => {
    if (resume && job) {
      setVersionName(`AI Tailored - ${resume.name} for ${job.title} at ${job.company}`);
    }
  }, [resume, job]);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError('');
      
      // Fetch job details
      const jobData = await jobService.getJobById(jobId);
      setJob(jobData);
      
      // Fetch resume details
      const resumeData = await resumeService.getResumeById(resumeId);
      setResume(resumeData.resume);
      
      // If no match analysis exists, create one
      if (!jobData.matchAnalysis || !jobData.matchAnalysis.overallScore) {
        await jobService.matchResumeWithJob(jobId, resumeId);
        // Refresh job data to get match analysis
        const updatedJobData = await jobService.getJobById(jobId);
        setJob(updatedJobData);
      }
      
      // Get tailoring recommendations
      const tailoringResult = await jobService.getTailoringRecommendations(jobId, resumeId);
      setTailoringData(tailoringResult.tailoringResult);
      
      setActiveStep(1); // Move to recommendations step
    } catch (err) {
      console.error('Error fetching tailoring data:', err);
      setError('Failed to load tailoring data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false
    });
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  const handleSaveTailoredResume = async () => {
    if (!versionName) {
      showSnackbar('Please provide a name for your tailored resume', 'warning');
      return;
    }
    
    setTailoringSaving(true);
    
    try {
      console.log('Creating tailored resume with options:', {
        name: versionName,
        notes: versionNotes
      });
      
      // Call API to create tailored resume
      const response = await resumeService.createTailoredResume(resumeId, jobId, {
        name: versionName,
        notes: versionNotes
      });
      
      console.log('Tailored resume creation response:', response);
      
      // Show success message with analysis info
      const analysisInfo = response.resume?.analysis?.overallScore 
        ? ` (New Resume Score: ${response.resume.analysis.overallScore}%)`
        : '';
      
      showSnackbar(`Tailored resume created successfully!${analysisInfo}`, 'success');
      
      // Wait a moment, then show success and navigate
      setTimeout(async () => {
        // Show final success message
        showSnackbar('✅ Tailored resume created and job match updated!', 'success');
        
        // Navigate to the new tailored resume detail page
        if (response.resume?.id) {
          setTimeout(() => {
            navigate(`/resumes/${response.resume.id}`);
          }, 1500);
        } else {
          // Fallback to resumes list
          setTimeout(() => {
            navigate('/resumes');
          }, 1500);
        }
      }, 1000);
      
    } catch (error) {
      console.error('Error saving tailored resume:', error);
      
      // More detailed error handling
      let errorMessage = 'Failed to create tailored resume. Please try again.';
      
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      showSnackbar(errorMessage, 'error');
      setTailoringSaving(false);
    }
  };

  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box sx={{ my: 2 }}>
            <Typography variant="body1" gutterBottom>
              Analyzing resume match with job description...
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', my: 4 }}>
              <CircularProgress size={60} />
            </Box>
          </Box>
        );
      
      case 1:
        return (
          <Box sx={{ my: 2 }}>
            <Typography variant="h6" fontWeight={500} gutterBottom>
              Tailoring Recommendations
            </Typography>
            
            <Grid container spacing={3}>
              {/* Summary Recommendations */}
              <Grid item xs={12}>
                <Accordion 
                  defaultExpanded
                  sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    boxShadow: 'none',
                    border: `1px solid ${theme.palette.divider}`,
                    '&:before': {
                      display: 'none',
                    },
                    mb: 2
                  }}
                >
                  <AccordionSummary 
                    expandIcon={<ExpandMoreIcon />}
                    sx={{ 
                      background: alpha(theme.palette.primary.main, 0.05),
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <SmartToyIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
                      <Typography variant="subtitle1" fontWeight={600}>
                        Professional Summary
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails sx={{ p: 3 }}>
                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <Card 
                          variant="outlined" 
                          sx={{ 
                            height: '100%',
                            borderRadius: 2,
                            borderColor: theme.palette.divider,
                            boxShadow: 'none'
                          }}
                        >
                          <CardHeader 
                            title="Original Version" 
                            titleTypographyProps={{ 
                              variant: 'subtitle2', 
                              fontWeight: 600,
                              color: theme.palette.text.primary
                            }} 
                            sx={{ 
                              p: 2, 
                              pb: 1,
                              backgroundColor: alpha(theme.palette.primary.main, 0.05)
                            }}
                          />
                          <CardContent sx={{ p: 2 }}>
                            <Typography variant="body2" color="text.secondary">
                              {tailoringData?.summary?.original || "No summary found in original resume."}
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                      <Grid item xs={12} md={6}>
                        <Card 
                          variant="outlined" 
                          sx={{ 
                            height: '100%',
                            borderRadius: 2,
                            borderColor: theme.palette.success.main,
                            backgroundColor: alpha(theme.palette.success.main, 0.05),
                            boxShadow: 'none'
                          }}
                        >
                          <CardHeader 
                            title="Tailored Version" 
                            titleTypographyProps={{ 
                              variant: 'subtitle2', 
                              fontWeight: 600,
                              color: theme.palette.text.primary 
                            }} 
                            sx={{ 
                              p: 2, 
                              pb: 1,
                              backgroundColor: alpha(theme.palette.success.main, 0.12),
                              borderBottom: `1px solid ${alpha(theme.palette.success.main, 0.2)}`
                            }}
                          />
                          <CardContent sx={{ p: 2 }}>
                            <Typography variant="body2" color="text.secondary">
                              {tailoringData?.summary?.tailored || "No tailored summary available."}
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                    </Grid>
                  </AccordionDetails>
                </Accordion>
              </Grid>
              
              {/* Experience Improvements */}
              <Grid item xs={12}>
                <Accordion 
                  defaultExpanded
                  sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    boxShadow: 'none',
                    border: `1px solid ${theme.palette.divider}`,
                    '&:before': {
                      display: 'none',
                    },
                    mb: 2
                  }}
                >
                  <AccordionSummary 
                    expandIcon={<ExpandMoreIcon />}
                    sx={{ 
                      background: alpha(theme.palette.primary.main, 0.05),
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <WorkOutlineIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
                      <Typography variant="subtitle1" fontWeight={600}>
                        Experience Improvements
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails sx={{ p: 3 }}>
                    {tailoringData?.experienceImprovements?.length > 0 ? (
                      tailoringData.experienceImprovements.map((exp, index) => (
                        <Box key={index} sx={{ mb: 3 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <BusinessIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
                            <Typography variant="subtitle1" fontWeight={600}>
                              {exp.company} - {exp.position}
                            </Typography>
                          </Box>
                          <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                              <Card 
                                variant="outlined" 
                                sx={{ 
                                  mb: 2,
                                  borderRadius: 2,
                                  borderColor: theme.palette.divider,
                                  boxShadow: 'none'
                                }}
                              >
                                <CardHeader 
                                  title="Original Bullet Points" 
                                  titleTypographyProps={{ 
                                    variant: 'subtitle2', 
                                    fontWeight: 600,
                                    color: theme.palette.text.primary
                                  }} 
                                  sx={{ 
                                    p: 2, 
                                    pb: 1.5,
                                    backgroundColor: alpha(theme.palette.primary.main, 0.05)
                                  }}
                                />
                                <CardContent sx={{ p: 2 }}>
                                  <List dense disablePadding>
                                    {exp.original.map((bullet, i) => (
                                      <ListItem key={i} sx={{ px: 1, py: 0.5 }}>
                                        <ListItemIcon sx={{ minWidth: 32 }}>
                                          <FormatListBulletedIcon fontSize="small" color="action" />
                                        </ListItemIcon>
                                        <ListItemText 
                                          primary={bullet} 
                                          primaryTypographyProps={{ 
                                            variant: 'body2',
                                            color: 'text.secondary' 
                                          }} 
                                        />
                                      </ListItem>
                                    ))}
                                  </List>
                                </CardContent>
                              </Card>
                            </Grid>
                            <Grid item xs={12} md={6}>
                              <Card 
                                variant="outlined" 
                                sx={{ 
                                  mb: 2,
                                  borderRadius: 2,
                                  borderColor: theme.palette.success.main,
                                  backgroundColor: alpha(theme.palette.success.main, 0.05),
                                  boxShadow: 'none'
                                }}
                              >
                                <CardHeader 
                                  title="Tailored Bullet Points" 
                                  titleTypographyProps={{ 
                                    variant: 'subtitle2', 
                                    fontWeight: 600,
                                    color: theme.palette.text.primary
                                  }} 
                                  sx={{ 
                                    p: 2, 
                                    pb: 1.5,
                                    backgroundColor: alpha(theme.palette.success.main, 0.12),
                                    borderBottom: `1px solid ${alpha(theme.palette.success.main, 0.2)}`
                                  }}
                                />
                                <CardContent sx={{ p: 2 }}>
                                  <List dense disablePadding>
                                    {exp.tailored.map((bullet, i) => (
                                      <ListItem key={i} sx={{ px: 1, py: 0.5 }}>
                                        <ListItemIcon sx={{ minWidth: 32 }}>
                                          <CheckCircleIcon fontSize="small" color="success" />
                                        </ListItemIcon>
                                        <ListItemText 
                                          primary={bullet} 
                                          primaryTypographyProps={{ 
                                            variant: 'body2',
                                            color: 'text.secondary'  
                                          }} 
                                        />
                                      </ListItem>
                                    ))}
                                  </List>
                                </CardContent>
                              </Card>
                            </Grid>
                          </Grid>
                          {index < tailoringData.experienceImprovements.length - 1 && <Divider sx={{ my: 3 }} />}
                        </Box>
                      ))
                    ) : (
                      <Alert severity="info" sx={{ borderRadius: 2 }}>
                        No experience improvements recommended.
                      </Alert>
                    )}
                  </AccordionDetails>
                </Accordion>
              </Grid>
              
              {/* Skills Improvements */}
              <Grid item xs={12}>
                <Accordion 
                  defaultExpanded
                  sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    boxShadow: 'none',
                    border: `1px solid ${theme.palette.divider}`,
                    '&:before': {
                      display: 'none',
                    },
                    mb: 2
                  }}
                >
                  <AccordionSummary 
                    expandIcon={<ExpandMoreIcon />}
                    sx={{ 
                      background: alpha(theme.palette.primary.main, 0.05),
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <CropFreeIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
                      <Typography variant="subtitle1" fontWeight={600}>
                        Skills Recommendations
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails sx={{ p: 3 }}>
                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <Typography variant="subtitle2" fontWeight={600} gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                          <LightbulbIcon fontSize="small" sx={{ mr: 1, color: theme.palette.primary.main }} />
                          Skills to Add
                        </Typography>
                        <Card 
                          variant="outlined" 
                          sx={{ 
                            p: 2, 
                            borderRadius: 2,
                            borderColor: theme.palette.primary.main,
                            backgroundColor: alpha(theme.palette.primary.main, 0.05)
                          }}
                        >
                          {tailoringData?.skillsImprovements?.skillsToAdd?.length > 0 ? (
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                              {tailoringData.skillsImprovements.skillsToAdd.map((skill, index) => (
                                <Chip 
                                  key={index} 
                                  label={skill} 
                                  color="primary"
                                  variant="outlined"
                                  sx={{ borderRadius: 6 }}
                                />
                              ))}
                            </Box>
                          ) : (
                            <Typography variant="body2" color="text.secondary">
                              No additional skills recommended.
                            </Typography>
                          )}
                        </Card>
                      </Grid>
                      <Grid item xs={12} md={6}>
                        <Typography variant="subtitle2" fontWeight={600} gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                          <CheckCircleIcon fontSize="small" sx={{ mr: 1, color: theme.palette.success.main }} />
                          Skills to Emphasize
                        </Typography>
                        <Card 
                          variant="outlined" 
                          sx={{ 
                            p: 2, 
                            borderRadius: 2,
                            borderColor: theme.palette.success.main,
                            backgroundColor: alpha(theme.palette.success.main, 0.05)
                          }}
                        >
                          {tailoringData?.skillsImprovements?.skillsToEmphasize?.length > 0 ? (
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                              {tailoringData.skillsImprovements.skillsToEmphasize.map((skill, index) => (
                                <Chip 
                                  key={index} 
                                  label={skill} 
                                  color="success"
                                  variant="outlined"
                                  sx={{ borderRadius: 6 }}
                                />
                              ))}
                            </Box>
                          ) : (
                            <Typography variant="body2" color="text.secondary">
                              No skills to emphasize recommended.
                            </Typography>
                          )}
                        </Card>
                      </Grid>
                    </Grid>
                  </AccordionDetails>
                </Accordion>
              </Grid>
              
              {/* Keyword Suggestions */}
              <Grid item xs={12}>
                <Accordion 
                  defaultExpanded
                  sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    boxShadow: 'none',
                    border: `1px solid ${theme.palette.divider}`,
                    '&:before': {
                      display: 'none',
                    },
                    mb: 2
                  }}
                >
                  <AccordionSummary 
                    expandIcon={<ExpandMoreIcon />}
                    sx={{ 
                      background: alpha(theme.palette.primary.main, 0.05),
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <KeyboardIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
                      <Typography variant="subtitle1" fontWeight={600}>
                        Keyword Suggestions
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails sx={{ p: 3 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Including these keywords will boost your resume's ATS compatibility and relevance for this job:
                    </Typography>
                    {tailoringData?.keywordSuggestions?.length > 0 ? (
                      <Box sx={{ 
                        display: 'flex', 
                        flexWrap: 'wrap', 
                        gap: 1,
                        mt: 2,
                        '& .MuiChip-root': {
                          borderRadius: 6
                        }
                      }}>
                        {tailoringData.keywordSuggestions.map((keyword, index) => (
                          <Chip 
                            key={index} 
                            label={keyword} 
                            color="info"
                            variant="outlined"
                          />
                        ))}
                      </Box>
                    ) : (
                      <Alert severity="info" sx={{ mt: 1, borderRadius: 2 }}>
                        No keyword suggestions available.
                      </Alert>
                    )}
                  </AccordionDetails>
                </Accordion>
              </Grid>
              
              {/* Format Suggestions */}
              <Grid item xs={12}>
                <Accordion 
                  defaultExpanded
                  sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    boxShadow: 'none',
                    border: `1px solid ${theme.palette.divider}`,
                    '&:before': {
                      display: 'none',
                    },
                    mb: 2
                  }}
                >
                  <AccordionSummary 
                    expandIcon={<ExpandMoreIcon />}
                    sx={{ 
                      background: alpha(theme.palette.primary.main, 0.05),
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <WarningIcon sx={{ mr: 1.5, color: theme.palette.warning.main }} />
                      <Typography variant="subtitle1" fontWeight={600}>
                        Format Suggestions
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails sx={{ p: 3 }}>
                    {tailoringData?.formatSuggestions?.length > 0 ? (
                      <List sx={{ bgcolor: alpha(theme.palette.warning.main, 0.05), borderRadius: 2, p: 2 }}>
                        {tailoringData.formatSuggestions.map((suggestion, index) => (
                          <ListItem key={index} sx={{ px: 1, py: 0.5 }}>
                            <ListItemIcon>
                              <WarningIcon color="warning" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={suggestion} 
                              primaryTypographyProps={{ color: 'text.secondary' }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    ) : (
                      <Alert severity="info" sx={{ borderRadius: 2 }}>
                        No format suggestions available.
                      </Alert>
                    )}
                  </AccordionDetails>
                </Accordion>
              </Grid>
              
              {/* General Advice */}
              <Grid item xs={12}>
                <Card 
                  sx={{ 
                    borderRadius: 2,
                    border: `1px solid ${theme.palette.divider}`,
                    boxShadow: 'none'
                  }}
                >
                  <CardHeader 
                    title="General Advice" 
                    avatar={<InfoIcon color="primary" />}
                    titleTypographyProps={{ fontWeight: 600 }}
                    sx={{ 
                      p: 2, 
                      pb: 1.5,
                      backgroundColor: alpha(theme.palette.primary.main, 0.05)
                    }}
                  />
                  <CardContent sx={{ p: 2 }}>
                    <Typography variant="body2" color="text.secondary">
                      {tailoringData?.generalAdvice || "No general advice available."}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Box>
        );
      
      case 2:
        return (
          <Box sx={{ my: 2 }}>
            <Typography variant="h6" fontWeight={500} gutterBottom>
              Create Tailored Resume
            </Typography>
            
            <Typography variant="body1" paragraph color="text.secondary">
              Based on the recommendations, we'll create a tailored version of your resume 
              specifically optimized for this job. The AI will apply all the suggested improvements.
            </Typography>
            
            <Box sx={{ 
              mt: 3, 
              p: 2.5, 
              bgcolor: alpha(theme.palette.info.main, 0.1), 
              borderRadius: 2, 
              display: 'flex', 
              alignItems: 'flex-start',
              border: `1px solid ${alpha(theme.palette.info.main, 0.3)}`
            }}>
              <SmartToyIcon sx={{ mr: 2, color: theme.palette.info.main, mt: 0.5 }} />
              <Typography variant="body2" color="text.secondary">
                This will create a new resume in your collection with the AI recommended improvements applied.
                Your original resume will remain unchanged.
              </Typography>
            </Box>
            
            <Typography variant="subtitle2" fontWeight={600} color="text.secondary" sx={{ mt: 3, mb: 1 }}>
              Resume Name
            </Typography>
            <TextField
              variant="outlined"
              fullWidth
              value={versionName}
              onChange={(e) => setVersionName(e.target.value)}
              placeholder="Enter a name for your tailored resume"
              size="medium"
              sx={{ 
                mb: 3,
                '& .MuiOutlinedInput-root': {
                  borderRadius: 2
                }
              }}
            />
            
            <Typography variant="subtitle2" fontWeight={600} color="text.secondary" sx={{ mb: 1 }}>
              Notes (Optional)
            </Typography>
            <TextField
              variant="outlined"
              fullWidth
              multiline
              rows={3}
              value={versionNotes}
              onChange={(e) => setVersionNotes(e.target.value)}
              placeholder="Add any notes about this tailored version..."
              sx={{ 
                '& .MuiOutlinedInput-root': {
                  borderRadius: 2
                }
              }}
            />
          </Box>
        );
      
      default:
        return null;
    }
  };

  if (loading && activeStep === 0) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(`/jobs/${jobId}`)}
            sx={{ mb: 4 }}
            variant="outlined"
          >
            Back to Job
          </Button>
          
          <Paper sx={{ p: 4, borderRadius: 3 }}>
            <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
              {steps.map((label) => (
                <Step key={label}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
            
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
              <Typography variant="h6" gutterBottom fontWeight={500}>
                Analyzing Resume Match
              </Typography>
              <CircularProgress size={60} thickness={4} sx={{ my: 4 }} />
              <Typography variant="body1" color="text.secondary">
                Please wait while we analyze your resume against the job requirements...
              </Typography>
            </Box>
          </Paper>
        </Box>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(`/jobs/${jobId}`)}
            sx={{ mb: 2 }}
            variant="outlined"
          >
            Back to Job
          </Button>
          
          <Alert severity="error" sx={{ mb: 2, borderRadius: 2 }}>
            {error}
          </Alert>
          
          <Button 
            variant="contained" 
            color="primary"
            onClick={fetchData}
          >
            Try Again
          </Button>
        </Box>
      </MainLayout>
    );
  }

  if (!job || !resume || !tailoringData) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(`/jobs/${jobId}`)}
            sx={{ mb: 2 }}
            variant="outlined"
          >
            Back to Job
          </Button>
          
          <Alert severity="info" sx={{ borderRadius: 2 }}>
            Unable to load tailoring data. Please try again.
          </Alert>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <Box sx={{ p: 3, maxWidth: '1200px', mx: 'auto' }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate(`/jobs/${jobId}`)}
          sx={{ mb: 2 }}
          variant="outlined"
        >
          Back to Job
        </Button>
        
        <Paper sx={{ p: 4, mb: 3, borderRadius: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
            <Box>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Tailor Resume for {job.title}
              </Typography>
              <Typography variant="subtitle1" color="text.secondary">
                {job.company}
              </Typography>
            </Box>
            <Box>
              <Chip 
                label={`Match Score: ${job.matchAnalysis?.overallScore || 0}%`}
                color={getScoreColor(job.matchAnalysis?.overallScore || 0)}
                sx={{ fontWeight: 500, borderRadius: 6, height: 36 }}
              />
            </Box>
          </Box>
          
          <Stepper 
            activeStep={activeStep} 
            sx={{ 
              mb: 4,
              '& .MuiStepLabel-root': {
                '& .MuiStepLabel-iconContainer': {
                  '& .MuiStepIcon-root': {
                    '&.Mui-active': {
                      color: theme.palette.primary.main,
                    },
                    '&.Mui-completed': {
                      color: theme.palette.success.main,
                    },
                  },
                },
              },
            }}
          >
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel>{label}</StepLabel>
              </Step>
            ))}
          </Stepper>
          
          {renderStepContent(activeStep)}
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4, pt: 2, borderTop: `1px solid ${theme.palette.divider}` }}>
            <Button
              variant="outlined"
              onClick={() => navigate(`/jobs/${jobId}`)}
              sx={{ mr: 1, borderRadius: 2 }}
            >
              Cancel
            </Button>
            
            <Box>
              {activeStep === 2 && (
                <Button
                  variant="outlined"
                  onClick={handleBack}
                  startIcon={<ArrowBackIcon />}
                  sx={{ mr: 1, borderRadius: 2 }}
                  disabled={loading || tailoringSaving}
                >
                  Back to Recommendations
                </Button>
              )}
              
              {activeStep < steps.length - 1 ? (
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleNext}
                  disabled={loading || activeStep === 0}
                  sx={{ borderRadius: 2 }}
                >
                  Next
                </Button>
              ) : (
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleSaveTailoredResume}
                  startIcon={tailoringSaving ? <CircularProgress size={20} color="inherit" /> : <SaveIcon />}
                  disabled={tailoringSaving}
                  sx={{ borderRadius: 2, px: 3 }}
                >
                  {tailoringSaving ? 'Creating...' : 'Create Tailored Resume'}
                </Button>
              )}
            </Box>
          </Box>
        </Paper>
      </Box>
      
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseSnackbar} 
          severity={snackbar.severity} 
          sx={{ width: '100%', borderRadius: 2 }}
          variant="filled"
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </MainLayout>
  );
};

// Helper function to get color based on score
const getScoreColor = (score) => {
  if (score >= 80) return 'success';
  if (score >= 60) return 'warning';
  return 'error';
};

export default ResumeTailoring;

================
File: src/components/jobs/tabs/AnalysisTab.js
================
// src/components/jobs/tabs/AnalysisTab.js
import React from 'react';
import {
  Grid,
  Card,
  CardHeader,
  CardContent,
  Typography,
  Button,
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
  CircularProgress,
  Stack,
  Chip,
  Tooltip,
  useTheme,
  Paper
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  SmartToy as SmartToyIcon,
  Lightbulb as LightbulbIcon,
  Code as CodeIcon,
  Speed as SpeedIcon,
  AutoAwesome as AutoAwesomeIcon,
  Analytics as AnalyticsIcon,
  TrendingUp as TrendingUpIcon
} from '@mui/icons-material';

import SkillChip from '../components/SkillChip';
import AutoJobLogo from '../../common/AutoJobLogo';

const AnalysisTab = ({ job, onTailorClick }) => {
  const theme = useTheme();

  // Safe AutoJobLogo wrapper component that handles the proper props
  const SafeAutoJobLogo = ({ iconSize = 'small' }) => {
    try {
      return (
        <AutoJobLogo 
          variant="icon-only" 
          size={iconSize} 
          showTagline={false}
        />
      );
    } catch (error) {
      // Fallback to SmartToy icon if AutoJobLogo fails
      console.warn('AutoJobLogo failed to render:', error);
      return <SmartToyIcon sx={{ fontSize: iconSize === 'small' ? 16 : 20 }} />;
    }
  };

  const getScoreColor = (score) => {
    if (score >= 85) return 'success';
    if (score >= 70) return 'info';
    if (score >= 55) return 'warning';
    return 'error';
  };

  const COLORS = [
    theme.palette.primary.main, 
    theme.palette.secondary.main, 
    theme.palette.success.main, 
    theme.palette.warning.main, 
    theme.palette.error.main,
    theme.palette.info.main
  ];

  if (!job.matchAnalysis?.overallScore) {
    return (
      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'column', 
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '50vh',
        textAlign: 'center',
        px: 3,
        py: 6
      }}>
        {/* Main Icon Container with Diamond */}
        <Box sx={{ 
          mb: 3,
          position: 'relative',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}>
          {/* Background Circle with Gradient */}
          <Box
            sx={{
              width: 80,
              height: 80,
              background: `linear-gradient(135deg, ${theme.palette.primary.main}15 0%, ${theme.palette.secondary.main}15 100%)`,
              borderRadius: 3, // Using theme's borderRadius
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              border: `2px solid ${theme.palette.primary.main}20`,
              position: 'relative',
              boxShadow: `0px 4px 8px ${theme.palette.primary.main}20`,
            }}
          >
            <AutoAwesomeIcon sx={{ 
              fontSize: 32, 
              color: theme.palette.primary.main
            }} />
          </Box>
        </Box>

        {/* Title with Theme Typography */}
        <Typography 
          variant="h5" 
          gutterBottom 
          fontWeight={600}
          sx={{ 
            color: theme.palette.text.primary,
            mb: 1
          }}
        >
          No Match Analysis Available
        </Typography>
        
        {/* Subtitle */}
        <Typography 
          variant="body1" 
          sx={{ 
            color: theme.palette.text.secondary,
            mb: 4,
            maxWidth: 500,
            lineHeight: 1.5
          }}
        >
          Get detailed insights by matching your resume with this job. Our enhanced AI will provide:
        </Typography>

        {/* Features List in Card */}
        <Paper 
          elevation={1}
          sx={{ 
            maxWidth: 480, 
            mb: 4,
            p: 3,
            borderRadius: 3, // Using theme's enhanced borderRadius
            bgcolor: theme.palette.background.paper,
            border: `1px solid ${theme.palette.divider}`
          }}
        >
          <List dense sx={{ '& .MuiListItem-root': { py: 0.75 } }}>
            <ListItem sx={{ px: 0 }}>
              <ListItemIcon sx={{ minWidth: 36 }}>
                <CheckCircleIcon color="primary" fontSize="small" />
              </ListItemIcon>
              <ListItemText 
                primary="Precise skill matching with importance weighting"
                primaryTypographyProps={{ 
                  variant: 'body2', 
                  fontWeight: 500,
                  color: theme.palette.text.primary
                }}
              />
            </ListItem>
            <ListItem sx={{ px: 0 }}>
              <ListItemIcon sx={{ minWidth: 36 }}>
                <TrendingUpIcon color="primary" fontSize="small" />
              </ListItemIcon>
              <ListItemText 
                primary="Experience level compatibility analysis"
                primaryTypographyProps={{ 
                  variant: 'body2', 
                  fontWeight: 500,
                  color: theme.palette.text.primary
                }}
              />
            </ListItem>
            <ListItem sx={{ px: 0 }}>
              <ListItemIcon sx={{ minWidth: 36 }}>
                <LightbulbIcon color="primary" fontSize="small" />
              </ListItemIcon>
              <ListItemText 
                primary="Personalized recommendations for improvement"
                primaryTypographyProps={{ 
                  variant: 'body2', 
                  fontWeight: 500,
                  color: theme.palette.text.primary
                }}
              />
            </ListItem>
          </List>
        </Paper>

        {/* CTA Button with Theme Styling */}
        <Button
          variant="contained"
          size="large"
          onClick={onTailorClick}
          startIcon={<SafeAutoJobLogo iconSize="small" />}
          sx={{ 
            borderRadius: 2, // Using theme's borderRadius
            px: 4,
            py: 1.2,
            fontSize: '0.95rem',
            fontWeight: 600,
            bgcolor: theme.palette.secondary.main,
            color: theme.palette.secondary.contrastText,
            boxShadow: theme.shadows[3],
            '&:hover': {
              bgcolor: theme.palette.secondary.dark,
              boxShadow: theme.shadows[6],
              transform: 'translateY(-1px)'
            },
            transition: 'all 0.2s ease'
          }}
        >
          Start Enhanced Analysis
        </Button>

        {/* Bottom Helper Text */}
        <Typography 
          variant="caption" 
          sx={{ 
            color: theme.palette.text.disabled,
            mt: 3,
            maxWidth: 400
          }}
        >
          Our AI will analyze your resume against this job posting to provide detailed compatibility scores and improvement suggestions.
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={3}>
      {/* Detailed Match Breakdown */}
      <Grid item xs={12}>
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
          <CardHeader 
            title="Detailed Match Analysis" 
            avatar={<SpeedIcon color="primary" />}
            action={
              <Stack direction="row" spacing={1}>
                <Chip 
                  label={`Analyzed ${new Date(job.matchAnalysis.lastAnalyzed || Date.now()).toLocaleDateString()}`} 
                  size="small" 
                  color="secondary"
                  variant="outlined"
                />
              </Stack>
            }
            sx={{ 
              '& .MuiCardHeader-title': { fontWeight: 600 } 
            }}
          />
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} md={4}>
                <Box sx={{ textAlign: 'center', p: 3, border: '1px solid', borderColor: 'divider', borderRadius: 3, height: '100%' }}>
                  <Box sx={{ mb: 2 }}>
                    <CircularProgress
                      variant="determinate"
                      value={job.matchAnalysis.categoryScores?.skills || 0}
                      size={80}
                      thickness={6}
                      sx={{ 
                        color: theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.skills || 0)].main,
                        mb: 1
                      }}
                    />
                  </Box>
                  <Typography variant="h5" fontWeight={600} color={theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.skills || 0)].main}>
                    {job.matchAnalysis.categoryScores?.skills || 0}%
                  </Typography>
                  <Typography variant="subtitle1" fontWeight={500} color="primary.main">
                    Skills Match
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                    {job.matchAnalysis.matchedSkills?.filter(s => s.found).length || 0} of {job.matchAnalysis.matchedSkills?.length || 0} skills matched
                  </Typography>
                  
                  {/* Skills breakdown */}
                  {job.matchAnalysis.matchedSkills && (
                    <Box sx={{ mt: 2 }}>
                      <Stack direction="row" spacing={1} justifyContent="center">
                        <Chip 
                          label={`${job.matchAnalysis.matchedSkills.filter(s => s.found && s.matchQuality === 'exact').length} exact`}
                          size="small"
                          color="success"
                        />
                        <Chip 
                          label={`${job.matchAnalysis.matchedSkills.filter(s => s.found && s.matchQuality === 'partial').length} partial`}
                          size="small"
                          color="warning"
                        />
                      </Stack>
                    </Box>
                  )}
                </Box>
              </Grid>
              
              <Grid item xs={12} md={4}>
                <Box sx={{ textAlign: 'center', p: 3, border: '1px solid', borderColor: 'divider', borderRadius: 3, height: '100%' }}>
                  <Box sx={{ mb: 2 }}>
                    <CircularProgress
                      variant="determinate"
                      value={job.matchAnalysis.categoryScores?.experience || 0}
                      size={80}
                      thickness={6}
                      sx={{ 
                        color: theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.experience || 0)].main,
                        mb: 1
                      }}
                    />
                  </Box>
                  <Typography variant="h5" fontWeight={600} color={theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.experience || 0)].main}>
                    {job.matchAnalysis.categoryScores?.experience || 0}%
                  </Typography>
                  <Typography variant="subtitle1" fontWeight={500} color="primary.main">
                    Experience Match
                  </Typography>
                  
                  {/* Enhanced experience details */}
                  {job.matchAnalysis.experienceAnalysis ? (
                    <Box sx={{ mt: 1 }}>
                      <Typography variant="body2" color="text.secondary">
                        {job.matchAnalysis.experienceAnalysis.relevantYearsExperience || 0} years relevant
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {job.matchAnalysis.experienceAnalysis.seniorityMatch && 
                          `${job.matchAnalysis.experienceAnalysis.seniorityMatch} level`}
                      </Typography>
                    </Box>
                  ) : (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Experience level alignment
                    </Typography>
                  )}
                </Box>
              </Grid>
              
              <Grid item xs={12} md={4}>
                <Box sx={{ textAlign: 'center', p: 3, border: '1px solid', borderColor: 'divider', borderRadius: 3, height: '100%' }}>
                  <Box sx={{ mb: 2 }}>
                    <CircularProgress
                      variant="determinate"
                      value={job.matchAnalysis.categoryScores?.education || 0}
                      size={80}
                      thickness={6}
                      sx={{ 
                        color: theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.education || 0)].main,
                        mb: 1
                      }}
                    />
                  </Box>
                  <Typography variant="h5" fontWeight={600} color={theme.palette[getScoreColor(job.matchAnalysis.categoryScores?.education || 0)].main}>
                    {job.matchAnalysis.categoryScores?.education || 0}%
                  </Typography>
                  <Typography variant="subtitle1" fontWeight={500} color="primary.main">
                    Education Match
                  </Typography>
                  
                  {/* Enhanced education details */}
                  {job.matchAnalysis.educationAnalysis ? (
                    <Box sx={{ mt: 1 }}>
                      <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                        {job.matchAnalysis.educationAnalysis.degreeMatch} requirements
                      </Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                        {job.matchAnalysis.educationAnalysis.fieldAlignment} field alignment
                      </Typography>
                    </Box>
                  ) : (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Education requirements met
                    </Typography>
                  )}
                </Box>
              </Grid>
            </Grid>
            
            <Box sx={{ 
              mt: 3, 
              p: 2, 
              bgcolor: `${theme.palette.info.main}10`, 
              borderRadius: 2,
              border: `1px solid ${theme.palette.info.main}20`,
              display: 'flex',
              alignItems: 'flex-start'
            }}>
              <AnalyticsIcon color="info" sx={{ mr: 1.5, mt: 0.5 }} />
              <Box>
                <Typography variant="body2" paragraph>
                  Our enhanced AI matching algorithm analyzes your resume against this job using advanced NLP and semantic understanding. 
                  Scores are weighted: Skills (40%), Experience (35%), Education (25%).
                </Typography>
              </Box>
            </Box>
          </CardContent>
        </Card>
      </Grid>
      
      {/* Enhanced Skills Analysis */}
      <Grid item xs={12} md={6}>
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3, height: 'fit-content' }}>
          <CardHeader 
            title="Skills Analysis" 
            avatar={<CodeIcon color="primary" />}
            sx={{ 
              '& .MuiCardHeader-title': { fontWeight: 600 } 
            }}
          />
          <CardContent>
            <Typography variant="subtitle1" fontWeight={600} gutterBottom sx={{ 
              color: theme.palette.success.main, 
              display: 'flex', 
              alignItems: 'center' 
            }}>
              <CheckCircleIcon sx={{ mr: 1 }} /> Matched Skills ({job.matchAnalysis.matchedSkills?.filter(s => s.found).length || 0})
            </Typography>
            
            {job.matchAnalysis.matchedSkills && job.matchAnalysis.matchedSkills.filter(s => s.found).length > 0 ? (
              <Box sx={{ 
                display: 'flex', 
                flexWrap: 'wrap', 
                gap: 1, 
                mb: 3,
                p: 2,
                bgcolor: `${theme.palette.success.main}08`,
                borderRadius: 2
              }}>
                {job.matchAnalysis.matchedSkills && job.matchAnalysis.matchedSkills.filter(s => s && s.found).map((skill, index) => (
                  <SkillChip
                    key={`matched-skill-${index}`}
                    skill={skill}
                    isMatched={true}
                    importance={skill && typeof skill === 'object' ? skill.importance : undefined}
                    matchQuality={skill && typeof skill === 'object' ? skill.matchQuality : undefined}
                  />
                ))}
              </Box>
            ) : (
              <Alert severity="info" sx={{ mb: 3, borderRadius: 2 }}>
                No matching skills found.
              </Alert>
            )}

            <Typography variant="subtitle1" fontWeight={600} gutterBottom sx={{ 
              color: theme.palette.warning.main, 
              display: 'flex', 
              alignItems: 'center',
              mt: 4
            }}>
              <WarningIcon sx={{ mr: 1 }} /> Missing Skills ({job.matchAnalysis.missingSkills?.length || 0})
            </Typography>
            
            {job.matchAnalysis.missingSkills && job.matchAnalysis.missingSkills.length > 0 ? (
              <Box sx={{ 
                display: 'flex', 
                flexWrap: 'wrap', 
                gap: 1,
                p: 2,
                bgcolor: `${theme.palette.warning.main}08`,
                borderRadius: 2
              }}>
                {job.matchAnalysis.missingSkills && job.matchAnalysis.missingSkills.map((skill, index) => (
                  <SkillChip
                    key={`missing-skill-${index}`}
                    skill={skill}
                    isMatched={false}
                    importance={skill && typeof skill === 'object' ? skill.importance : undefined}
                  />
                ))}
              </Box>
            ) : (
              <Alert severity="success" sx={{ borderRadius: 2 }}>
                Excellent! No missing skills identified. Your resume includes all required skills.
              </Alert>
            )}
          </CardContent>
        </Card>
      </Grid>

      {/* Enhanced Improvement Suggestions */}
      <Grid item xs={12} md={6}>
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3, height: 'fit-content' }}>
          <CardHeader 
            title="AI Recommendations" 
            avatar={<LightbulbIcon color="primary" />}
            sx={{ 
              '& .MuiCardHeader-title': { fontWeight: 600 } 
            }}
          />
          <CardContent>
            {job.matchAnalysis.improvementSuggestions && job.matchAnalysis.improvementSuggestions.length > 0 ? (
              <List sx={{ p: 0 }}>
                {job.matchAnalysis.improvementSuggestions.map((suggestion, index) => (
                  <ListItem key={index} sx={{ 
                    backgroundColor: `${theme.palette.info.main}08`, 
                    borderRadius: 2, 
                    mb: 2,
                    px: 2,
                    alignItems: 'flex-start'
                  }}>
                    <ListItemIcon>
                      <LightbulbIcon color="info" />
                    </ListItemIcon>
                    <ListItemText 
                      primary={suggestion}
                      primaryTypographyProps={{ variant: 'body2' }}
                    />
                  </ListItem>
                ))}
              </List>
            ) : (
              <Alert severity="success" sx={{ borderRadius: 2 }}>
                Great! No major improvements needed. Your resume looks excellent for this job.
              </Alert>
            )}

            <Box sx={{ mt: 3 }}>
              <Button
                variant="contained"
                color="secondary"
                startIcon={<SafeAutoJobLogo iconSize="small" />}
                onClick={onTailorClick}
                fullWidth
                sx={{ borderRadius: 2, py: 1.2 }}
              >
                Get Tailored Resume
              </Button>
            </Box>
          </CardContent>
        </Card>
      </Grid>
      
      {/* Enhanced Keywords Section */}
      <Grid item xs={12}>
        <Card elevation={2} sx={{ borderRadius: 3 }}>
          <CardHeader 
            title="Keyword Optimization" 
            avatar={<LightbulbIcon color="primary" />}
            sx={{ 
              pb: 1, 
              '& .MuiCardHeader-title': { fontWeight: 600 } 
            }}
          />
          <CardContent>
            <Typography variant="body2" color="text.secondary" paragraph>
              These keywords will boost your ATS compatibility and match score for this position:
            </Typography>
            
            <Box sx={{ 
              display: 'flex', 
              flexWrap: 'wrap', 
              gap: 1.5,
              '& .MuiChip-root': {
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateY(-2px)',
                  boxShadow: 2
                }
              }
            }}>
              {job.matchAnalysis.missingSkills && job.matchAnalysis.missingSkills.map((skill, index) => {
                // Extract skill name safely
                const skillName = skill && typeof skill === 'object' ? 
                  (skill.name || skill.skill || 'Unknown Skill') : 
                  (typeof skill === 'string' ? skill : 'Unknown Skill');
                
                const importance = skill && typeof skill === 'object' ? skill.importance : 5;
                const category = skill && typeof skill === 'object' ? (skill.category || 'required') : 'required';
                
                return (
                  <Tooltip 
                    key={`keyword-skill-${index}`}
                    title={`Importance: ${importance}/10 | ${category}`}
                  >
                    <Chip 
                      label={skillName} 
                      sx={{ 
                        bgcolor: COLORS[index % COLORS.length] + '20',
                        color: COLORS[index % COLORS.length],
                        fontWeight: 500,
                        borderRadius: 2,
                        border: `1px solid ${COLORS[index % COLORS.length]}40`,
                        '&:hover': {
                          bgcolor: COLORS[index % COLORS.length] + '30',
                        }
                      }} 
                    />
                  </Tooltip>
                );
              })}
            </Box>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default AnalysisTab;

================
File: src/components/jobs/tabs/ContentTab.js
================
// src/components/jobs/tabs/ContentTab.js
import React from 'react';
import {
  Grid,
  Card,
  CardHeader,
  CardContent,
  Typography,
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Description as DescriptionIcon,
  Work as WorkIcon,
  Assignment as AssignmentIcon,
  Code as CodeIcon,
  Person as PersonIcon
} from '@mui/icons-material';

const ContentTab = ({ job }) => {
  return (
    <>
      <Card elevation={2} sx={{ borderRadius: 3, mb: 3 }}>
        <CardHeader 
          title="Full Job Description" 
          avatar={<DescriptionIcon color="primary" />}
          sx={{ 
            '& .MuiCardHeader-title': { fontWeight: 600 } 
          }}
        />
        <CardContent>
          <Typography variant="body1" component="div" sx={{ whiteSpace: 'pre-line', lineHeight: 1.7 }}>
            {job.description}
          </Typography>
        </CardContent>
      </Card>
      
      {job.parsedData && (
        <Grid container spacing={3}>
          {job.parsedData.responsibilities && job.parsedData.responsibilities.length > 0 && (
            <Grid item xs={12} md={6}>
              <Card elevation={2} sx={{ borderRadius: 3, height: '100%' }}>
                <CardHeader 
                  title={`Key Responsibilities (${job.parsedData.responsibilities.length})`}
                  avatar={<WorkIcon color="primary" />}
                  sx={{ 
                    '& .MuiCardHeader-title': { fontWeight: 600 } 
                  }}
                />
                <CardContent>
                  <List>
                    {job.parsedData.responsibilities.map((resp, index) => (
                      <ListItem key={index} sx={{ py: 0.5, alignItems: 'flex-start' }}>
                        <ListItemIcon sx={{ minWidth: 28, mt: 0.5 }}>
                          <CheckCircleIcon fontSize="small" color="primary" />
                        </ListItemIcon>
                        <ListItemText 
                          primary={resp}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          )}
          
          {job.parsedData.requirements && job.parsedData.requirements.length > 0 && (
            <Grid item xs={12} md={6}>
              <Card elevation={2} sx={{ borderRadius: 3, height: '100%' }}>
                <CardHeader 
                  title={`Requirements (${job.parsedData.requirements.length})`}
                  avatar={<AssignmentIcon color="primary" />}
                  sx={{ 
                    '& .MuiCardHeader-title': { fontWeight: 600 } 
                  }}
                />
                <CardContent>
                  <List>
                    {job.parsedData.requirements.map((req, index) => (
                      <ListItem key={index} sx={{ py: 0.5, alignItems: 'flex-start' }}>
                        <ListItemIcon sx={{ minWidth: 28, mt: 0.5 }}>
                          <CheckCircleIcon fontSize="small" color="primary" />
                        </ListItemIcon>
                        <ListItemText 
                          primary={req}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          )}

          {/* Enhanced Technical Details */}
          {(job.parsedData.technicalSkills || job.parsedData.toolsAndTechnologies) && (
            <Grid item xs={12} md={6}>
              <Card elevation={2} sx={{ borderRadius: 3, height: '100%' }}>
                <CardHeader 
                  title="Technical Requirements"
                  avatar={<CodeIcon color="primary" />}
                  sx={{ 
                    '& .MuiCardHeader-title': { fontWeight: 600 } 
                  }}
                />
                <CardContent>
                  {job.parsedData.technicalSkills && job.parsedData.technicalSkills.length > 0 && (
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom color="primary">
                        Technical Skills:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                        {job.parsedData.technicalSkills && job.parsedData.technicalSkills.map((skill, index) => {
                          // Extract skill name safely
                          const skillName = skill && typeof skill === 'object' ? 
                            (skill.name || skill.skill || 'Unknown Skill') : 
                            (typeof skill === 'string' ? skill : 'Unknown Skill');
                          
                          return (
                            <Chip 
                              key={`tech-skill-${index}`} 
                              label={skillName} 
                              size="small" 
                              color="primary"
                              variant="outlined"
                            />
                          );
                        })}
                      </Box>
                    </Box>
                  )}
                  
                  {job.parsedData.toolsAndTechnologies && job.parsedData.toolsAndTechnologies.length > 0 && (
                    <Box>
                      <Typography variant="subtitle2" gutterBottom color="secondary">
                        Tools & Technologies:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                        {job.parsedData.toolsAndTechnologies && job.parsedData.toolsAndTechnologies.map((tool, index) => {
                          // Extract tool name safely
                          const toolName = tool && typeof tool === 'object' ? 
                            (tool.name || tool.skill || tool.tool || 'Unknown Tool') : 
                            (typeof tool === 'string' ? tool : 'Unknown Tool');
                          
                          return (
                            <Chip 
                              key={`tool-tech-${index}`} 
                              label={toolName} 
                              size="small" 
                              color="secondary"
                              variant="outlined"
                            />
                          );
                        })}
                      </Box>
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Grid>
          )}

          {/* Enhanced Soft Skills */}
          {job.parsedData.softSkills && job.parsedData.softSkills.length > 0 && (
            <Grid item xs={12} md={6}>
              <Card elevation={2} sx={{ borderRadius: 3, height: '100%' }}>
                <CardHeader 
                  title="Soft Skills & Attributes"
                  avatar={<PersonIcon color="primary" />}
                  sx={{ 
                    '& .MuiCardHeader-title': { fontWeight: 600 } 
                  }}
                />
                <CardContent>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    {job.parsedData.softSkills && job.parsedData.softSkills.map((skill, index) => {
                      // Extract skill name safely
                      const skillName = skill && typeof skill === 'object' ? 
                        (skill.name || skill.skill || 'Unknown Skill') : 
                        (typeof skill === 'string' ? skill : 'Unknown Skill');
                      
                      return (
                        <Chip 
                          key={`soft-skill-${index}`} 
                          label={skillName} 
                          size="small" 
                          color="info"
                          variant="outlined"
                        />
                      );
                    })}
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          )}
          
          {job.parsedData.benefits && job.parsedData.benefits.length > 0 && (
            <Grid item xs={12}>
              <Card elevation={2} sx={{ borderRadius: 3 }}>
                <CardHeader 
                  title={`Benefits & Perks (${job.parsedData.benefits.length})`}
                  avatar={<WorkIcon color="primary" />}
                  sx={{ 
                    '& .MuiCardHeader-title': { fontWeight: 600 } 
                  }}
                />
                <CardContent>
                  <Grid container spacing={2}>
                    {job.parsedData.benefits.map((benefit, index) => (
                      <Grid item xs={12} md={6} key={index}>
                        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                          <CheckCircleIcon color="success" sx={{ mt: 0.5, mr: 1.5 }} />
                          <Typography variant="body2">{benefit}</Typography>
                        </Box>
                      </Grid>
                    ))}
                  </Grid>
                </CardContent>
              </Card>
            </Grid>
          )}
        </Grid>
      )}
    </>
  );
};

export default ContentTab;

================
File: src/components/jobs/tabs/OverviewTab.js
================
// src/components/jobs/tabs/OverviewTab.js
import React from 'react';
import {
  Grid,
  Card,
  CardHeader,
  CardContent,
  Typography,
  Button,
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  useTheme,
  Chip
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  SmartToy as SmartToyIcon,
  Psychology as PsychologyIcon,
  Assignment as AssignmentIcon,
  School as SchoolIcon,
  Lightbulb as LightbulbIcon,
  Code as CodeIcon,
  Info as InfoIcon,
  Star as StarIcon
} from '@mui/icons-material';

// Import our component files
import JobDetailsCard from '../components/JobDetailsCard';
import MatchAnalysisCard from '../components/MatchAnalysisCard';
import SkillChip from '../components/SkillChip';
import AutoJobLogo from '../../common/AutoJobLogo';

const OverviewTab = ({ job, onTailorClick }) => {
  const theme = useTheme();

  // Safe AutoJobLogo wrapper component
  const SafeAutoJobLogo = ({ size = 'small' }) => {
    try {
      return (
        <AutoJobLogo 
          variant="icon-only" 
          size={size} 
          showTagline={false}
        />
      );
    } catch (error) {
      // Fallback to SmartToy icon if AutoJobLogo fails
      console.warn('AutoJobLogo failed to render:', error);
      return <SmartToyIcon sx={{ fontSize: size === 'small' ? 16 : 20 }} />;
    }
  };

  return (
    <Grid container spacing={3}>
      <Grid item xs={12} md={4}>
        {/* Job Details Card Component */}
        <JobDetailsCard job={job} />
        
        {/* Match Analysis Card Component */}
        <MatchAnalysisCard job={job} />
      </Grid>

      <Grid item xs={12} md={8}>
        {job.matchAnalysis?.overallScore ? (
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Match Insights & Recommendations" 
              avatar={<CheckCircleIcon color="primary" />}
              sx={{ 
                pb: 0, 
                '& .MuiCardHeader-title': { fontWeight: 600 } 
              }}
            />
            <CardContent>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    color: theme.palette.success.main,
                    fontWeight: 600
                  }}>
                    <CheckCircleIcon sx={{ mr: 1 }} /> Your Strengths
                  </Typography>
                  
                  {/* Show strengths from new enhanced matching */}
                  {job.matchAnalysis.strengthsHighlight && job.matchAnalysis.strengthsHighlight.length > 0 ? (
                    <List dense>
                      {job.matchAnalysis.strengthsHighlight.map((strength, index) => (
                        <ListItem key={index} sx={{ 
                          backgroundColor: `${theme.palette.success.main}15`, 
                          borderRadius: 2, 
                          mb: 1,
                          px: 2
                        }}>
                          <ListItemIcon>
                            <StarIcon color="success" fontSize="small" />
                          </ListItemIcon>
                          <ListItemText primary={strength} />
                        </ListItem>
                      ))}
                    </List>
                  ) : (
                    /* Fallback to matched skills */
                    <List dense>
                      {job.matchAnalysis.matchedSkills && job.matchAnalysis.matchedSkills.filter(s => s.found).length > 0 ? (
                        job.matchAnalysis.matchedSkills.filter(s => s.found).slice(0, 4).map((skill, index) => (
                          <ListItem key={index} sx={{ 
                            backgroundColor: `${theme.palette.success.main}15`, 
                            borderRadius: 2, 
                            mb: 1,
                            px: 2
                          }}>
                            <ListItemIcon>
                              <CheckCircleIcon color="success" fontSize="small" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={skill.skill} 
                              secondary={skill.matchQuality ? `${skill.matchQuality} match` : null}
                            />
                          </ListItem>
                        ))
                      ) : (
                        <ListItem>
                          <ListItemText primary="No matching skills found." />
                        </ListItem>
                      )}
                    </List>
                  )}
                </Grid>

                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    color: theme.palette.warning.main,
                    fontWeight: 600
                  }}>
                    <WarningIcon sx={{ mr: 1 }} /> Areas for Improvement
                  </Typography>
                  <List dense>
                    {job.matchAnalysis.improvementSuggestions && job.matchAnalysis.improvementSuggestions.length > 0 ? (
                      job.matchAnalysis.improvementSuggestions.slice(0, 4).map((suggestion, index) => (
                        <ListItem key={index} sx={{ 
                          backgroundColor: `${theme.palette.warning.main}15`, 
                          borderRadius: 2, 
                          mb: 1,
                          px: 2 
                        }}>
                          <ListItemIcon>
                            <LightbulbIcon color="warning" fontSize="small" />
                          </ListItemIcon>
                          <ListItemText primary={suggestion} />
                        </ListItem>
                      ))
                    ) : (
                      <ListItem>
                        <ListItemText primary="No improvement suggestions available." />
                      </ListItem>
                    )}
                  </List>
                </Grid>
              </Grid>
              
              <Box sx={{ mt: 3 }}>
                <Button
                  variant="contained"
                  color="secondary"
                  startIcon={<SafeAutoJobLogo size="small" />}
                  onClick={onTailorClick}
                  sx={{ borderRadius: 2, py: 1.2 }}
                >
                  Get Tailored Resume
                </Button>
              </Box>
            </CardContent>
          </Card>
        ) : (
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Tailor My Resume To This Job" 
              avatar={<PsychologyIcon color="primary" />}
              sx={{ 
                pb: 1, 
                '& .MuiCardHeader-title': { fontWeight: 600 } 
              }}
            />
            <CardContent sx={{ textAlign: 'center', py: 4 }}>
              <Box 
                sx={{ 
                  width: 100, 
                  height: 100, 
                  borderRadius: '50%', 
                  border: '3px dashed', 
                  borderColor: 'primary.main',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  mb: 3,
                  mx: 'auto'
                }}
              >
                <SafeAutoJobLogo size="medium" />
              </Box>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Tailor My Resume To This Job
              </Typography>
              <Typography variant="body1" paragraph sx={{ mb: 3, mx: 'auto', maxWidth: 600 }}>
                Get intelligent insights by matching your resume with this job. Our enhanced AI will analyze skills, experience, 
                and education to provide accurate compatibility scores and personalized recommendations.
              </Typography>
              <Button
                variant="contained"
                color="secondary"
                startIcon={<SafeAutoJobLogo size="small" />}
                onClick={onTailorClick}
                sx={{ borderRadius: 2, px: 3, py: 1.2 }}
              >
                Get Tailored Resume
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Enhanced Key Requirements */}
        {job.parsedData && (
          <Card elevation={2} sx={{ borderRadius: 3 }}>
            <CardHeader 
              title="Job Requirements Analysis" 
              avatar={<AssignmentIcon color="primary" />}
              sx={{ 
                '& .MuiCardHeader-title': { fontWeight: 600 } 
              }}
            />
            <CardContent>
              <Grid container spacing={3}>
                {job.parsedData.keySkills && job.parsedData.keySkills.length > 0 && (
                  <Grid item xs={12}>
                    <Typography variant="subtitle1" fontWeight={600} gutterBottom color="primary" sx={{ display: 'flex', alignItems: 'center' }}>
                      <CodeIcon sx={{ mr: 1 }} /> Required Skills
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                      Skills are color-coded by importance: <span style={{ color: theme.palette.error.main }}>Critical</span>, 
                      <span style={{ color: theme.palette.warning.main }}> Important</span>, 
                      <span style={{ color: theme.palette.info.main }}> Nice-to-have</span>
                    </Typography>
                    <Box sx={{ 
                      display: 'flex', 
                      flexWrap: 'wrap', 
                      gap: 1.5,
                      p: 2,
                      bgcolor: 'rgba(0,0,0,0.02)',
                      borderRadius: 2
                    }}>
                      {job.parsedData.keySkills && job.parsedData.keySkills.map((skill, index) => {
                        const skillName = skill && typeof skill === 'object' ? (skill.name || skill.skill || '') : skill;
                        const matchedSkill = job.matchAnalysis?.matchedSkills?.find(s => 
                          (s.skill === skillName) || 
                          (typeof s.skill === 'object' && s.skill.name === skillName)
                        );
                        const isMatched = matchedSkill?.found || false;
                        
                        return (
                          <SkillChip
                            key={`key-skill-${index}`}
                            skill={skill}
                            isMatched={isMatched}
                            importance={skill && typeof skill === 'object' ? skill.importance : undefined}
                            matchQuality={matchedSkill?.matchQuality}
                          />
                        );
                      })}
                    </Box>
                  </Grid>
                )}

                {job.parsedData.qualifications && (
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle1" fontWeight={600} gutterBottom color="primary" sx={{ display: 'flex', alignItems: 'center' }}>
                      <SchoolIcon sx={{ mr: 1 }} /> Qualifications
                    </Typography>
                    <Box sx={{ 
                      p: 2, 
                      bgcolor: 'rgba(0,0,0,0.02)',
                      borderRadius: 2
                    }}>
                      {job.parsedData.qualifications.required && job.parsedData.qualifications.required.length > 0 && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="subtitle2" gutterBottom sx={{ display: 'flex', alignItems: 'center', color: theme.palette.secondary.main }}>
                            Required Qualifications:
                          </Typography>
                          <List dense disablePadding>
                            {job.parsedData.qualifications.required.slice(0, 5).map((qual, index) => (
                              <ListItem key={index} sx={{ py: 0.5 }}>
                                <ListItemIcon sx={{ minWidth: 28 }}>
                                  <CheckCircleIcon fontSize="small" color="secondary" />
                                </ListItemIcon>
                                <ListItemText primary={qual} />
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}
                      {job.parsedData.qualifications.preferred && job.parsedData.qualifications.preferred.length > 0 && (
                        <Box>
                          <Typography variant="subtitle2" gutterBottom sx={{ display: 'flex', alignItems: 'center', color: theme.palette.info.main }}>
                            Preferred Qualifications:
                          </Typography>
                          <List dense disablePadding>
                            {job.parsedData.qualifications.preferred.slice(0, 3).map((qual, index) => (
                              <ListItem key={index} sx={{ py: 0.5 }}>
                                <ListItemIcon sx={{ minWidth: 28 }}>
                                  <CheckCircleIcon fontSize="small" color="info" />
                                </ListItemIcon>
                                <ListItemText primary={qual} />
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}
                    </Box>
                  </Grid>
                )}

                {/* Enhanced job metadata */}
                {(job.parsedData.industryContext || job.parsedData.roleCategory || job.parsedData.technicalComplexity) && (
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle1" fontWeight={600} gutterBottom color="primary" sx={{ display: 'flex', alignItems: 'center' }}>
                      <InfoIcon sx={{ mr: 1 }} /> Job Context
                    </Typography>
                    <Box sx={{ 
                      p: 2, 
                      bgcolor: 'rgba(0,0,0,0.02)',
                      borderRadius: 2
                    }}>
                      {job.parsedData.industryContext && (
                        <Box sx={{ mb: 1 }}>
                          <Typography variant="body2" color="text.secondary">Industry:</Typography>
                          <Typography variant="body1" fontWeight={500} sx={{ textTransform: 'capitalize' }}>
                            {job.parsedData.industryContext}
                          </Typography>
                        </Box>
                      )}
                      {job.parsedData.roleCategory && (
                        <Box sx={{ mb: 1 }}>
                          <Typography variant="body2" color="text.secondary">Role Category:</Typography>
                          <Typography variant="body1" fontWeight={500} sx={{ textTransform: 'capitalize' }}>
                            {job.parsedData.roleCategory.replace('-', ' ')}
                          </Typography>
                        </Box>
                      )}
                      {job.parsedData.technicalComplexity && (
                        <Box sx={{ mb: 1 }}>
                          <Typography variant="body2" color="text.secondary">Technical Complexity:</Typography>
                          <Chip 
                            label={job.parsedData.technicalComplexity} 
                            size="small" 
                            color={
                              job.parsedData.technicalComplexity === 'high' ? 'error' :
                              job.parsedData.technicalComplexity === 'medium' ? 'warning' : 'success'
                            }
                            sx={{ textTransform: 'capitalize' }}
                          />
                        </Box>
                      )}
                    </Box>
                  </Grid>
                )}
              </Grid>
            </CardContent>
          </Card>
        )}
      </Grid>
    </Grid>
  );
};

export default OverviewTab;

================
File: src/components/jobs/utils/searchUtils.js
================
// src/components/jobs/utils/searchUtils.js
import React from 'react';
import { useTheme } from '@mui/material/styles';
import {
  PlayArrow as PlayIcon,
  Pause as PauseIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Delete as DeleteIcon,
  Psychology as PsychologyIcon,
  Business as BusinessIcon,
  Search as SearchIcon,
  CloudDownload as CloudDownloadIcon,
  Save as SaveIcon,
  Info as InfoIcon,
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';

export const getStatusColor = (status) => {
  switch (status) {
    case 'running': return 'success';
    case 'paused': return 'warning';
    case 'completed': return 'info';
    case 'failed': return 'error';
    case 'cancelled': return 'default';
    default: return 'default';
  }
};

export const getStatusIcon = (status) => {
  switch (status) {
    case 'running': return <PlayIcon fontSize="small" />;
    case 'paused': return <PauseIcon fontSize="small" />;
    case 'completed': return <CheckCircleIcon fontSize="small" />;
    case 'failed': return <ErrorIcon fontSize="small" />;
    case 'cancelled': return <DeleteIcon fontSize="small" />;
    default: return null;
  }
};

export const getReasoningIcon = (phase) => {
  switch (phase) {
    case 'initialization': 
      return <AutoJobLogo variant="icon-only" size="small" sx={{ width: 18, height: 18 }} />;
    case 'career_analysis': 
      return <PsychologyIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'company_discovery': 
      return <BusinessIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'job_search': 
      return <SearchIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'content_extraction': 
      return <CloudDownloadIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'job_saving': 
      return <SaveIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'completion': 
      return <CheckCircleIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    case 'error': 
      return <ErrorIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
    default: 
      return <InfoIcon sx={{ color: 'inherit', fontSize: 'inherit' }} />;
  }
};

export const getReasoningColor = (phase, success, theme) => {
  // Success/failure states take priority
  if (success === false) return theme.palette.error.main;
  if (success === true && phase === 'completion') return theme.palette.success.main;
  
  // Phase-specific colors using your theme
  switch (phase) {
    case 'initialization': 
      return theme.palette.primary.main; // #1a73e8
    case 'career_analysis': 
      return theme.palette.secondary.main; // #00c4b4
    case 'company_discovery': 
      return theme.palette.info.main; // #4285f4
    case 'job_search': 
      return theme.palette.warning.main; // #fbbc04
    case 'content_extraction': 
      return theme.palette.success.main; // #34a853
    case 'job_saving': 
      return theme.palette.primary.dark; // #0d47a1
    case 'completion': 
      return theme.palette.success.main; // #34a853
    case 'error': 
      return theme.palette.error.main; // #ea4335
    default: 
      return theme.palette.text.secondary; // #5f6368
  }
};

export const formatDate = (date) => {
  return new Date(date).toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });
};

export const formatDuration = (duration) => {
  if (!duration) return 'N/A';
  if (duration < 1000) return `${duration}ms`;
  if (duration < 60000) return `${Math.round(duration / 1000)}s`;
  return `${Math.round(duration / 60000)}m`;
};

export const getProgressPercentage = (search) => {
  if (search.dailyLimit === 0) return 0;
  return Math.round((search.jobsFoundToday / search.dailyLimit) * 100);
};

================
File: src/components/layout/Header.js
================
// src/components/layout/Header.js - UPDATED WITHOUT NOTIFICATIONS
import React, { useState } from 'react';
import {
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  Menu,
  MenuItem,
  Box,
  Tooltip,
  useTheme,
  alpha,
  ListItemIcon,
  ListItemText,
} from '@mui/material';
import {
  Menu as MenuIcon,
  HelpOutline as HelpOutlineIcon,
  Quiz as QuizIcon,
  Support as SupportIcon,
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import AutoJobLogo from '../common/AutoJobLogo';
import GlobalSearch from '../common/GlobalSearch';

const Header = ({ onToggleSidebar }) => {
  const theme = useTheme();
  const { logout, currentUser } = useAuth();
  const navigate = useNavigate();
  const [helpAnchorEl, setHelpAnchorEl] = useState(null);
  
  const isHelpMenuOpen = Boolean(helpAnchorEl);

  const handleHelpMenuOpen = (event) => {
    setHelpAnchorEl(event.currentTarget);
  };

  const handleMenuClose = (setState) => () => {
    setState(null);
  };

  return (
    <AppBar 
      position="static"
      color="default"
      elevation={1}
      sx={{ 
        backgroundColor: 'background.paper',
        borderBottom: '1px solid',
        borderColor: 'divider',
        width: '100%',
        boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.08)',
      }}
    >
      <Toolbar sx={{ px: { xs: 2, sm: 3 }, minHeight: '64px !important' }}>
        {/* Mobile Menu Button */}
        <IconButton
          edge="start"
          color="inherit"
          aria-label="open drawer"
          onClick={onToggleSidebar}
          sx={{ 
            mr: 2, 
            display: { sm: 'block', md: 'none' },
            color: 'text.primary'
          }}
        >
          <MenuIcon />
        </IconButton>

        {/* Global Search Component */}
        <GlobalSearch 
          sx={{
            marginRight: 2,
            marginLeft: 0,
            width: '100%',
            maxWidth: { xs: '100%', sm: 400, md: 500 },
          }}
        />

        <Box sx={{ flexGrow: 1 }} />

        {/* Action Buttons */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
          {/* Help */}
          <Tooltip title="Help & Support" arrow>
            <IconButton
              color="inherit"
              onClick={handleHelpMenuOpen}
              sx={{ 
                color: 'text.secondary',
                '&:hover': {
                  color: 'primary.main',
                  backgroundColor: alpha(theme.palette.primary.main, 0.04)
                }
              }}
            >
              <HelpOutlineIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Toolbar>

      {/* Help Menu */}
      <Menu
        anchorEl={helpAnchorEl}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        open={isHelpMenuOpen}
        onClose={handleMenuClose(setHelpAnchorEl)}
        PaperProps={{
          sx: {
            mt: 1,
            minWidth: 240,
            boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
          }
        }}
      >
        <MenuItem onClick={handleMenuClose(setHelpAnchorEl)} sx={{ py: 1.5 }}>
          <ListItemIcon>
            <QuizIcon color="primary" />
          </ListItemIcon>
          <ListItemText
            primary="Getting Started Guide"
            secondary="Learn how to use auto-job.ai"
            primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
            secondaryTypographyProps={{ variant: 'caption' }}
          />
        </MenuItem>
        <MenuItem onClick={handleMenuClose(setHelpAnchorEl)} sx={{ py: 1.5 }}>
          <ListItemIcon>
            <HelpOutlineIcon color="primary" />
          </ListItemIcon>
          <ListItemText
            primary="FAQ"
            secondary="Find answers to common questions"
            primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
            secondaryTypographyProps={{ variant: 'caption' }}
          />
        </MenuItem>
        <MenuItem onClick={handleMenuClose(setHelpAnchorEl)} sx={{ py: 1.5 }}>
          <ListItemIcon>
            <SupportIcon color="primary" />
          </ListItemIcon>
          <ListItemText
            primary="Contact Support"
            secondary="Get help from our team"
            primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
            secondaryTypographyProps={{ variant: 'caption' }}
          />
        </MenuItem>
      </Menu>
    </AppBar>
  );
};

export default Header;

================
File: src/components/layout/MainLayout.js
================
// src/components/layout/MainLayout.js
import React, { useState } from 'react';
import { Box, useMediaQuery, useTheme } from '@mui/material';
import Sidebar from './Sidebar';
import Header from './Header';

const MainLayout = ({ children }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [sidebarOpen, setSidebarOpen] = useState(!isMobile);

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  return (
    <Box sx={{ 
      display: 'flex', 
      height: '100vh', // Fixed viewport height
      overflow: 'hidden' // Prevent any overflow on the main container
    }}>
      <Sidebar open={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          display: 'flex',
          flexDirection: 'column',
          height: '100vh', // Full viewport height
          overflow: 'hidden', // Prevent overflow on main wrapper
        }}
      >
        {/* Sticky Header */}
        <Box sx={{ 
          position: 'sticky',
          top: 0,
          zIndex: (theme) => theme.zIndex.appBar,
          flexShrink: 0 // Prevent header from shrinking
        }}>
          <Header onToggleSidebar={toggleSidebar} />
        </Box>
        
        {/* Scrollable Content Area */}
        <Box
          sx={{
            flexGrow: 1,
            overflow: 'auto', // Enable scrolling for content
            backgroundColor: 'background.default',
            p: 3,
            // Ensure proper scrollbar styling
            '&::-webkit-scrollbar': {
              width: '6px',
            },
            '&::-webkit-scrollbar-track': {
              backgroundColor: 'rgba(0, 0, 0, 0.04)',
              borderRadius: '3px',
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: 'rgba(0, 0, 0, 0.2)',
              borderRadius: '3px',
              '&:hover': {
                backgroundColor: 'rgba(0, 0, 0, 0.3)',
              },
            },
          }}
        >
          {children}
        </Box>
      </Box>
    </Box>
  );
};

export default MainLayout;

================
File: src/components/layout/Sidebar.js
================
// src/components/layout/Sidebar.js
import React, { useContext } from 'react';
import { 
  Box, 
  Drawer, 
  List, 
  ListItem, 
  ListItemButton, 
  ListItemIcon, 
  ListItemText,
  Divider,
  Typography,
  useTheme,
  useMediaQuery,
  Avatar,
  Collapse,
} from '@mui/material';
import { Link, useLocation } from 'react-router-dom';
import {
  Dashboard as DashboardIcon,
  Description as DescriptionIcon,
  Work as WorkIcon,
  People as PeopleIcon,
  Assignment as AssignmentIcon,
  Settings as SettingsIcon,
  Logout as LogoutIcon,
  SmartToy as SmartToyIcon,
  ExpandLess,
  ExpandMore,
  UploadFile as UploadFileIcon,
  FormatListBulleted as FormatListBulletedIcon,
  Add as AddIcon,
  ContentPasteSearch as ContentPasteSearchIcon,
  ManageSearch as ManageSearchIcon,
  Search as SearchIcon,
  Message as MessageIcon,
  Person as PersonIcon
} from '@mui/icons-material';
import { AuthContext } from '../../context/AuthContext';
import AutoJobLogo from '../common/AutoJobLogo';

const drawerWidth = 260;

const navItems = [
  { 
    title: 'Dashboard',
    path: '/dashboard',
    icon: <DashboardIcon />,
    color: '#1a73e8' // Primary blue
  },
  { 
    title: 'My Resumes',
    path: '/resumes',
    icon: <DescriptionIcon />,
    color: '#34a853', // Success green
  },
  { 
    title: 'Jobs Portal',
    path: '/jobs',
    icon: <WorkIcon />,
    color: '#4285f4', // Info blue
    subItems: [
      {
        title: 'All Jobs',
        path: '/jobs',
        icon: <FormatListBulletedIcon fontSize="small" />,
        color: '#4285f4'
      },
      {
        title: 'Agent Job Discovery',
        path: '/jobs/ai-searches',
        icon: <SmartToyIcon fontSize="small" />,
        color: '#4285f4'
      }
    ]
  },

  { 
    title: 'Recruiter Outreach',
    path: '/recruiters',
    icon: <PeopleIcon />,
    color: '#00c4b4', // Secondary teal

  },

];

const Sidebar = ({ open, onClose }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const location = useLocation();
  const { currentUser, logout } = useContext(AuthContext);
  const [openSubMenu, setOpenSubMenu] = React.useState('');

  // Auto-expand the submenu for the current path
  React.useEffect(() => {
    navItems.forEach(item => {
      if (item.subItems && (
        location.pathname === item.path || 
        item.subItems.some(subItem => location.pathname.startsWith(subItem.path)) ||
        // Special handling for recruiter routes
        (item.path === '/recruiters' && location.pathname.startsWith('/recruiters'))
      )) {
        setOpenSubMenu(item.title);
      }
    });
  }, [location.pathname]);

  const handleSubMenuClick = (title) => {
    setOpenSubMenu(openSubMenu === title ? '' : title);
  };

  const isPathActive = (path) => {
    // Special handling for exact path matching on main routes
    if (path === '/recruiters' && location.pathname === '/recruiters') {
      return true;
    }
    // For sub-items, check exact path
    if (path.includes('/recruiters/')) {
      return location.pathname === path;
    }
    // Default behavior for other routes
    return location.pathname === path || location.pathname.startsWith(`${path}/`);
  };

  const isSubItemActive = (subItemPath) => {
    return location.pathname === subItemPath;
  };

  const drawerContent = (
    <Box sx={{ 
      height: '100%', 
      display: 'flex', 
      flexDirection: 'column',
      overflow: 'hidden' // Prevent overflow on sidebar container
    }}>
      {/* Logo Section */}
      <Box sx={{ 
        px: 2.5, 
        py: 2, 
        display: 'flex', 
        alignItems: 'center',
        cursor: 'pointer',
        flexShrink: 0 // Prevent logo from shrinking
      }}>
        <AutoJobLogo 
          variant="horizontal"
          size="small"
          color="primary"
          showTagline={false}
        />
      </Box>
      
      <Box sx={{ px: 2, pt: 2, pb: 1, flexShrink: 0 }}>
        <Typography variant="overline" color="text.secondary" sx={{ fontWeight: 600 }}>
          Main Menu
        </Typography>
      </Box>
      
      {/* Scrollable Navigation Area */}
      <Box sx={{ 
        flex: 1, 
        overflow: 'auto',
        // Custom scrollbar for sidebar
        '&::-webkit-scrollbar': {
          width: '4px',
        },
        '&::-webkit-scrollbar-track': {
          backgroundColor: 'transparent',
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0, 0, 0, 0.15)',
          borderRadius: '2px',
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.25)',
          },
        },
      }}>
        <List sx={{ px: 1 }}>
          {navItems.map((item) => (
            <React.Fragment key={item.path}>
              <ListItem disablePadding>
                {item.subItems ? (
                  <ListItemButton
                    onClick={() => handleSubMenuClick(item.title)}
                    selected={location.pathname.startsWith(item.path)}
                    sx={{
                      borderRadius: 1.5,
                      mb: 0.5,
                      '&.Mui-selected': {
                        backgroundColor: `${item.color}15`, // Use item color with 15% opacity
                        color: item.color,
                        '&:hover': {
                          backgroundColor: `${item.color}20`, // Slightly darker on hover
                        },
                        '& .MuiListItemIcon-root': {
                          color: item.color,
                        },
                      },
                      '&:hover': {
                        backgroundColor: `${item.color}08`, // Light hover state with item color
                      }
                    }}
                  >
                    <ListItemIcon 
                      sx={{ 
                        minWidth: 40,
                        color: item.color,
                        '& .MuiSvgIcon-root': {
                          fontSize: '1.3rem'
                        }
                      }}
                    >
                      {React.cloneElement(item.icon, { 
                        style: { color: item.color }
                      })}
                    </ListItemIcon>
                    <ListItemText 
                      primary={item.title}
                      primaryTypographyProps={{
                        fontWeight: location.pathname.startsWith(item.path) ? 600 : 500,
                        fontSize: '0.9rem',
                        color: location.pathname.startsWith(item.path) ? item.color : 'text.primary'
                      }}
                    />
                    {openSubMenu === item.title ? 
                      <ExpandLess sx={{ color: 'text.secondary' }} /> : 
                      <ExpandMore sx={{ color: 'text.secondary' }} />
                    }
                  </ListItemButton>
                ) : (
                  <ListItemButton
                    component={Link}
                    to={item.path}
                    selected={isPathActive(item.path)}
                    sx={{
                      borderRadius: 1.5,
                      mb: 0.5,
                      '&.Mui-selected': {
                        backgroundColor: `${item.color}15`, // Use item color with 15% opacity
                        color: item.color,
                        '&:hover': {
                          backgroundColor: `${item.color}20`, // Slightly darker on hover
                        },
                        '& .MuiListItemIcon-root': {
                          color: item.color,
                        },
                      },
                      '&:hover': {
                        backgroundColor: `${item.color}08`, // Light hover state with item color
                      }
                    }}
                  >
                    <ListItemIcon 
                      sx={{ 
                        minWidth: 40,
                        color: item.color,
                        '& .MuiSvgIcon-root': {
                          fontSize: '1.3rem'
                        }
                      }}
                    >
                      {React.cloneElement(item.icon, { 
                        style: { color: item.color }
                      })}
                    </ListItemIcon>
                    <ListItemText 
                      primary={item.title}
                      primaryTypographyProps={{
                        fontWeight: isPathActive(item.path) ? 600 : 500,
                        fontSize: '0.9rem',
                        color: isPathActive(item.path) ? item.color : 'text.primary'
                      }}
                    />
                  </ListItemButton>
                )}
              </ListItem>
              {item.subItems && (
                <Collapse in={openSubMenu === item.title} timeout="auto" unmountOnExit>
                  <List component="div" disablePadding>
                    {item.subItems.map((subItem) => (
                      <ListItemButton
                        key={subItem.path}
                        component={Link}
                        to={subItem.path}
                        selected={isSubItemActive(subItem.path)}
                        sx={{
                          pl: 4,
                          py: 0.75,
                          borderRadius: 1.5,
                          mb: 0.5,
                          '&.Mui-selected': {
                            backgroundColor: `${subItem.color}15`, // Use subItem color with 15% opacity
                            color: subItem.color,
                            '&:hover': {
                              backgroundColor: `${subItem.color}20`, // Slightly darker on hover
                            },
                            '& .MuiListItemIcon-root': {
                              color: subItem.color,
                            },
                          },
                          '&:hover': {
                            backgroundColor: `${subItem.color}08`, // Light hover state with subItem color
                          }
                        }}
                      >
                        <ListItemIcon 
                          sx={{ 
                            minWidth: 32,
                            color: subItem.color,
                            '& .MuiSvgIcon-root': {
                              fontSize: '1.1rem'
                            }
                          }}
                        >
                          {React.cloneElement(subItem.icon, { 
                            style: { color: subItem.color }
                          })}
                        </ListItemIcon>
                        <ListItemText 
                          primary={subItem.title}
                          primaryTypographyProps={{
                            variant: 'body2',
                            fontWeight: isSubItemActive(subItem.path) ? 600 : 500,
                            fontSize: '0.85rem',
                            color: isSubItemActive(subItem.path) ? subItem.color : 'text.primary'
                          }}
                        />
                      </ListItemButton>
                    ))}
                  </List>
                </Collapse>
              )}
            </React.Fragment>
          ))}
        </List>
      </Box>
      
      <Divider sx={{ mt: 2, flexShrink: 0 }} />
      
      {/* User Section - Fixed at bottom */}
      <Box sx={{ p: 2, flexShrink: 0 }}>
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          mb: 2,
          p: 1.5,
          borderRadius: 2,
          backgroundColor: 'rgba(26, 115, 232, 0.04)',
          border: '1px solid rgba(26, 115, 232, 0.1)'
        }}>
          <Avatar 
            sx={{ 
              width: 40, 
              height: 40,
              mr: 2,
              bgcolor: 'primary.main',
              fontSize: '1rem',
              fontWeight: 600
            }}
          >
            {currentUser?.firstName?.[0] || 'U'}
          </Avatar>
          <Box sx={{ flex: 1, minWidth: 0 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 600 }} noWrap>
              {currentUser?.firstName ? `${currentUser.firstName} ${currentUser.lastName}` : 'User'}
            </Typography>
            <Typography variant="caption" color="text.secondary" noWrap>
              {currentUser?.email || 'user@example.com'}
            </Typography>
          </Box>
        </Box>
        
        <List sx={{ p: 0 }}>
          <ListItem disablePadding>
            <ListItemButton
              component={Link}
              to="/settings"
              sx={{
                borderRadius: 1.5,
                py: 1,
                '&:hover': {
                  backgroundColor: 'rgba(0, 0, 0, 0.04)'
                }
              }}
            >
              <ListItemIcon sx={{ minWidth: 36 }}>
                <SettingsIcon 
                  fontSize="small" 
                  sx={{ color: '#666' }}
                />
              </ListItemIcon>
              <ListItemText 
                primary="Settings" 
                primaryTypographyProps={{
                  fontSize: '0.9rem',
                  fontWeight: 500
                }}
              />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton
              onClick={logout}
              sx={{
                borderRadius: 1.5,
                py: 1,
                '&:hover': {
                  backgroundColor: 'rgba(234, 67, 53, 0.04)',
                  '& .MuiListItemIcon-root': {
                    color: 'error.main'
                  },
                  '& .MuiListItemText-primary': {
                    color: 'error.main'
                  }
                }
              }}
            >
              <ListItemIcon sx={{ minWidth: 36 }}>
                <LogoutIcon 
                  fontSize="small" 
                  sx={{ color: '#666' }}
                />
              </ListItemIcon>
              <ListItemText 
                primary="Logout" 
                primaryTypographyProps={{
                  fontSize: '0.9rem',
                  fontWeight: 500
                }}
              />
            </ListItemButton>
          </ListItem>
        </List>
      </Box>
    </Box>
  );

  return (
    <Drawer
      variant={isMobile ? 'temporary' : 'permanent'}
      open={open}
      onClose={onClose}
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        '& .MuiDrawer-paper': {
          width: drawerWidth,
          boxSizing: 'border-box',
          borderRight: '1px solid',
          borderColor: 'divider',
          backgroundColor: 'background.paper',
          height: '100vh', // Full viewport height
          overflow: 'hidden' // Prevent overflow on drawer paper
        },
      }}
    >
      {drawerContent}
    </Drawer>
  );
};

export default Sidebar;

================
File: src/components/recruiters/OutreachComposer.js
================
// src/components/recruiters/OutreachComposer.js - ENHANCED WITH IMPROVED UI
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Typography,
  Box,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Avatar,
  Divider,
  Alert,
  LinearProgress,
  IconButton,
  Tooltip,
  Card,
  CardContent,
  RadioGroup,
  FormControlLabel,
  Radio,
  Autocomplete,
  Collapse,
  Paper
} from '@mui/material';
import {
  Close as CloseIcon,
  AutoFixHigh as AutoFixHighIcon,
  Send as SendIcon,
  Save as SaveIcon,
  Refresh as RefreshIcon,
  Psychology as PsychologyIcon,
  Business as BusinessIcon,
  Person as PersonIcon,
  Work as WorkIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  Description as DescriptionIcon,
  Lightbulb as LightbulbIcon,
  Star as StarIcon,
  TrendingUp as TrendingUpIcon,
  School as SchoolIcon,
  Assignment as AssignmentIcon,
  Preview as PreviewIcon,
  CheckCircle as CheckCircleIcon,
  Drafts as DraftsIcon,
  Cancel as CancelIcon,
  Edit as EditIcon,
  ContentCopy as ContentCopyIcon,
  Warning as WarningIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { useAuth } from '../../context/AuthContext';
import recruiterService from '../../utils/recruiterService';
import resumeService from '../../utils/resumeService';
import jobService from '../../utils/jobService';
import AutoJobLogo from '../common/AutoJobLogo';

const OutreachComposer = ({ 
  open, 
  onClose, 
  recruiter, 
  onSend, 
  onSave,
  defaultMessage = '',
  mode = 'create' // 'create' or 'edit'
}) => {
  const theme = useTheme();
  const { currentUser } = useAuth();
  
  // Form state
  const [messageContent, setMessageContent] = useState(defaultMessage);
  const [messageType, setMessageType] = useState('introduction');
  const [tone, setTone] = useState('professional');
  const [sentVia, setSentVia] = useState('email'); // Default to email
  const [selectedResume, setSelectedResume] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);
  const [customRequirements, setCustomRequirements] = useState('');
  
  // UI state
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [characterCount, setCharacterCount] = useState(0);
  const [error, setError] = useState('');
  const [generationHistory, setGenerationHistory] = useState([]);
  
  // Email-specific state
  const [showEmailPreview, setShowEmailPreview] = useState(false);
  const [showStatusDialog, setShowStatusDialog] = useState(false);
  const [emailSubject, setEmailSubject] = useState('');
  const [formattedEmailBody, setFormattedEmailBody] = useState('');
  const [manualStatus, setManualStatus] = useState('sent');
  const [showClipboardFallback, setShowClipboardFallback] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);
  
  // Data state
  const [resumes, setResumes] = useState([]);
  const [jobs, setJobs] = useState([]);
  const [loadingData, setLoadingData] = useState(true);

  // Load user data on mount
  useEffect(() => {
    if (open) {
      loadUserData();
      setMessageContent(defaultMessage);
      setCharacterCount(defaultMessage.length);
    }
  }, [open, defaultMessage]);

  // Update character count when message changes
  useEffect(() => {
    setCharacterCount(messageContent.length);
  }, [messageContent]);

  const loadUserData = async () => {
    try {
      setLoadingData(true);
      const [resumesResponse, jobsResponse] = await Promise.all([
        resumeService.getUserResumes(),
        jobService.getUserJobs()
      ]);
      
      setResumes(resumesResponse || []);
      setJobs(jobsResponse || []);
    } catch (error) {
      console.error('Failed to load user data:', error);
      setError('Failed to load your resumes and jobs');
    } finally {
      setLoadingData(false);
    }
  };

  // Email utility functions
  const generateSubjectLine = (recruiter, messageType, jobTitle = null) => {
    const companyName = recruiter?.company?.name || 'your company';
    
    const templates = {
      introduction: `Exploring opportunities at ${companyName}`,
      application: `Application for ${jobTitle || 'Software Developer'} position`,
      follow_up: `Following up - ${companyName} opportunities`,
      thank_you: `Thank you for your time - ${recruiter?.firstName || 'Recruiter'}`
    };
    
    return templates[messageType] || `Professional inquiry - ${companyName}`;
  };

  const formatEmailMessage = (content, recruiterData, userData) => {
    const recruiterFirstName = recruiterData?.firstName || 'there';
    
    // Remove any subject lines from the AI content
    let cleanedContent = content.replace(/^Subject:.*$/gim, '').trim();
    
    // Check if the content already has a greeting
    const hasGreeting = cleanedContent.toLowerCase().includes('dear ') || 
                       cleanedContent.toLowerCase().includes('hello ') ||
                       cleanedContent.toLowerCase().includes('hi ');
    
    // Check if the content already has a signature/closing
    const hasSignature = cleanedContent.toLowerCase().includes('best regards') || 
                        cleanedContent.toLowerCase().includes('warm regards') ||
                        cleanedContent.toLowerCase().includes('sincerely') ||
                        cleanedContent.toLowerCase().includes('regards,');
    
    let formattedContent = cleanedContent;
    
    // Add greeting only if none exists
    if (!hasGreeting) {
      formattedContent = `Dear ${recruiterFirstName},

${cleanedContent}`;
    }
    
    // Add signature only if none exists
    if (!hasSignature && !hasGreeting) {
      const userFirstName = userData?.firstName || 'Best regards';
      formattedContent = `${formattedContent}

Best regards,
${userFirstName}`;
    }
    
    return formattedContent;
  };

  const handleGenerateMessage = async () => {
    if (!recruiter) return;
    
    try {
      setIsGenerating(true);
      setError('');
      
      const messageParams = {
        recruiterId: recruiter.id,
        resumeId: selectedResume?._id,
        jobId: selectedJob?._id,
        messageType,
        tone,
        customRequirements
      };

      console.log('🤖 Generating message with params:', messageParams);
      
      const response = await recruiterService.generatePersonalizedMessage(messageParams);
      
      // Save to generation history
      setGenerationHistory(prev => [{
        message: response.message,
        params: messageParams,
        timestamp: new Date()
      }, ...prev.slice(0, 4)]); // Keep last 5 generations
      
      setMessageContent(response.message);
      
    } catch (error) {
      console.error('Message generation failed:', error);
      setError('Failed to generate message. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSendViaEmail = () => {
    try {
      // Generate subject line
      const subject = generateSubjectLine(recruiter, messageType, selectedJob?.title);
      
      // Format message with signature
      const formattedMessage = formatEmailMessage(messageContent, recruiter, currentUser);
      
      setEmailSubject(subject);
      setFormattedEmailBody(formattedMessage);
      setShowEmailPreview(true);
      
    } catch (error) {
      console.error('Email preparation failed:', error);
      setError('Failed to prepare email. Please try again.');
    }
  };

  const copyToClipboard = async () => {
    try {
      const fullEmailContent = `To: ${recruiter.email}
Subject: ${emailSubject}

${formattedEmailBody}`;
      
      await navigator.clipboard.writeText(fullEmailContent);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 3000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
      // Fallback for older browsers
      const fullEmailContent = `To: ${recruiter.email}
Subject: ${emailSubject}

${formattedEmailBody}`;
      
      const textArea = document.createElement('textarea');
      textArea.value = fullEmailContent;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 3000);
    }
  };

  const handleStatusUpdate = async () => {
    try {
      const outreachData = {
        recruiterId: recruiter.id,
        messageContent,
        messageTemplate: messageType,
        sentVia: 'email',
        jobId: selectedJob?._id,
        customizations: [],
        status: manualStatus === 'sent' ? 'sent' : 'drafted'
      };

      if (manualStatus === 'sent') {
        await onSend(outreachData);
      } else {
        await onSave(outreachData);
      }
      
      setShowStatusDialog(false);
      handleClose();
      
    } catch (error) {
      console.error('Status update failed:', error);
      setError('Failed to update status. Please try again.');
    }
  };

  const handleSend = async () => {
    if (sentVia === 'email') {
      handleSendViaEmail();
      return;
    }

    // Original send logic for other methods
    try {
      setIsSending(true);
      setError('');
      
      const outreachData = {
        recruiterId: recruiter.id,
        messageContent,
        messageTemplate: messageType,
        sentVia,
        jobId: selectedJob?._id,
        customizations: []
      };

      // Validate the outreach data
      const validation = recruiterService.validateOutreachData(outreachData);
      if (!validation.isValid) {
        setError(validation.errors.join(', '));
        return;
      }

      await onSend(outreachData);
      handleClose();
      
    } catch (error) {
      console.error('Send failed:', error);
      setError('Failed to send message. Please try again.');
    } finally {
      setIsSending(false);
    }
  };

  const handleSave = async () => {
    try {
      const outreachData = {
        recruiterId: recruiter.id,
        messageContent,
        messageTemplate: messageType,
        sentVia,
        jobId: selectedJob?._id,
        customizations: []
      };

      await onSave(outreachData);
      handleClose();
      
    } catch (error) {
      console.error('Save failed:', error);
      setError('Failed to save draft. Please try again.');
    }
  };

  const handleClose = () => {
    setMessageContent('');
    setError('');
    setGenerationHistory([]);
    setShowAdvancedOptions(false);
    setShowEmailPreview(false);
    setShowStatusDialog(false);
    setEmailSubject('');
    setFormattedEmailBody('');
    setManualStatus('sent');
    setShowClipboardFallback(false);
    setCopySuccess(false);
    onClose();
  };

  const messageTemplates = recruiterService.getMessageTemplates();
  const toneOptions = recruiterService.getToneOptions();

  const getCharacterCountColor = () => {
    if (characterCount > 2000) return 'error';
    if (characterCount > 1500) return 'warning';
    return 'primary';
  };

  const getSentViaIcon = (method) => {
    switch (method) {
      case 'email': return <EmailIcon />;
      case 'phone': return <PhoneIcon />;
      default: return <BusinessIcon />;
    }
  };

  const getTemplateIcon = (template) => {
    switch (template) {
      case 'introduction': return <PersonIcon sx={{ color: theme.palette.primary.main }} />;
      case 'follow_up': return <TrendingUpIcon sx={{ color: theme.palette.secondary.main }} />;
      case 'application': return <AssignmentIcon sx={{ color: theme.palette.success.main }} />;
      case 'thank_you': return <StarIcon sx={{ color: theme.palette.warning.main }} />;
      default: return <DescriptionIcon sx={{ color: theme.palette.info.main }} />;
    }
  };

  const getToneIcon = (toneValue) => {
    switch (toneValue) {
      case 'professional': return <BusinessIcon sx={{ color: theme.palette.primary.main }} />;
      case 'friendly': return <PersonIcon sx={{ color: theme.palette.success.main }} />;
      case 'casual': return <LightbulbIcon sx={{ color: theme.palette.warning.main }} />;
      case 'formal': return <SchoolIcon sx={{ color: theme.palette.info.main }} />;
      default: return <DescriptionIcon />;
    }
  };

  if (!recruiter) return null;

  return (
    <>
      <Dialog
        open={open && !showStatusDialog}
        onClose={handleClose}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: { borderRadius: 3, minHeight: '700px' }
        }}
      >
        {/* Enhanced Header */}
        <DialogTitle sx={{ 
          p: 0,
          background: `linear-gradient(135deg, ${theme.palette.primary.main}15, ${theme.palette.secondary.main}15)`,
          borderBottom: `1px solid ${theme.palette.divider}`
        }}>
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar
                  sx={{
                    bgcolor: theme.palette.primary.main,
                    width: 48,
                    height: 48,
                    fontSize: '1.2rem',
                    fontWeight: 'bold'
                  }}
                >
                  {recruiter.firstName?.[0]}{recruiter.lastName?.[0]}
                </Avatar>
                <Box>
                  <Typography variant="h5" sx={{ fontWeight: 600, color: theme.palette.primary.main }}>
                    Compose Message
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    To {recruiter.firstName} {recruiter.lastName} at {recruiter.company?.name}
                  </Typography>
                </Box>
              </Box>
              <IconButton 
                onClick={handleClose}
                sx={{ 
                  bgcolor: 'background.paper',
                  '&:hover': { bgcolor: 'grey.100' }
                }}
              >
                <CloseIcon />
              </IconButton>
            </Box>

            {/* Status Chips */}
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Chip
                icon={<WorkIcon />}
                label={recruiter.title}
                size="small"
                variant="outlined"
                color="primary"
                sx={{ borderRadius: 1 }}
              />
              <Chip
                icon={<BusinessIcon />}
                label={recruiter.company?.name}
                size="small"
                variant="outlined"
                color="secondary"
                sx={{ borderRadius: 1 }}
              />
              {recruiter.industry && (
                <Chip
                  label={recruiter.industry}
                  size="small"
                  variant="filled"
                  color="info"
                  sx={{ borderRadius: 1 }}
                />
              )}
            </Box>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ p: 0 }}>
          {loadingData && (
            <Box sx={{ p: 2 }}>
              <LinearProgress sx={{ borderRadius: 1 }} />
              <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                Loading your resumes and jobs...
              </Typography>
            </Box>
          )}

          {error && (
            <Box sx={{ p: 3 }}>
              <Alert severity="error" sx={{ borderRadius: 2 }} onClose={() => setError('')}>
                {error}
              </Alert>
            </Box>
          )}

          <Box sx={{ p: 3 }}>
            <Grid container spacing={3}>
              {/* Left Column - AI Generation */}
              <Grid item xs={12} lg={8}>
                {/* Enhanced AI Generation Controls */}
                <Card 
                  elevation={0} 
                  sx={{ 
                    mb: 3, 
                    border: `1px solid ${theme.palette.primary.light}`,
                    borderRadius: 2,
                    background: `linear-gradient(135deg, ${theme.palette.primary.main}08, ${theme.palette.secondary.main}05)`
                  }}
                >
                  <CardContent sx={{ p: 3 }}>
                    <Typography 
                      variant="h6" 
                      gutterBottom 
                      sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1, 
                        color: theme.palette.primary.main,
                        fontWeight: 600,
                        mb: 3
                      }}
                    >
                      <PsychologyIcon />
                      AI Message Generator
                    </Typography>

                    <Grid container spacing={3}>
                      {/* IMPROVED: Adjusted grid sizes for better width distribution */}
                      <Grid item xs={12} md={7}>
                        <FormControl fullWidth>
                          <InputLabel sx={{ color: theme.palette.primary.main }}>Message Type</InputLabel>
                          <Select
                            value={messageType}
                            label="Message Type"
                            onChange={(e) => setMessageType(e.target.value)}
                            sx={{ borderRadius: 2 }}
                          >
                            {Object.entries(messageTemplates).map(([key, template]) => (
                              <MenuItem key={key} value={key} sx={{ py: 1.5 }}>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  {getTemplateIcon(key)}
                                  <Box>
                                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                      {template.name}
                                    </Typography>
                                    <Typography variant="caption" color="text.secondary">
                                      {template.description}
                                    </Typography>
                                  </Box>
                                </Box>
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      {/* IMPROVED: Adjusted grid size for better width distribution */}
                      <Grid item xs={12} md={5}>
                        <FormControl fullWidth>
                          <InputLabel sx={{ color: theme.palette.secondary.main }}>Tone</InputLabel>
                          <Select
                            value={tone}
                            label="Tone"
                            onChange={(e) => setTone(e.target.value)}
                            sx={{ borderRadius: 2 }}
                          >
                            {toneOptions.map((option) => (
                              <MenuItem key={option.value} value={option.value} sx={{ py: 1.5 }}>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  {getToneIcon(option.value)}
                                  <Box>
                                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                      {option.label}
                                    </Typography>
                                    <Typography variant="caption" color="text.secondary">
                                      {option.description}
                                    </Typography>
                                  </Box>
                                </Box>
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12}>
                        <Button
                          variant="contained"
                          startIcon={isGenerating ? <LinearProgress sx={{ width: 20 }} /> : 
                            <AutoJobLogo 
                              variant="icon-only" 
                              size="small" 
                              sx={{ width: 24, height: 24 }} 
                            />
                          }
                          onClick={handleGenerateMessage}
                          disabled={isGenerating}
                          fullWidth
                          size="large"
                          sx={{ 
                            borderRadius: 2,
                            py: 1.5,
                            background: `linear-gradient(45deg, ${theme.palette.secondary.main}, ${theme.palette.secondary.light})`,
                            '&:hover': {
                              background: `linear-gradient(45deg, ${theme.palette.secondary.dark}, ${theme.palette.secondary.main})`
                            },
                            '&:disabled': {
                              background: theme.palette.grey[300]
                            }
                          }}
                        >
                          {isGenerating ? 'Generating Magic...' : '✨ Generate AI Message'}
                        </Button>
                      </Grid>
                    </Grid>

                    {/* Advanced Options */}
                    <Box sx={{ mt: 3 }}>
                      <Button
                        variant="text"
                        onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                        endIcon={showAdvancedOptions ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                        sx={{ color: theme.palette.primary.main }}
                      >
                        Advanced Options
                      </Button>
                      
                      <Collapse in={showAdvancedOptions}>
                        <Box sx={{ mt: 2 }}>
                          <Grid container spacing={2}>
                            <Grid item xs={12} sm={6}>
                              <Autocomplete
                                options={resumes}
                                getOptionLabel={(option) => option?.name || ''}
                                value={selectedResume}
                                onChange={(e, value) => setSelectedResume(value)}
                                isOptionEqualToValue={(option, value) => option?._id === value?._id}
                                renderInput={(params) => (
                                  <TextField
                                    {...params}
                                    label="Use Resume"
                                    placeholder="Select resume for context..."
                                    size="small"
                                    InputProps={{
                                      ...params.InputProps,
                                      startAdornment: <DescriptionIcon sx={{ mr: 1, color: theme.palette.success.main }} />
                                    }}
                                  />
                                )}
                              />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                              <Autocomplete
                                options={jobs}
                                getOptionLabel={(option) => option ? `${option.title} at ${option.company}` : ''}
                                value={selectedJob}
                                onChange={(e, value) => setSelectedJob(value)}
                                isOptionEqualToValue={(option, value) => option?._id === value?._id}
                                renderInput={(params) => (
                                  <TextField
                                    {...params}
                                    label="Target Job"
                                    placeholder="Select job if applying..."
                                    size="small"
                                    InputProps={{
                                      ...params.InputProps,
                                      startAdornment: <WorkIcon sx={{ mr: 1, color: theme.palette.warning.main }} />
                                    }}
                                  />
                                )}
                              />
                            </Grid>

                            <Grid item xs={12}>
                              <TextField
                                fullWidth
                                multiline
                                rows={2}
                                label="Custom Requirements"
                                placeholder="Any specific points you want to mention..."
                                value={customRequirements}
                                onChange={(e) => setCustomRequirements(e.target.value)}
                                size="small"
                                InputProps={{
                                  startAdornment: <LightbulbIcon sx={{ mr: 1, color: theme.palette.info.main, alignSelf: 'flex-start', mt: 1 }} />
                                }}
                              />
                            </Grid>
                          </Grid>
                        </Box>
                      </Collapse>
                    </Box>
                  </CardContent>
                </Card>

                {/* Enhanced Message Content */}
                <Paper elevation={0} sx={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                  <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}`, bgcolor: theme.palette.grey[50] }}>
                    <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <DescriptionIcon sx={{ color: theme.palette.primary.main }} />
                      Message Content
                    </Typography>
                  </Box>
                  <Box sx={{ p: 3 }}>
                    <TextField
                      fullWidth
                      multiline
                      rows={12}
                      placeholder="Write your message here or use the AI generator above..."
                      value={messageContent}
                      onChange={(e) => setMessageContent(e.target.value)}
                      error={characterCount > 2000}
                      helperText={
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <span>
                            {characterCount > 2000 && 'Message too long. '}
                            {messageTemplates[messageType]?.suggestedLength && 
                              `Suggested: ${messageTemplates[messageType].suggestedLength}`}
                          </span>
                          <span style={{ color: theme.palette[getCharacterCountColor()].main, fontWeight: 600 }}>
                            {characterCount}/2000
                          </span>
                        </Box>
                      }
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2,
                          fontSize: '0.95rem',
                          lineHeight: 1.6
                        }
                      }}
                    />
                  </Box>
                </Paper>

                {/* Generation History */}
                {generationHistory.length > 0 && (
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom sx={{ color: theme.palette.primary.main }}>
                      Recent Generations
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                      {generationHistory.map((generation, index) => (
                        <Chip
                          key={index}
                          label={`${generation.params.messageType} (${generation.params.tone})`}
                          size="small"
                          variant="outlined"
                          onClick={() => setMessageContent(generation.message)}
                          sx={{ 
                            cursor: 'pointer',
                            borderRadius: 1,
                            '&:hover': {
                              backgroundColor: theme.palette.primary.main + '10'
                            }
                          }}
                        />
                      ))}
                    </Box>
                  </Box>
                )}
              </Grid>

              {/* Right Column - Settings and Preview */}
              <Grid item xs={12} lg={4}>
                {/* Enhanced Communication Method */}
                <Card elevation={0} sx={{ mb: 3, border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                  <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}`, bgcolor: theme.palette.grey[50] }}>
                    <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <SendIcon sx={{ color: theme.palette.success.main }} />
                      Send Via
                    </Typography>
                  </Box>
                  <CardContent>
                    <RadioGroup
                      value={sentVia}
                      onChange={(e) => setSentVia(e.target.value)}
                    >
                      <FormControlLabel
                        value="email"
                        control={<Radio />}
                        label={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, py: 0.5 }}>
                            <EmailIcon sx={{ color: theme.palette.primary.main }} />
                            <Box>
                              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                Email (Recommended)
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                Shows email preview with copy functionality
                              </Typography>
                            </Box>
                          </Box>
                        }
                        disabled={!recruiter.email}
                      />
                      <FormControlLabel
                        value="phone"
                        control={<Radio />}
                        label={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, py: 0.5 }}>
                            <PhoneIcon sx={{ color: theme.palette.success.main }} />
                            <Box>
                              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                Phone Call
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                Script for phone conversation
                              </Typography>
                            </Box>
                          </Box>
                        }
                        disabled={!recruiter.phone}
                      />
                    </RadioGroup>
                  </CardContent>
                </Card>

                {/* Enhanced Recruiter Info */}
                <Card elevation={0} sx={{ mb: 3, border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                  <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}`, bgcolor: theme.palette.grey[50] }}>
                    <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <PersonIcon sx={{ color: theme.palette.secondary.main }} />
                      Recruiter Details
                    </Typography>
                  </Box>
                  <CardContent>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                          TITLE
                        </Typography>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>
                          {recruiter.title}
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                          COMPANY
                        </Typography>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>
                          {recruiter.company?.name}
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                          EMAIL
                        </Typography>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>
                          {recruiter.email || 'Not available'}
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                          INDUSTRY
                        </Typography>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>
                          {recruiter.industry}
                        </Typography>
                      </Box>
                      {recruiter.experienceYears && (
                        <Box>
                          <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                            EXPERIENCE
                          </Typography>
                          <Typography variant="body2" sx={{ fontWeight: 500 }}>
                            {recruiter.experienceYears} years
                          </Typography>
                        </Box>
                      )}
                      {recruiter.specializations && (
                        <Box>
                          <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, mb: 1, display: 'block' }}>
                            SPECIALIZATIONS
                          </Typography>
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                            {recruiter.specializations.slice(0, 3).map((spec, index) => (
                              <Chip 
                                key={index} 
                                label={spec} 
                                size="small" 
                                variant="outlined"
                                sx={{ borderRadius: 1, fontSize: '0.75rem' }}
                              />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </Box>
                  </CardContent>
                </Card>

                {/* Enhanced Template Guide */}
                {messageTemplates[messageType] && (
                  <Card elevation={0} sx={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                    <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}`, bgcolor: theme.palette.grey[50] }}>
                      <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <LightbulbIcon sx={{ color: theme.palette.warning.main }} />
                        Template Guide
                      </Typography>
                    </Box>
                    <CardContent>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        {messageTemplates[messageType].description}
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                          SUGGESTED LENGTH:
                        </Typography>
                        <Chip 
                          label={messageTemplates[messageType].suggestedLength} 
                          size="small" 
                          color="info"
                          variant="outlined"
                          sx={{ borderRadius: 1 }}
                        />
                      </Box>
                    </CardContent>
                  </Card>
                )}
              </Grid>
            </Grid>
          </Box>
        </DialogContent>

        {/* Enhanced Footer Actions */}
        <DialogActions sx={{ 
          p: 3, 
          borderTop: `1px solid ${theme.palette.divider}`,
          background: `linear-gradient(135deg, ${theme.palette.grey[50]}, ${theme.palette.grey[25]})`
        }}>
          <Button 
            onClick={handleClose} 
            variant="outlined"
            sx={{ borderRadius: 2 }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSave}
            variant="outlined"
            startIcon={<SaveIcon />}
            disabled={!messageContent.trim()}
            sx={{ borderRadius: 2 }}
          >
            Save Draft
          </Button>
          {/* IMPROVED: Fixed Prepare Email button with proper text color */}
          <Button
            onClick={handleSend}
            variant="contained"
            startIcon={isSending ? <LinearProgress sx={{ width: 20 }} /> : getSentViaIcon(sentVia)}
            disabled={!messageContent.trim() || isSending || characterCount > 2000}
            sx={{ 
              borderRadius: 2,
              background: `linear-gradient(45deg, ${theme.palette.success.main}, ${theme.palette.success.dark})`,
              color: '#ffffff !important', // Ensure white text
              fontWeight: 600,
              '&:hover': {
                background: `linear-gradient(45deg, ${theme.palette.success.dark}, ${theme.palette.success.main})`
              },
              '&:disabled': {
                background: theme.palette.grey[300],
                color: theme.palette.grey[500] + ' !important'
              }
            }}
          >
            {isSending ? 'Processing...' : 
             sentVia === 'email' ? 'Prepare Email' : `Send via ${sentVia}`}
          </Button>
        </DialogActions>
      </Dialog>

      {/* IMPROVED: Enhanced Email Preview Dialog with Better Theme Integration */}
      <Dialog
        open={showEmailPreview}
        onClose={() => setShowEmailPreview(false)}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: { 
            borderRadius: 3, 
            overflow: 'hidden',
            boxShadow: theme.shadows[8]
          }
        }}
      >
        <DialogTitle sx={{ 
          p: 0,
          background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
          color: 'white',
          position: 'relative'
        }}>
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
              <Avatar sx={{ 
                bgcolor: 'rgba(255,255,255,0.2)', 
                color: 'white', 
                width: 56, 
                height: 56,
                border: '2px solid rgba(255,255,255,0.3)'
              }}>
                <EmailIcon sx={{ fontSize: '1.8rem' }} />
              </Avatar>
              <Box>
                <Typography variant="h5" sx={{ fontWeight: 700, color: 'white', mb: 0.5 }}>
                  📧 Email Preview
                </Typography>
                <Typography variant="body2" sx={{ 
                  color: 'rgba(255,255,255,0.9)',
                  display: 'flex',
                  alignItems: 'center',
                  gap: 1
                }}>
                  <PreviewIcon sx={{ fontSize: '1rem' }} />
                  Review your email before copying to your email client
                </Typography>
              </Box>
            </Box>
            
            {/* IMPROVED: Email client mockup header with better styling */}
            <Paper sx={{ 
              bgcolor: 'rgba(255,255,255,0.15)', 
              borderRadius: 2, 
              p: 2.5,
              border: '1px solid rgba(255,255,255,0.3)',
              backdropFilter: 'blur(10px)'
            }}>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                    <PersonIcon sx={{ color: 'rgba(255,255,255,0.9)', fontSize: '1.1rem' }} />
                    <Typography variant="caption" sx={{ 
                      color: 'rgba(255,255,255,0.9)', 
                      fontWeight: 700,
                      letterSpacing: '0.5px'
                    }}>
                      TO
                    </Typography>
                  </Box>
                  <Typography variant="body2" sx={{ 
                    color: 'white', 
                    fontWeight: 600,
                    fontSize: '0.95rem'
                  }}>
                    {recruiter.email}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                    <DescriptionIcon sx={{ color: 'rgba(255,255,255,0.9)', fontSize: '1.1rem' }} />
                    <Typography variant="caption" sx={{ 
                      color: 'rgba(255,255,255,0.9)', 
                      fontWeight: 700,
                      letterSpacing: '0.5px'
                    }}>
                      SUBJECT
                    </Typography>
                  </Box>
                  <Typography variant="body2" sx={{ 
                    color: 'white', 
                    fontWeight: 600,
                    fontSize: '0.95rem',
                    lineHeight: 1.3
                  }}>
                    {emailSubject}
                  </Typography>
                </Grid>
              </Grid>
            </Paper>

            {/* Close button */}
            <IconButton
              onClick={() => setShowEmailPreview(false)}
              sx={{
                position: 'absolute',
                top: 16,
                right: 16,
                color: 'white',
                bgcolor: 'rgba(255,255,255,0.1)',
                '&:hover': {
                  bgcolor: 'rgba(255,255,255,0.2)'
                }
              }}
            >
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ p: 0 }}>
          {/* IMPROVED: Email body mockup with better styling */}
          <Box sx={{ 
            p: 4, 
            bgcolor: `linear-gradient(135deg, ${theme.palette.grey[50]}, ${theme.palette.grey[25]})`,
            minHeight: 300
          }}>
            <Paper 
              elevation={4}
              sx={{ 
                p: 4, 
                borderRadius: 3,
                background: 'linear-gradient(135deg, #ffffff, #fafafa)',
                border: `2px solid ${theme.palette.primary.light}`,
                position: 'relative',
                boxShadow: theme.shadows[6],
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: 6,
                  background: `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
                  borderTopLeftRadius: 3,
                  borderTopRightRadius: 3
                }
              }}
            >
              {/* Email content with better typography */}
              <Typography 
                variant="body1" 
                sx={{ 
                  whiteSpace: 'pre-wrap',
                  lineHeight: 1.8,
                  fontFamily: '"Inter", "Roboto", "Helvetica", "Arial", sans-serif',
                  color: theme.palette.text.primary,
                  fontSize: '1.05rem',
                  letterSpacing: '0.02em'
                }}
              >
                {formattedEmailBody}
              </Typography>
            </Paper>
          </Box>

          {/* IMPROVED: Enhanced info section with theme colors */}
          <Box sx={{ 
            p: 3, 
            bgcolor: `linear-gradient(135deg, ${theme.palette.primary.main}08, ${theme.palette.secondary.main}05)`,
            borderTop: `1px solid ${theme.palette.divider}`
          }}>
            <Alert 
              severity="info" 
              icon={<LightbulbIcon sx={{ color: theme.palette.primary.main }} />}
              sx={{ 
                borderRadius: 2,
                border: `1px solid ${theme.palette.primary.light}`,
                bgcolor: 'rgba(255,255,255,0.9)',
                '& .MuiAlert-icon': {
                  color: theme.palette.primary.main
                }
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
                <Box sx={{ flex: 1 }}>
                  <Typography variant="body2" sx={{ 
                    fontWeight: 700, 
                    color: theme.palette.primary.main, 
                    mb: 1,
                    display: 'flex',
                    alignItems: 'center',
                    gap: 1
                  }}>
                    <CheckCircleIcon sx={{ fontSize: '1.1rem' }} />
                    What happens next:
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ lineHeight: 1.6 }}>
                    Copy the email content using the button below, then paste it into your preferred email client. 
                    This approach maintains your professional reputation while leveraging AI-generated content.
                  </Typography>
                </Box>
              </Box>
            </Alert>
          </Box>
        </DialogContent>

        {/* IMPROVED: Enhanced dialog actions with better button styling */}
        <DialogActions sx={{ 
          p: 3, 
          background: `linear-gradient(135deg, ${theme.palette.grey[50]}, white)`,
          borderTop: `1px solid ${theme.palette.divider}`,
          gap: 2
        }}>
          <Button 
            onClick={() => setShowEmailPreview(false)}
            variant="outlined"
            startIcon={<EditIcon />}
            sx={{ 
              borderRadius: 2,
              borderColor: theme.palette.primary.main,
              color: theme.palette.primary.main,
              fontWeight: 600,
              px: 3,
              '&:hover': {
                bgcolor: theme.palette.primary.main + '10',
                borderColor: theme.palette.primary.dark
              }
            }}
          >
            Edit Message
          </Button>
          <Button
            onClick={copyToClipboard}
            variant="contained"
            startIcon={copySuccess ? <CheckCircleIcon /> : <ContentCopyIcon />}
            size="large"
            sx={{ 
              borderRadius: 2,
              px: 4,
              fontWeight: 700,
              background: copySuccess 
                ? `linear-gradient(45deg, ${theme.palette.success.main}, ${theme.palette.success.dark})`
                : `linear-gradient(45deg, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,
              color: '#ffffff !important',
              boxShadow: theme.shadows[4],
              '&:hover': {
                background: copySuccess
                  ? `linear-gradient(45deg, ${theme.palette.success.dark}, ${theme.palette.success.main})`
                  : `linear-gradient(45deg, ${theme.palette.secondary.dark}, ${theme.palette.secondary.main})`,
                boxShadow: theme.shadows[6],
                transform: 'translateY(-1px)'
              }
            }}
          >
            {copySuccess ? 'Email Copied!' : 'Copy Email'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* IMPROVED: Enhanced Status Update Dialog */}
      <Dialog
        open={showStatusDialog}
        onClose={() => setShowStatusDialog(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: { 
            borderRadius: 3,
            boxShadow: theme.shadows[8]
          }
        }}
      >
        <DialogTitle sx={{ 
          p: 3,
          borderBottom: `1px solid ${theme.palette.divider}`,
          background: `linear-gradient(135deg, ${theme.palette.success.main}15, ${theme.palette.primary.main}15)`
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Avatar sx={{ 
              bgcolor: theme.palette.success.main,
              width: 56,
              height: 56
            }}>
              <CheckCircleIcon sx={{ fontSize: '1.5rem' }} />
            </Avatar>
            <Box>
              <Typography variant="h6" sx={{ 
                fontWeight: 700, 
                color: theme.palette.success.main,
                mb: 0.5
              }}>
                Update Email Status
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Let us know what happened with your email
              </Typography>
            </Box>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ p: 3 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3, lineHeight: 1.6 }}>
            After copying the email content for <strong>{recruiter.firstName} {recruiter.lastName}</strong>, 
            please update the status below to help us track your outreach effectiveness:
          </Typography>

          <RadioGroup
            value={manualStatus}
            onChange={(e) => setManualStatus(e.target.value)}
          >
            <FormControlLabel
              value="sent"
              control={<Radio sx={{ color: theme.palette.success.main }} />}
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, py: 1 }}>
                  <CheckCircleIcon sx={{ color: theme.palette.success.main }} />
                  <Box>
                    <Typography variant="body2" sx={{ fontWeight: 600 }}>
                      Email sent successfully
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      I copied the content and sent the email
                    </Typography>
                  </Box>
                </Box>
              }
            />
            <FormControlLabel
              value="drafted"
              control={<Radio sx={{ color: theme.palette.warning.main }} />}
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, py: 1 }}>
                  <DraftsIcon sx={{ color: theme.palette.warning.main }} />
                  <Box>
                    <Typography variant="body2" sx={{ fontWeight: 600 }}>
                      Saved as draft for later
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      I saved the email content to send later
                    </Typography>
                  </Box>
                </Box>
              }
            />
            <FormControlLabel
              value="cancelled"
              control={<Radio sx={{ color: theme.palette.error.main }} />}
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, py: 1 }}>
                  <CancelIcon sx={{ color: theme.palette.error.main }} />
                  <Box>
                    <Typography variant="body2" sx={{ fontWeight: 600 }}>
                      Decided not to send
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      I chose not to send this email
                    </Typography>
                  </Box>
                </Box>
              }
            />
          </RadioGroup>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: `1px solid ${theme.palette.divider}`,
          background: `linear-gradient(135deg, ${theme.palette.grey[50]}, white)`
        }}>
          <Button 
            onClick={() => setShowStatusDialog(false)}
            variant="outlined"
            sx={{ 
              borderRadius: 2,
              fontWeight: 600
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleStatusUpdate}
            variant="contained"
            sx={{ 
              borderRadius: 2,
              fontWeight: 700,
              px: 3,
              background: `linear-gradient(45deg, ${theme.palette.success.main}, ${theme.palette.success.dark})`,
              color: '#ffffff !important',
              '&:hover': {
                background: `linear-gradient(45deg, ${theme.palette.success.dark}, ${theme.palette.success.main})`
              }
            }}
          >
            Update Status
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default OutreachComposer;

================
File: src/components/recruiters/OutreachTracker.js
================
// src/components/recruiters/OutreachTracker.js - UPDATED WITH BETTER ERROR HANDLING
import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Grid,
  IconButton,
  Tooltip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  Divider,
  Alert,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  Email as EmailIcon,
  LinkedIn as LinkedInIcon,
  Phone as PhoneIcon,
  Schedule as ScheduleIcon,
  Reply as ReplyIcon,
  Edit as EditIcon,
  Visibility as VisibilityIcon,
  ExpandMore as ExpandMoreIcon,
  Send as SendIcon,
  Drafts as DraftIcon,
  CheckCircle as CheckCircleIcon,
  Business as BusinessIcon,
  Delete as DeleteIcon,
  FilterList as FilterListIcon,
  Sort as SortIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import recruiterService from '../../utils/recruiterService';

const OutreachCard = ({ campaign, onViewRecruiter, onEditCampaign, onDeleteCampaign }) => {
  const theme = useTheme();
  const formatted = recruiterService.formatOutreachForDisplay(campaign);

  const getStatusIcon = (status) => {
    switch (status) {
      case 'drafted':
        return <DraftIcon color="action" />;
      case 'sent':
        return <SendIcon color="warning" />;
      case 'replied':
        return <ReplyIcon color="success" />;
      case 'delivered':
        return <CheckCircleIcon color="info" />;
      default:
        return <EmailIcon color="action" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'drafted':
        return 'default';
      case 'sent':
        return 'warning';
      case 'replied':
        return 'success';
      case 'delivered':
        return 'info';
      default:
        return 'default';
    }
  };

  const getSentViaIcon = (sentVia) => {
    switch (sentVia) {
      case 'linkedin':
        return <LinkedInIcon fontSize="small" />;
      case 'email':
        return <EmailIcon fontSize="small" />;
      case 'phone':
        return <PhoneIcon fontSize="small" />;
      default:
        return <BusinessIcon fontSize="small" />;
    }
  };

  const handleViewRecruiter = () => {
    console.log('🔍 OutreachCard: handleViewRecruiter called');
    console.log('📋 Campaign data:', campaign);
    
    if (!onViewRecruiter) {
      console.error('❌ onViewRecruiter function not provided');
      return;
    }

    // Try different ways to get the recruiterId
    let recruiterId = campaign.recruiterId || campaign.recruiter_id || campaign.recruiter?.id;
    
    if (!recruiterId) {
      console.error('❌ No recruiterId found in campaign data:', {
        recruiterId: campaign.recruiterId,
        recruiter_id: campaign.recruiter_id,
        recruiterObject: campaign.recruiter
      });
      return;
    }

    console.log('✅ Found recruiterId:', recruiterId);
    
    // Create a recruiter object with the ID and any available recruiter data
    const recruiterData = {
      id: recruiterId,
      ...campaign.recruiter // Spread any additional recruiter data if available
    };
    
    console.log('📤 Calling onViewRecruiter with:', recruiterData);
    onViewRecruiter(recruiterData);
  };

  const handleEditCampaign = () => {
    console.log('✏️ OutreachCard: handleEditCampaign called for campaign:', campaign.id);
    if (onEditCampaign) {
      onEditCampaign(campaign);
    }
  };

  const handleDeleteCampaign = () => {
    console.log('🗑️ OutreachCard: handleDeleteCampaign called for campaign:', campaign.id);
    if (onDeleteCampaign) {
      onDeleteCampaign(campaign.id);
    } else {
      console.error('❌ onDeleteCampaign function not provided');
    }
  };

  return (
    <Card elevation={2} sx={{ mb: 2, borderLeft: `4px solid ${theme.palette[getStatusColor(campaign.status)]?.main || theme.palette.grey[400]}` }}>
      <CardContent>
        <Grid container spacing={2} alignItems="center">
          {/* Recruiter Info */}
          <Grid item xs={12} sm={6} md={4}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Avatar
                sx={{
                  bgcolor: theme.palette.primary.main,
                  width: 40,
                  height: 40
                }}
              >
                {formatted?.recruiterDisplay ? 
                  formatted.recruiterDisplay.split(' ').map(n => n[0]).join('').substring(0, 2) :
                  'UK'
                }
              </Avatar>
              <Box>
                <Typography variant="subtitle2" fontWeight={600}>
                  {formatted?.recruiterDisplay || campaign.recruiter?.name || 'Unknown Recruiter'}
                </Typography>
                <Typography variant="caption" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                  <BusinessIcon fontSize="small" />
                  {formatted?.companyDisplay || campaign.recruiter?.company?.name || 'Unknown Company'}
                </Typography>
              </Box>
            </Box>
          </Grid>

          {/* Status and Message Info */}
          <Grid item xs={12} sm={6} md={4}>
            <Box>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                <Chip
                  icon={getStatusIcon(campaign.status)}
                  label={formatted?.statusDisplay || campaign.status}
                  size="small"
                  color={getStatusColor(campaign.status)}
                  variant="filled"
                />
                <Chip
                  icon={getSentViaIcon(campaign.sentVia)}
                  label={campaign.sentVia || 'unknown'}
                  size="small"
                  variant="outlined"
                />
              </Box>
              <Typography variant="body2" color="text.secondary" noWrap>
                {formatted?.messagePreview || campaign.messageContent?.substring(0, 100) + '...' || 'No message preview'}
              </Typography>
            </Box>
          </Grid>

          {/* Dates and Actions */}
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box>
                <Typography variant="caption" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                  <ScheduleIcon fontSize="small" />
                  Created: {formatted?.createdDisplay || new Date(campaign.createdAt).toLocaleDateString()}
                </Typography>
                {(formatted?.sentDisplay || campaign.sentAt) && (
                  <Typography variant="caption" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                    <SendIcon fontSize="small" />
                    Sent: {formatted?.sentDisplay || new Date(campaign.sentAt).toLocaleDateString()}
                  </Typography>
                )}
                {(formatted?.hasReplies || campaign.repliesCount > 0) && (
                  <Typography variant="caption" color="success.main" sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                    <ReplyIcon fontSize="small" />
                    {campaign.repliesCount || 0} replies
                  </Typography>
                )}
              </Box>

              {/* Action Buttons */}
              <Box sx={{ display: 'flex', gap: 0.5 }}>
                <Tooltip title="View Recruiter">
                  <IconButton size="small" onClick={handleViewRecruiter}>
                    <VisibilityIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                
                {(formatted?.canEdit || campaign.status === 'drafted') && (
                  <Tooltip title="Edit Campaign">
                    <IconButton size="small" onClick={handleEditCampaign}>
                      <EditIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                )}
                
                <Tooltip title="Delete Campaign">
                  <IconButton 
                    size="small" 
                    onClick={handleDeleteCampaign} 
                    color="error"
                    sx={{ '&:hover': { backgroundColor: 'error.main', color: 'white' } }}
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </Box>
          </Grid>
        </Grid>

        {/* Expandable Message Content */}
        <Accordion elevation={0} sx={{ mt: 2, '&:before': { display: 'none' } }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="body2">View Full Message</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
              {campaign.messageContent || 'No message content available'}
            </Typography>
          </AccordionDetails>
        </Accordion>
      </CardContent>
    </Card>
  );
};

const OutreachTracker = ({ 
  campaigns = [], 
  loading = false, 
  onRefresh, 
  onViewRecruiter, 
  onEditCampaign 
}) => {
  const theme = useTheme();
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortBy, setSortBy] = useState('createdAt');
  const [sortOrder, setSortOrder] = useState('desc');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [campaignToDelete, setCampaignToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  // Filter and sort campaigns
  const filteredAndSortedCampaigns = React.useMemo(() => {
    let filtered = campaigns;

    // Apply status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(campaign => campaign.status === statusFilter);
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let aValue, bValue;
      
      switch (sortBy) {
        case 'createdAt':
          aValue = new Date(a.createdAt);
          bValue = new Date(b.createdAt);
          break;
        case 'sentAt':
          aValue = a.sentAt ? new Date(a.sentAt) : new Date(0);
          bValue = b.sentAt ? new Date(b.sentAt) : new Date(0);
          break;
        case 'recruiterName':
          aValue = (a.recruiter?.name || '').toLowerCase();
          bValue = (b.recruiter?.name || '').toLowerCase();
          break;
        case 'company':
          aValue = (a.recruiter?.company?.name || '').toLowerCase();
          bValue = (b.recruiter?.company?.name || '').toLowerCase();
          break;
        default:
          aValue = a[sortBy];
          bValue = b[sortBy];
      }

      if (sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return filtered;
  }, [campaigns, statusFilter, sortBy, sortOrder]);

  const handleDeleteCampaign = async (campaignId) => {
    console.log('🗑️ OutreachTracker: Delete requested for campaign:', campaignId);
    
    if (!campaignId) {
      console.error('❌ No campaign ID provided for deletion');
      showNotification('Error: No campaign ID provided', 'error');
      return;
    }

    setCampaignToDelete(campaignId);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!campaignToDelete) {
      console.error('❌ No campaign selected for deletion');
      return;
    }

    try {
      setIsDeleting(true);
      console.log(`🗑️ Attempting to delete campaign: ${campaignToDelete}`);
      
      const result = await recruiterService.deleteOutreach(campaignToDelete);
      console.log('✅ Delete successful:', result);
      
      showNotification('Campaign deleted successfully!', 'success');
      
      // Close dialog
      setDeleteDialogOpen(false);
      setCampaignToDelete(null);
      
      // Refresh the list
      if (onRefresh) {
        console.log('🔄 Calling onRefresh to update the list');
        onRefresh();
      } else {
        console.warn('⚠️ onRefresh function not provided - list may not update');
      }
      
    } catch (error) {
      console.error('❌ Delete failed:', error);
      
      let errorMessage = 'Failed to delete campaign';
      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      showNotification(errorMessage, 'error');
    } finally {
      setIsDeleting(false);
    }
  };

  const cancelDelete = () => {
    console.log('❌ Delete cancelled by user');
    setDeleteDialogOpen(false);
    setCampaignToDelete(null);
  };

  const showNotification = (message, severity = 'success') => {
    setNotification({
      open: true,
      message,
      severity
    });
  };

  const getStatusCounts = () => {
    const counts = {
      all: campaigns.length,
      drafted: 0,
      sent: 0,
      replied: 0,
      delivered: 0
    };

    campaigns.forEach(campaign => {
      if (counts.hasOwnProperty(campaign.status)) {
        counts[campaign.status]++;
      }
    });

    return counts;
  };

  const statusCounts = getStatusCounts();

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress size={60} />
          <Typography variant="h6" sx={{ mt: 2, color: 'text.secondary' }}>
            Loading outreach campaigns...
          </Typography>
        </Box>
      </Box>
    );
  }

  if (campaigns.length === 0) {
    return (
      <Card elevation={1} sx={{ textAlign: 'center', py: 8 }}>
        <CardContent>
          <EmailIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
          <Typography variant="h6" gutterBottom>
            No outreach campaigns yet
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            Start by searching for recruiters and sending your first outreach message.
          </Typography>
          <Button variant="outlined" onClick={onRefresh}>
            Refresh
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Box>
      {/* Header with Filters */}
      <Card elevation={1} sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <EmailIcon color="primary" />
              Outreach Campaigns ({campaigns.length})
            </Typography>
            
            <Button
              variant="outlined"
              startIcon={<RefreshIcon />}
              onClick={onRefresh}
              disabled={loading}
            >
              Refresh
            </Button>
          </Box>

          {/* Filters and Sorting */}
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={6} md={3}>
              <FormControl fullWidth size="small">
                <InputLabel>Status Filter</InputLabel>
                <Select
                  value={statusFilter}
                  label="Status Filter"
                  onChange={(e) => setStatusFilter(e.target.value)}
                >
                  <MenuItem value="all">All ({statusCounts.all})</MenuItem>
                  <MenuItem value="drafted">Drafted ({statusCounts.drafted})</MenuItem>
                  <MenuItem value="sent">Sent ({statusCounts.sent})</MenuItem>
                  <MenuItem value="delivered">Delivered ({statusCounts.delivered})</MenuItem>
                  <MenuItem value="replied">Replied ({statusCounts.replied})</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <FormControl fullWidth size="small">
                <InputLabel>Sort By</InputLabel>
                <Select
                  value={sortBy}
                  label="Sort By"
                  onChange={(e) => setSortBy(e.target.value)}
                >
                  <MenuItem value="createdAt">Date Created</MenuItem>
                  <MenuItem value="sentAt">Date Sent</MenuItem>
                  <MenuItem value="recruiterName">Recruiter Name</MenuItem>
                  <MenuItem value="company">Company</MenuItem>
                  <MenuItem value="status">Status</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <FormControl fullWidth size="small">
                <InputLabel>Order</InputLabel>
                <Select
                  value={sortOrder}
                  label="Order"
                  onChange={(e) => setSortOrder(e.target.value)}
                >
                  <MenuItem value="desc">Newest First</MenuItem>
                  <MenuItem value="asc">Oldest First</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Typography variant="body2" color="text.secondary" textAlign="center">
                Showing {filteredAndSortedCampaigns.length} of {campaigns.length} campaigns
              </Typography>
            </Grid>
          </Grid>

          {/* Status Summary */}
          <Box sx={{ display: 'flex', gap: 1, mt: 2, flexWrap: 'wrap' }}>
            <Chip 
              label={`${statusCounts.drafted} Drafts`} 
              size="small" 
              color="default" 
              variant={statusFilter === 'drafted' ? 'filled' : 'outlined'}
              onClick={() => setStatusFilter('drafted')}
              sx={{ cursor: 'pointer' }}
            />
            <Chip 
              label={`${statusCounts.sent} Sent`} 
              size="small" 
              color="warning" 
              variant={statusFilter === 'sent' ? 'filled' : 'outlined'}
              onClick={() => setStatusFilter('sent')}
              sx={{ cursor: 'pointer' }}
            />
            <Chip 
              label={`${statusCounts.delivered} Delivered`} 
              size="small" 
              color="info" 
              variant={statusFilter === 'delivered' ? 'filled' : 'outlined'}
              onClick={() => setStatusFilter('delivered')}
              sx={{ cursor: 'pointer' }}
            />
            <Chip 
              label={`${statusCounts.replied} Replied`} 
              size="small" 
              color="success" 
              variant={statusFilter === 'replied' ? 'filled' : 'outlined'}
              onClick={() => setStatusFilter('replied')}
              sx={{ cursor: 'pointer' }}
            />
          </Box>
        </CardContent>
      </Card>

      {/* Campaigns List */}
      {filteredAndSortedCampaigns.length === 0 ? (
        <Alert severity="info" sx={{ mb: 2 }}>
          No campaigns match the current filter criteria.
        </Alert>
      ) : (
        <Box>
          {filteredAndSortedCampaigns.map((campaign, index) => (
            <OutreachCard
              key={campaign.id || index}
              campaign={campaign}
              onViewRecruiter={onViewRecruiter}
              onEditCampaign={onEditCampaign}
              onDeleteCampaign={handleDeleteCampaign}
            />
          ))}
        </Box>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={cancelDelete}
        PaperProps={{
          sx: { borderRadius: 2 }
        }}
      >
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <Typography>
            Are you sure you want to delete this outreach campaign? This action cannot be undone.
          </Typography>
          {campaignToDelete && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              Campaign ID: {campaignToDelete}
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={cancelDelete} disabled={isDeleting}>
            Cancel
          </Button>
          <Button 
            onClick={confirmDelete} 
            color="error" 
            variant="contained"
            disabled={isDeleting}
            startIcon={isDeleting ? <CircularProgress size={16} color="inherit" /> : null}
          >
            {isDeleting ? 'Deleting...' : 'Delete'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Notification Snackbar */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={() => setNotification({ ...notification, open: false })}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setNotification({ ...notification, open: false })}
          severity={notification.severity}
          variant="filled"
          sx={{ borderRadius: 2 }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default OutreachTracker;

================
File: src/components/recruiters/RecruiterDetails.js
================
// src/components/recruiters/RecruiterDetails.js
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Avatar,
  Divider,
  IconButton,
  Card,
  CardContent,
  Grid,
  Chip,
  Link,
  CircularProgress,
  Alert,
  Paper
} from '@mui/material';
import {
  Close as CloseIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  LinkedIn as LinkedInIcon,
  Business as BusinessIcon,
  Work as WorkIcon,
  Language as LanguageIcon,
  CalendarToday as CalendarTodayIcon,
  Send as SendIcon,
  Star as StarIcon,
  Groups as GroupsIcon,
  Domain as DomainIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import recruiterService from '../../utils/recruiterService';

const RecruiterDetails = ({ open, onClose, recruiterId, onStartOutreach }) => {
  const theme = useTheme();
  const [recruiter, setRecruiter] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Reset state when dialog opens/closes or recruiterId changes
  useEffect(() => {
    if (open && recruiterId) {
      loadRecruiterDetails();
    } else {
      // Reset state when dialog closes or no recruiterId
      setRecruiter(null);
      setError('');
      setLoading(false);
    }
  }, [open, recruiterId]);

  const loadRecruiterDetails = async () => {
    // Don't load if no recruiterId provided
    if (!recruiterId) {
      setError('No recruiter selected');
      return;
    }

    try {
      setLoading(true);
      setError('');
      console.log('🔍 Loading recruiter details for ID:', recruiterId);
      
      const response = await recruiterService.getRecruiterDetails(recruiterId);
      
      if (response && response.recruiter) {
        setRecruiter(response.recruiter);
        console.log('✅ Recruiter details loaded:', response.recruiter.fullName);
      } else {
        setError('Recruiter data not found');
      }
    } catch (error) {
      console.error('Failed to load recruiter details:', error);
      setError('Failed to load recruiter details. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    // Reset all state when closing
    setRecruiter(null);
    setError('');
    setLoading(false);
    onClose();
  };

  const handleStartOutreach = () => {
    if (recruiter) {
      onStartOutreach(recruiter);
      handleClose();
    }
  };

  const formatCompanySize = (sizeString) => {
    if (!sizeString) return 'Not specified';
    
    // Handle formats like "10000plus" or "1000plus"
    const plusMatch = sizeString.match(/(\d+)plus/i);
    if (plusMatch) {
      const [, number] = plusMatch;
      return `${parseInt(number).toLocaleString()}+ employees`;
    }
    
    // Handle formats like "Employees.1000to4999" or "1000to4999"
    const rangeMatch = sizeString.match(/(\d+)to(\d+)/);
    if (rangeMatch) {
      const [, min, max] = rangeMatch;
      return `${parseInt(min).toLocaleString()} - ${parseInt(max).toLocaleString()} employees`;
    }
    
    // Handle other formats like "Employees.1000plus"
    if (sizeString.includes('Employees.')) {
      const cleanedSize = sizeString.replace('Employees.', '');
      
      // Check for plus format after removing "Employees."
      const plusMatch2 = cleanedSize.match(/(\d+)plus/i);
      if (plusMatch2) {
        const [, number] = plusMatch2;
        return `${parseInt(number).toLocaleString()}+ employees`;
      }
      
      // Check for range format after removing "Employees."
      const rangeMatch2 = cleanedSize.match(/(\d+)to(\d+)/);
      if (rangeMatch2) {
        const [, min, max] = rangeMatch2;
        return `${parseInt(min).toLocaleString()} - ${parseInt(max).toLocaleString()} employees`;
      }
      
      return cleanedSize.replace('to', ' - ') + ' employees';
    }
    
    return sizeString;
  };

  const getInitials = (firstName, lastName) => {
    return `${firstName?.[0] || ''}${lastName?.[0] || ''}`.toUpperCase();
  };

  const getAvatarColor = () => {
    const colors = [
      theme.palette.primary.main,
      theme.palette.secondary.main,
      theme.palette.success.main,
      theme.palette.warning.main,
      theme.palette.info.main
    ];
    // Use recruiter ID to consistently assign colors
    const colorIndex = (recruiterId || 0) % colors.length;
    return colors[colorIndex];
  };

  // Safe text rendering function
  const safeText = (value) => {
    if (value === null || value === undefined) return 'Not specified';
    if (typeof value === 'object') {
      // Handle industry object specifically
      if (value.name) return value.name;
      if (value.description) return value.description;
      return 'Not specified';
    }
    return String(value);
  };

  // Extract industry name safely
  const getIndustryName = (industry) => {
    if (!industry) return 'Not specified';
    if (typeof industry === 'string') return industry;
    if (typeof industry === 'object' && industry.name) return industry.name;
    return 'Not specified';
  };

  // Don't render dialog if not open
  if (!open) return null;

  // Show error state if no recruiterId provided
  if (!recruiterId) {
    return (
      <Dialog
        open={open}
        onClose={handleClose}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: { borderRadius: 3 }
        }}
      >
        <DialogTitle sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          borderBottom: `1px solid ${theme.palette.divider}`
        }}>
          <Typography variant="h6" sx={{ color: theme.palette.error.main }}>
            Error
          </Typography>
          <IconButton onClick={handleClose}>
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent sx={{ p: 3 }}>
          <Alert severity="error" sx={{ borderRadius: 2 }}>
            No recruiter selected. Please select a recruiter to view details.
          </Alert>
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button onClick={handleClose} variant="contained">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    );
  }

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: { 
          borderRadius: 3,
          minHeight: '500px'
        }
      }}
    >
      {/* Header */}
      <DialogTitle sx={{ 
        p: 0,
        background: `linear-gradient(135deg, ${theme.palette.primary.main}15, ${theme.palette.secondary.main}15)`,
        borderBottom: `1px solid ${theme.palette.divider}`
      }}>
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          p: 3
        }}>
          <Typography variant="h5" sx={{ fontWeight: 600, color: theme.palette.primary.main }}>
            Recruiter Details
          </Typography>
          <IconButton 
            onClick={handleClose}
            sx={{ 
              bgcolor: 'background.paper',
              '&:hover': { bgcolor: 'grey.100' }
            }}
          >
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent sx={{ p: 0 }}>
        {loading && (
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>
            <Box sx={{ textAlign: 'center' }}>
              <CircularProgress size={60} sx={{ color: theme.palette.primary.main, mb: 2 }} />
              <Typography variant="h6" color="text.secondary">
                Loading recruiter details...
              </Typography>
            </Box>
          </Box>
        )}

        {error && (
          <Box sx={{ p: 3 }}>
            <Alert 
              severity="error" 
              sx={{ borderRadius: 2 }}
              action={
                <Button 
                  color="inherit" 
                  size="small" 
                  onClick={loadRecruiterDetails}
                  disabled={loading}
                >
                  Retry
                </Button>
              }
            >
              {error}
            </Alert>
          </Box>
        )}

        {recruiter && !loading && !error && (
          <Box sx={{ p: 3 }}>
            {/* Profile Header */}
            <Paper 
              elevation={0} 
              sx={{ 
                p: 3, 
                mb: 3, 
                borderRadius: 2,
                background: `linear-gradient(135deg, ${theme.palette.primary.main}08, ${theme.palette.secondary.main}08)`,
                border: `1px solid ${theme.palette.divider}`
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>
                <Avatar
                  sx={{
                    width: 80,
                    height: 80,
                    bgcolor: getAvatarColor(),
                    fontSize: '2rem',
                    fontWeight: 'bold',
                    border: `3px solid ${theme.palette.background.paper}`,
                    boxShadow: theme.shadows[4]
                  }}
                >
                  {getInitials(recruiter.firstName, recruiter.lastName)}
                </Avatar>
                
                <Box sx={{ flex: 1 }}>
                  <Typography variant="h4" sx={{ fontWeight: 600, mb: 1, color: theme.palette.text.primary }}>
                    {safeText(recruiter.fullName || `${recruiter.firstName || ''} ${recruiter.lastName || ''}`)}
                  </Typography>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                    <WorkIcon sx={{ color: theme.palette.primary.main, fontSize: '1.2rem' }} />
                    <Typography variant="h6" sx={{ color: theme.palette.primary.main, fontWeight: 500 }}>
                      {safeText(recruiter.title)}
                    </Typography>
                  </Box>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <BusinessIcon sx={{ color: theme.palette.text.secondary, fontSize: '1.1rem' }} />
                    <Typography variant="body1" color="text.secondary" sx={{ fontWeight: 500 }}>
                      {safeText(recruiter.company?.name)}
                    </Typography>
                    {recruiter.rating && (
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, ml: 2 }}>
                        <StarIcon sx={{ color: theme.palette.warning.main, fontSize: '1.1rem' }} />
                        <Typography variant="body2" sx={{ fontWeight: 600 }}>
                          {Number(recruiter.rating).toFixed(1)}
                        </Typography>
                      </Box>
                    )}
                  </Box>
                </Box>
                
                {recruiter.outreach?.hasContacted && (
                  <Chip
                    label="Previously Contacted"
                    color="success"
                    variant="outlined"
                    sx={{ 
                      borderRadius: 2,
                      fontWeight: 500
                    }}
                  />
                )}
              </Box>
            </Paper>

            <Grid container spacing={3}>
              {/* Contact Information */}
              <Grid item xs={12} md={6}>
                <Card elevation={0} sx={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                  <CardContent sx={{ p: 3 }}>
                    <Typography 
                      variant="h6" 
                      gutterBottom 
                      sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1, 
                        mb: 2,
                        color: theme.palette.primary.main,
                        fontWeight: 600
                      }}
                    >
                      <EmailIcon />
                      Contact Information
                    </Typography>

                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      {recruiter.email && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <EmailIcon sx={{ color: theme.palette.primary.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Email
                            </Typography>
                            <Link
                              href={`mailto:${recruiter.email}`}
                              sx={{ 
                                color: theme.palette.primary.main,
                                textDecoration: 'none',
                                fontWeight: 500,
                                '&:hover': { textDecoration: 'underline' }
                              }}
                            >
                              {safeText(recruiter.email)}
                            </Link>
                          </Box>
                        </Box>
                      )}

                      {recruiter.phone && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <PhoneIcon sx={{ color: theme.palette.success.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Phone
                            </Typography>
                            <Link
                              href={`tel:${recruiter.phone}`}
                              sx={{ 
                                color: theme.palette.text.primary,
                                textDecoration: 'none',
                                fontWeight: 500,
                                '&:hover': { textDecoration: 'underline' }
                              }}
                            >
                              {safeText(recruiter.phone)}
                            </Link>
                          </Box>
                        </Box>
                      )}

                      {recruiter.linkedinUrl && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <LinkedInIcon sx={{ color: '#0077b5', fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              LinkedIn
                            </Typography>
                            <Link
                              href={recruiter.linkedinUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              sx={{ 
                                color: '#0077b5',
                                textDecoration: 'none',
                                fontWeight: 500,
                                '&:hover': { textDecoration: 'underline' }
                              }}
                            >
                              LinkedIn Profile
                            </Link>
                          </Box>
                        </Box>
                      )}
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              {/* Company Details */}
              <Grid item xs={12} md={6}>
                <Card elevation={0} sx={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                  <CardContent sx={{ p: 3 }}>
                    <Typography 
                      variant="h6" 
                      gutterBottom 
                      sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1, 
                        mb: 2,
                        color: theme.palette.primary.main,
                        fontWeight: 600
                      }}
                    >
                      <DomainIcon />
                      Company Details
                    </Typography>

                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      {recruiter.company?.size && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <GroupsIcon sx={{ color: theme.palette.secondary.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Company Size
                            </Typography>
                            <Typography variant="body2" sx={{ fontWeight: 500 }}>
                              {formatCompanySize(recruiter.company.size)}
                            </Typography>
                          </Box>
                        </Box>
                      )}

                      {recruiter.industry && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <WorkIcon sx={{ color: theme.palette.info.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Industry
                            </Typography>
                            <Chip
                              label={getIndustryName(recruiter.industry)}
                              size="small"
                              variant="outlined"
                              color="primary"
                              sx={{ borderRadius: 1, fontWeight: 500 }}
                            />
                          </Box>
                        </Box>
                      )}

                      {recruiter.company?.foundedYear && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <CalendarTodayIcon sx={{ color: theme.palette.warning.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Founded
                            </Typography>
                            <Typography variant="body2" sx={{ fontWeight: 500 }}>
                              {safeText(recruiter.company.foundedYear)}
                            </Typography>
                          </Box>
                        </Box>
                      )}

                      {recruiter.company?.website && (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <LanguageIcon sx={{ color: theme.palette.success.main, fontSize: '1.2rem' }} />
                          <Box>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Website
                            </Typography>
                            <Link
                              href={String(recruiter.company.website).startsWith('http') ? 
                                recruiter.company.website : 
                                `https://${recruiter.company.website}`
                              }
                              target="_blank"
                              rel="noopener noreferrer"
                              sx={{ 
                                color: theme.palette.primary.main,
                                textDecoration: 'none',
                                fontWeight: 500,
                                '&:hover': { textDecoration: 'underline' }
                              }}
                            >
                              {safeText(recruiter.company.website)}
                            </Link>
                          </Box>
                        </Box>
                      )}
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              {/* Specializations */}
              {recruiter.specializations && Array.isArray(recruiter.specializations) && recruiter.specializations.length > 0 && (
                <Grid item xs={12}>
                  <Card elevation={0} sx={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
                    <CardContent sx={{ p: 3 }}>
                      <Typography 
                        variant="h6" 
                        gutterBottom 
                        sx={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          gap: 1, 
                          mb: 2,
                          color: theme.palette.primary.main,
                          fontWeight: 600
                        }}
                      >
                        <StarIcon />
                        Specializations
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                        {recruiter.specializations.map((spec, index) => (
                          <Chip
                            key={index}
                            label={safeText(spec)}
                            variant="outlined"
                            sx={{ 
                              borderRadius: 1,
                              fontWeight: 500,
                              '&:hover': {
                                backgroundColor: theme.palette.primary.main + '08'
                              }
                            }}
                          />
                        ))}
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              )}
            </Grid>
          </Box>
        )}
      </DialogContent>

      {/* Footer Actions - Only Close Button */}
      <DialogActions sx={{ 
        p: 3, 
        borderTop: `1px solid ${theme.palette.divider}`,
        background: theme.palette.grey[50]
      }}>
        <Button 
          onClick={handleClose} 
          variant="contained"
          sx={{ 
            borderRadius: 2,
            minWidth: 100
          }}
        >
          Close
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default RecruiterDetails;

================
File: src/components/recruiters/RecruiterList.js
================
// src/components/recruiters/RecruiterList.js - FIXED PAGINATION
import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Avatar,
  Button,
  Chip,
  Grid,
  IconButton,
  Tooltip,
  Rating,
  Divider,
  Link,
  Badge,
  CircularProgress,
  Alert,
  Pagination,
  Paper
} from '@mui/material';
import {
  Email as EmailIcon,
  Phone as PhoneIcon,
  LinkedIn as LinkedInIcon,
  Business as BusinessIcon,
  Visibility as VisibilityIcon,
  CheckCircle as CheckCircleIcon,
  Person as PersonIcon,
  Work as WorkIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import recruiterService from '../../utils/recruiterService';
import AutoJobLogo from '../common/AutoJobLogo';

const RecruiterCard = ({ recruiter, onViewDetails, onStartOutreach, onLoadMore }) => {
  const theme = useTheme();
  const [isLoading, setIsLoading] = useState(false);

  // Format recruiter data for display
  const formattedRecruiter = recruiterService.formatRecruiterForDisplay ? 
    recruiterService.formatRecruiterForDisplay(recruiter) : {
      displayName: `${recruiter.firstName} ${recruiter.lastName}`,
      companyDisplay: recruiter.company?.name || 'Company Not Available'
    };

  const handleStartOutreach = async () => {
    setIsLoading(true);
    try {
      await onStartOutreach(recruiter);
    } catch (error) {
      console.error('Failed to start outreach:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getContactStatusColor = (status) => {
    switch (status) {
      case 'replied':
        return 'success';
      case 'sent':
        return 'warning';
      case 'drafted':
        return 'info';
      default:
        return 'default';
    }
  };

  const getContactStatusText = (recruiter) => {
    if (recruiter.outreach?.hasContacted) {
      switch (recruiter.outreach.status) {
        case 'replied':
          return 'Replied';
        case 'sent':
          return 'Contacted';
        case 'drafted':
          return 'Draft Saved';
        default:
          return 'Contacted';
      }
    }
    return 'Not Contacted';
  };

  // Use different theme colors for avatar
  const getAvatarColor = (index) => {
    const colors = [
      theme.palette.secondary.main, // Teal
      theme.palette.warning.main,   // Orange
      theme.palette.success.main,   // Green
      theme.palette.info.main,      // Blue
      theme.palette.error.main      // Red
    ];
    // Use recruiter ID or name to consistently assign colors
    const colorIndex = (recruiter.id || recruiter.firstName?.charCodeAt(0) || 0) % colors.length;
    return colors[colorIndex];
  };

  return (
    <Card 
      elevation={0}
      sx={{ 
        height: '100%',
        transition: 'all 0.2s ease-in-out',
        border: `1px solid ${theme.palette.divider}`,
        borderRadius: 2,
        '&:hover': {
          elevation: 2,
          transform: 'translateY(-2px)',
          boxShadow: theme.shadows[4],
          borderColor: theme.palette.primary.light
        },
        ...(recruiter.outreach?.hasContacted && {
          borderColor: theme.palette.success.light,
          backgroundColor: `${theme.palette.success.main}08`
        })
      }}
    >
      <CardContent sx={{ p: 3, height: '100%', display: 'flex', flexDirection: 'column' }}>
        {/* Header with Avatar and Basic Info */}
        <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
          <Avatar
            sx={{
              width: 48,
              height: 48,
              mr: 2,
              bgcolor: getAvatarColor(),
              fontSize: '1.1rem',
              fontWeight: 'bold'
            }}
          >
            {recruiter.firstName?.[0]}{recruiter.lastName?.[0]}
          </Avatar>
          
          <Box sx={{ flex: 1, minWidth: 0 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
              <Typography 
                variant="h6" 
                sx={{ 
                  fontWeight: 600,
                  fontSize: '1.1rem',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                  color: theme.palette.text.primary
                }}
              >
                {formattedRecruiter.displayName}
              </Typography>
              
              {recruiter.outreach?.hasContacted && (
                <Tooltip title={`Status: ${getContactStatusText(recruiter)}`}>
                  <CheckCircleIcon 
                    sx={{ 
                      fontSize: 16, 
                      color: theme.palette.success.main
                    }} 
                  />
                </Tooltip>
              )}
            </Box>
            
            <Typography variant="body2" sx={{ color: theme.palette.primary.main, fontWeight: 500, mb: 0.5 }}>
              {recruiter.title}
            </Typography>
            
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <BusinessIcon sx={{ fontSize: 16, color: theme.palette.text.secondary }} />
              <Typography variant="body2" color="text.secondary" noWrap>
                {formattedRecruiter.companyDisplay}
              </Typography>
            </Box>
          </Box>

          {/* Rating */}
          {recruiter.rating && (
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
              <Rating
                value={recruiter.rating}
                readOnly
                size="small"
                precision={0.1}
              />
              <Typography variant="caption" color="text.secondary">
                {recruiter.rating.toFixed(1)}
              </Typography>
            </Box>
          )}
        </Box>

        {/* Company Logo and Info */}
        {recruiter.company?.logo && (
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <Avatar
              src={recruiter.company.logo}
              variant="square"
              sx={{ width: 20, height: 20, mr: 1 }}
            />
            <Typography variant="body2" color="text.secondary">
              {recruiter.company.size && `${recruiter.company.size} company`}
            </Typography>
          </Box>
        )}

        {/* Industry and Specializations */}
        {recruiter.industry && (
          <Box sx={{ mb: 2 }}>
            <Chip
              label={recruiter.industry}
              size="small"
              variant="outlined"
              color="primary"
              sx={{ mr: 1, mb: 1, borderRadius: 1 }}
            />
            {recruiter.specializations && recruiter.specializations.slice(0, 2).map((spec, index) => (
              <Chip
                key={index}
                label={spec}
                size="small"
                variant="outlined"
                sx={{ mr: 1, mb: 1, borderRadius: 1 }}
              />
            ))}
          </Box>
        )}

        {/* Contact Status */}
        <Box sx={{ mb: 2 }}>
          <Chip
            label={getContactStatusText(recruiter)}
            size="small"
            color={getContactStatusColor(recruiter.outreach?.status)}
            variant={recruiter.outreach?.hasContacted ? 'filled' : 'outlined'}
            sx={{ fontWeight: 500, borderRadius: 1 }}
          />
          
          {recruiter.outreach?.lastContactDate && (
            <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
              Last contact: {new Date(recruiter.outreach.lastContactDate).toLocaleDateString()}
            </Typography>
          )}
        </Box>

        {/* Contact Information */}
        <Box sx={{ mb: 2, flex: 1 }}>
          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            {recruiter.email && (
              <Tooltip title={`Email: ${recruiter.email}`}>
                <IconButton size="small" sx={{ color: theme.palette.primary.main }}>
                  <EmailIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            )}
            
            {recruiter.phone && (
              <Tooltip title={`Phone: ${recruiter.phone}`}>
                <IconButton size="small" sx={{ color: theme.palette.primary.main }}>
                  <PhoneIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            )}
            
            {recruiter.linkedinUrl && (
              <Tooltip title="LinkedIn Profile">
                <IconButton 
                  size="small" 
                  sx={{ color: theme.palette.primary.main }}
                  component={Link}
                  href={recruiter.linkedinUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <LinkedInIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            )}
          </Box>
        </Box>

        <Divider sx={{ mb: 2 }} />

        {/* Action Buttons */}
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<VisibilityIcon />}
            onClick={() => onViewDetails(recruiter)}
            size="small"
            sx={{ flex: 1, borderRadius: 2 }}
          >
            View Details
          </Button>
          
          <Button
            variant="contained"
            startIcon={isLoading ? <CircularProgress size={16} color="inherit" /> : 
              <AutoJobLogo variant="icon-only" size="small" sx={{ width: 24, height: 24 }} />
            }
            onClick={handleStartOutreach}
            disabled={isLoading}
            size="small"
            color={recruiter.outreach?.hasContacted ? 'secondary' : 'primary'}
            sx={{ flex: 1, borderRadius: 2 }}
          >
            {isLoading ? 'Loading...' : 'Contact Recruiter'}
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

const RecruiterList = ({ 
  searchResults, 
  loading, 
  error, 
  hasSearched,
  onViewDetails, 
  onStartOutreach,
  onLoadMore,
  onPageChange
}) => {
  const theme = useTheme();
  const [currentPage, setCurrentPage] = useState(1);

  const handlePageChange = (event, newPage) => {
    console.log(`📄 Page change requested: ${newPage}`);
    setCurrentPage(newPage);
    
    // Calculate offset for new page
    const limit = searchResults?.pagination?.limit || 20;
    const offset = (newPage - 1) * limit;
    
    // Call the page change handler with proper parameters
    if (onPageChange) {
      onPageChange(newPage, offset);
    } else if (onLoadMore) {
      // Fallback to onLoadMore if onPageChange not provided
      onLoadMore(newPage, offset);
    }
  };

  const handleLoadMore = () => {
    console.log('📄 Load more requested');
    if (onLoadMore) {
      const nextPage = currentPage + 1;
      const limit = searchResults?.pagination?.limit || 20;
      const offset = currentPage * limit; // Current page * limit for next batch
      
      setCurrentPage(nextPage);
      onLoadMore(nextPage, offset);
    }
  };

  // Show loading state
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />
          <Typography variant="h6" sx={{ mt: 2, color: 'text.secondary' }}>
            Searching recruiters...
          </Typography>
        </Box>
      </Box>
    );
  }

  // Show error state
  if (error) {
    return (
      <Alert 
        severity="error" 
        sx={{ 
          mb: 3, 
          borderRadius: 2,
          '& .MuiAlert-icon': {
            color: theme.palette.error.main
          }
        }}
      >
        {error}
      </Alert>
    );
  }

  // Show empty state only if user has searched
  if (hasSearched && (!searchResults || !searchResults.recruiters || searchResults.recruiters.length === 0)) {
    return (
      <Paper elevation={0} sx={{ textAlign: 'center', py: 8, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
        <PersonIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
        <Typography variant="h6" gutterBottom>
          No recruiters found
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
          Try adjusting your search criteria or filters to find more results.
        </Typography>
        <Button 
          variant="outlined" 
          onClick={() => window.location.reload()}
          sx={{ borderRadius: 2 }}
        >
          Reset Search
        </Button>
      </Paper>
    );
  }

  // Don't show anything if no search has been performed
  if (!hasSearched) {
    return null;
  }

  const { recruiters, pagination } = searchResults;
  const totalPages = Math.ceil(pagination.total / pagination.limit);

  console.log('🔍 RecruiterList render:', {
    recruitersCount: recruiters?.length,
    currentPage,
    totalPages,
    pagination
  });

  return (
    <Box>
      {/* Results Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <WorkIcon sx={{ color: theme.palette.primary.main }} />
          {pagination.total.toLocaleString()} Recruiters Found
        </Typography>
      </Box>

      {/* Recruiter Grid */}
      <Grid container spacing={3}>
        {recruiters.map((recruiter) => (
          <Grid item xs={12} sm={6} lg={4} key={recruiter.id}>
            <RecruiterCard
              recruiter={recruiter}
              onViewDetails={onViewDetails}
              onStartOutreach={onStartOutreach}
              onLoadMore={onLoadMore}
            />
          </Grid>
        ))}
      </Grid>

      {/* Pagination - Only show if more than one page */}
      {totalPages > 1 && (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <Pagination
            count={totalPages}
            page={currentPage}
            onChange={handlePageChange}
            color="primary"
            size="large"
            showFirstButton
            showLastButton
            sx={{
              '& .MuiPaginationItem-root': {
                borderRadius: 2
              }
            }}
          />
        </Box>
      )}

      {/* Load More Button (Alternative to pagination) - REMOVED */}
      {/* This section has been removed as requested */}

      {/* Results Summary - SIMPLIFIED */}
      <Paper 
        elevation={0}
        sx={{ 
          mt: 3, 
          p: 2, 
          borderRadius: 2, 
          textAlign: 'center',
          border: `1px solid ${theme.palette.divider}`,
          bgcolor: theme.palette.grey[50]
        }}
      >
        <Typography variant="body2" color="text.secondary">
          Showing {recruiters.length} of {pagination.total.toLocaleString()} recruiters
        </Typography>
      </Paper>
    </Box>
  );
};

export default RecruiterList;

================
File: src/components/recruiters/RecruiterPage.js
================
// src/components/recruiters/RecruiterPage.js - UPDATED WITH PAGINATION AND BADGE COUNT
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Container,
  Typography,
  Tabs,
  Tab,
  Alert,
  Snackbar,
  Tooltip,
  Badge
} from '@mui/material';
import {
  Search as SearchIcon,
  Message as MessageIcon,
  Analytics as AnalyticsIcon,
  TrendingUp as TrendingUpIcon,
  People as PeopleIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import MainLayout from '../layout/MainLayout';
import PageHeader from '../common/PageHeader';
import RecruiterSearch from './RecruiterSearch';
import RecruiterList from './RecruiterList';
import RecruiterDetails from './RecruiterDetails';
import OutreachComposer from './OutreachComposer';
import OutreachTracker from './OutreachTracker';
import recruiterService from '../../utils/recruiterService';

const TabPanel = ({ children, value, index, ...other }) => (
  <div
    role="tabpanel"
    hidden={value !== index}
    id={`recruiter-tabpanel-${index}`}
    aria-labelledby={`recruiter-tab-${index}`}
    {...other}
  >
    {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
  </div>
);

const RecruiterPage = () => {
  const theme = useTheme();
  
  // Tab state
  const [activeTab, setActiveTab] = useState(0);
  
  // Search state
  const [searchResults, setSearchResults] = useState(null);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchError, setSearchError] = useState('');
  const [hasSearched, setHasSearched] = useState(false);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [currentSearchParams, setCurrentSearchParams] = useState(null);
  
  // Dialog state
  const [selectedRecruiter, setSelectedRecruiter] = useState(null);
  const [showRecruiterDetails, setShowRecruiterDetails] = useState(false);
  const [showOutreachComposer, setShowOutreachComposer] = useState(false);
  
  // Outreach state - Load immediately for badge count
  const [outreachCampaigns, setOutreachCampaigns] = useState([]);
  const [outreachLoading, setOutreachLoading] = useState(false);
  const [analytics, setAnalytics] = useState(null);
  
  // Notification state
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  // Refs for component communication
  const searchRef = useRef(null);

  // Load initial data immediately when component mounts
  useEffect(() => {
    // Always load outreach campaigns for badge count
    loadOutreachCampaigns();
  }, []);

  // Load additional data when tab changes
  useEffect(() => {
    if (activeTab === 2) {
      loadAnalytics();
    }
  }, [activeTab]);

  // Search handlers
  const handleSearchResults = (results, searchParams = null) => {
    console.log('🔍 RecruiterPage: Search results received:', results);
    console.log('🔍 RecruiterPage: Search params received:', searchParams);
    
    setSearchResults(results);
    setSearchError('');
    setHasSearched(true);
    setCurrentPage(1); // Reset to page 1 for new search
    
    // Store search params for pagination (FIXED)
    if (searchParams) {
      setCurrentSearchParams(searchParams);
      console.log('✅ RecruiterPage: Stored search params:', searchParams);
    }
  };

  const handleSearchLoading = (loading) => {
    setSearchLoading(loading);
  };

  const handleSearchError = (error) => {
    setSearchError(error);
    setHasSearched(true);
    showNotification(error, 'error');
  };

  // Pagination handler - this is the key fix
  const handlePageChange = async (page, offset) => {
    console.log(`📄 RecruiterPage: Page change - Page: ${page}, Offset: ${offset}`);
    console.log(`🔍 RecruiterPage: Using stored search params:`, currentSearchParams);
    
    try {
      setSearchLoading(true);
      setCurrentPage(page);
      
      // Use the stored search parameters with pagination (FIXED)
      const searchFilters = {
        ...currentSearchParams, // This now contains the proper search filters
        limit: 20,
        offset: offset
      };
      
      console.log('🔍 RecruiterPage: Performing paginated search:', searchFilters);
      
      const response = await recruiterService.searchRecruiters(searchFilters);
      
      console.log('✅ RecruiterPage: Paginated results received:', response);
      setSearchResults(response);
      
    } catch (error) {
      console.error('❌ RecruiterPage: Pagination failed:', error);
      showNotification('Failed to load more recruiters', 'error');
    } finally {
      setSearchLoading(false);
    }
  };

  // Enhanced search results handler that stores search params
  const handleSearchResultsWithParams = (results, searchParams = null) => {
    console.log('🔍 RecruiterPage: Search results with params:', { results, searchParams });
    
    setSearchResults(results);
    setSearchError('');
    setHasSearched(true);
    setCurrentPage(1);
    
    // Store search parameters for pagination
    if (searchParams) {
      setCurrentSearchParams(searchParams);
    }
  };

  // Load more handler (alternative to pagination)
  const handleLoadMore = async (page, offset) => {
    console.log(`📄 RecruiterPage: Load more - Page: ${page}, Offset: ${offset}`);
    await handlePageChange(page, offset);
  };

  // Recruiter handlers
  const handleViewRecruiterDetails = (recruiter) => {
    setSelectedRecruiter(recruiter);
    setShowRecruiterDetails(true);
  };

  const handleStartOutreach = (recruiter) => {
    setSelectedRecruiter(recruiter);
    setShowOutreachComposer(true);
  };

  // Outreach handlers
  const handleSendOutreach = async (outreachData) => {
    try {
      const response = await recruiterService.createOutreach(outreachData);
      
      // Immediately send the outreach
      await recruiterService.sendOutreach(response.outreach.id);
      
      showNotification('Message sent successfully!', 'success');
      
      // Reload outreach campaigns to update count
      loadOutreachCampaigns();
      
    } catch (error) {
      console.error('Failed to send outreach:', error);
      showNotification('Failed to send message. Please try again.', 'error');
      throw error;
    }
  };

  const handleSaveOutreach = async (outreachData) => {
    try {
      await recruiterService.createOutreach(outreachData);
      showNotification('Draft saved successfully!', 'success');
      
      // Reload outreach campaigns to update count
      loadOutreachCampaigns();
      
    } catch (error) {
      console.error('Failed to save outreach:', error);
      showNotification('Failed to save draft. Please try again.', 'error');
      throw error;
    }
  };

  // Load outreach campaigns
  const loadOutreachCampaigns = async () => {
    try {
      setOutreachLoading(true);
      console.log('📋 Loading outreach campaigns for badge count...');
      
      const response = await recruiterService.getUserOutreach({ limit: 50 });
      const campaigns = response.outreaches || [];
      
      setOutreachCampaigns(campaigns);
      console.log(`✅ Loaded ${campaigns.length} outreach campaigns`);
      
    } catch (error) {
      console.error('Failed to load outreach campaigns:', error);
      // Don't show error notification for initial load, just log it
      if (activeTab === 1) {
        showNotification('Failed to load outreach campaigns', 'error');
      }
    } finally {
      setOutreachLoading(false);
    }
  };

  // Load analytics
  const loadAnalytics = async () => {
    try {
      const response = await recruiterService.getAnalytics('30d');
      setAnalytics(response.analytics);
    } catch (error) {
      console.error('Failed to load analytics:', error);
      showNotification('Failed to load analytics', 'error');
    }
  };

  // Notification helper
  const showNotification = (message, severity = 'success') => {
    setNotification({
      open: true,
      message,
      severity
    });
  };

  // Calculate notification badges
  const getDraftCount = () => {
    return outreachCampaigns.filter(campaign => campaign.status === 'drafted').length;
  };

  const getTotalOutreachCount = () => {
    return outreachCampaigns.length;
  };

  const getUnrepliedCount = () => {
    return outreachCampaigns.filter(campaign => 
      campaign.status === 'sent' && 
      campaign.repliesCount === 0 &&
      Date.now() - new Date(campaign.sentAt).getTime() > 7 * 24 * 60 * 60 * 1000 // 7 days old
    ).length;
  };

  return (
    <MainLayout>
      <Container maxWidth="lg" sx={{ py: 3 }}>
        {/* Page Header */}
        <PageHeader
          title="Recruiter Outreach"
          subtitle="Find and connect with recruiters to accelerate your job search"
          icon={<PeopleIcon />}
        />

        {/* Main Tabs - Match ResumeDetail style */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
          <Tabs
            value={activeTab}
            onChange={(e, newValue) => setActiveTab(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              '& .MuiTab-root': {
                minHeight: 48,
                fontSize: '0.875rem',
                fontWeight: 500,
                textTransform: 'none',
                color: theme.palette.text.secondary,
                '&.Mui-selected': {
                  color: theme.palette.primary.main,
                  fontWeight: 600
                }
              },
              '& .MuiTabs-indicator': {
                height: 2,
                backgroundColor: theme.palette.primary.main
              }
            }}
          >
            <Tab
              label="Find Recruiters"
              icon={<SearchIcon />}
              iconPosition="start"
              sx={{ 
                display: 'flex',
                flexDirection: 'row',
                gap: 1
              }}
            />
            <Tab
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <MessageIcon />
                  Outreach Campaigns
                  {getTotalOutreachCount() > 0 && (
                    <Badge 
                      badgeContent={getTotalOutreachCount()} 
                      color="warning" 
                      max={99}
                      sx={{ 
                        ml: 0.5,
                        '& .MuiBadge-badge': {
                          fontSize: '0.75rem',
                          height: 18,
                          minWidth: 18,
                          borderRadius: '9px'
                        }
                      }}
                    />
                  )}
                </Box>
              }
            />
            <Tab
              label="Analytics"
              icon={<AnalyticsIcon />}
              iconPosition="start"
              sx={{ 
                display: 'flex',
                flexDirection: 'row',
                gap: 1
              }}
            />
          </Tabs>
        </Box>

        {/* Tab Content */}
        <TabPanel value={activeTab} index={0}>
          {/* Search Tab */}
          <Box>
            <RecruiterSearch
              ref={searchRef}
              onSearchResults={handleSearchResults}
              onLoading={handleSearchLoading}
              onError={handleSearchError}
              onSearchStateChange={setHasSearched}
            />
            
            <RecruiterList
              searchResults={searchResults}
              loading={searchLoading}
              error={searchError}
              hasSearched={hasSearched}
              onViewDetails={handleViewRecruiterDetails}
              onStartOutreach={handleStartOutreach}
              onLoadMore={handleLoadMore}
              onPageChange={handlePageChange}
            />
          </Box>
        </TabPanel>

        <TabPanel value={activeTab} index={1}>
          {/* Outreach Tab */}
          <OutreachTracker
            campaigns={outreachCampaigns}
            loading={outreachLoading}
            onRefresh={loadOutreachCampaigns}
            onViewRecruiter={handleViewRecruiterDetails}
            onEditCampaign={(campaign) => {
              // Handle editing existing campaign
              setSelectedRecruiter(campaign.recruiter);
              setShowOutreachComposer(true);
            }}
          />
        </TabPanel>

        <TabPanel value={activeTab} index={2}>
          {/* Analytics Tab */}
          <Box>
            {analytics ? (
              <Box>
                {/* Analytics Dashboard */}
                <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                  <TrendingUpIcon color="primary" />
                  Outreach Performance (Last 30 Days)
                </Typography>
                
                <Box sx={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
                  gap: 3, 
                  mb: 4 
                }}>
                  <Box sx={{ 
                    p: 3, 
                    borderRadius: 2, 
                    bgcolor: 'background.paper',
                    border: `1px solid ${theme.palette.divider}`,
                    textAlign: 'center'
                  }}>
                    <Typography variant="h3" color="primary.main" fontWeight="bold">
                      {analytics.totalOutreach || 0}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Total Outreach
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    p: 3, 
                    borderRadius: 2, 
                    bgcolor: 'background.paper',
                    border: `1px solid ${theme.palette.divider}`,
                    textAlign: 'center'
                  }}>
                    <Typography variant="h3" color="success.main" fontWeight="bold">
                      {analytics.sent || 0}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Messages Sent
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    p: 3, 
                    borderRadius: 2, 
                    bgcolor: 'background.paper',
                    border: `1px solid ${theme.palette.divider}`,
                    textAlign: 'center'
                  }}>
                    <Typography variant="h3" color="warning.main" fontWeight="bold">
                      {analytics.replied || 0}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Replies Received
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    p: 3, 
                    borderRadius: 2, 
                    bgcolor: 'background.paper',
                    border: `1px solid ${theme.palette.divider}`,
                    textAlign: 'center'
                  }}>
                    <Typography variant="h3" color="info.main" fontWeight="bold">
                      {analytics.responseRate || 0}%
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Response Rate
                    </Typography>
                  </Box>
                </Box>

                <Alert severity="info" sx={{ borderRadius: 2 }}>
                  <Typography variant="body2">
                    💡 <strong>Pro Tip:</strong> Response rates typically improve with personalized messages. 
                    Try using our AI message generator with your resume and target job information for better results.
                  </Typography>
                </Alert>
              </Box>
            ) : (
              <Box sx={{ textAlign: 'center', py: 8 }}>
                <AnalyticsIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
                <Typography variant="h6" gutterBottom>
                  No analytics data yet
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Start reaching out to recruiters to see your performance metrics here.
                </Typography>
              </Box>
            )}
          </Box>
        </TabPanel>

        {/* Dialogs */}
        <RecruiterDetails
          open={showRecruiterDetails}
          onClose={() => {
            setShowRecruiterDetails(false);
            setSelectedRecruiter(null);
          }}
          recruiterId={selectedRecruiter?.id}
          onStartOutreach={handleStartOutreach}
        />

        <OutreachComposer
          open={showOutreachComposer}
          onClose={() => {
            setShowOutreachComposer(false);
            setSelectedRecruiter(null);
          }}
          recruiter={selectedRecruiter}
          onSend={handleSendOutreach}
          onSave={handleSaveOutreach}
        />

        {/* Notifications */}
        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={() => setNotification({ ...notification, open: false })}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert
            onClose={() => setNotification({ ...notification, open: false })}
            severity={notification.severity}
            variant="filled"
            sx={{ borderRadius: 2 }}
          >
            {notification.message}
          </Alert>
        </Snackbar>

        {/* Removed Floating Action Button - conflicts with AI Assistant widget */}
      </Container>
    </MainLayout>
  );
};

export default RecruiterPage;

================
File: src/components/recruiters/RecruiterSearch.js
================
// src/components/recruiters/RecruiterSearch.js - FIXED WITH PAGINATION SUPPORT
import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Typography,
  Autocomplete,
  Chip,
  Paper,
  Collapse,
  IconButton,
  Divider,
  Alert,
  CircularProgress,
  Badge
} from '@mui/material';
import {
  Search as SearchIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Work as WorkIcon,
  Business as BusinessIcon,
  Person as PersonIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import recruiterService from '../../utils/recruiterService';

const RecruiterSearch = ({ onSearchResults, onLoading, onError, onSearchStateChange }) => {
  const theme = useTheme();
  
  // Search state - NO LOCATION FILTER
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    company: null,
    industry: null,
    title: ''
  });
  
  // UI state
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [searchCount, setSearchCount] = useState(0);
  
  // Store current search parameters for pagination
  const [currentSearchParams, setCurrentSearchParams] = useState(null);
  
  // Filter options - NO LOCATIONS
  const [filterOptions, setFilterOptions] = useState({
    companies: [],
    industries: []
  });
  const [filterOptionsLoading, setFilterOptionsLoading] = useState(true);

  // Load filter options on component mount
  useEffect(() => {
    loadFilterOptions();
  }, []);

  const loadFilterOptions = async () => {
    try {
      setFilterOptionsLoading(true);
      const response = await recruiterService.getFilterOptions();
      setFilterOptions(response.filterOptions);
    } catch (error) {
      console.error('Failed to load filter options:', error);
      onError?.('Failed to load search filters');
    } finally {
      setFilterOptionsLoading(false);
    }
  };

  // Debounced search function with pagination support
  const performSearch = useCallback(async (searchParams = {}, page = 1, offset = 0) => {
    try {
      setIsSearching(true);
      onLoading?.(true);
      onSearchStateChange?.(true);
      
      const searchFilters = {
        query: searchQuery,
        company: filters.company?.name || '',
        industry: filters.industry?.name || '',
        title: filters.title || '',
        ...searchParams, // This should override the above if provided
        limit: 20,
        offset: offset
      };

      console.log('🔍 Performing search with filters:', searchFilters);
      console.log(`📄 Page: ${page}, Offset: ${offset}`);
      
      // Store current search params for pagination (FIXED)
      const paramsToStore = {
        query: searchFilters.query,
        company: searchFilters.company,
        industry: searchFilters.industry,
        title: searchFilters.title
      };
      setCurrentSearchParams(paramsToStore);
      
      const response = await recruiterService.searchRecruiters(searchFilters);
      
      setSearchCount(response.pagination.total);
      
      // Pass search parameters along with results (FIXED)
      if (onSearchResults) {
        // Add the search parameters to the callback
        onSearchResults(response, paramsToStore);
      }
      
    } catch (error) {
      console.error('Search failed:', error);
      onError?.('Search failed. Please try again.');
    } finally {
      setIsSearching(false);
      onLoading?.(false);
    }
  }, [searchQuery, filters, onSearchResults, onLoading, onError, onSearchStateChange]);

  // Handle search button click
  const handleSearch = () => {
    performSearch({}, 1, 0); // Reset to page 1
  };

  // Handle pagination from RecruiterList
  const handlePageChange = useCallback((page, offset) => {
    console.log(`🔄 RecruiterSearch: Page change requested - Page: ${page}, Offset: ${offset}`);
    
    if (currentSearchParams) {
      // Use stored search parameters for pagination
      performSearch(currentSearchParams, page, offset);
    } else {
      // Fallback: perform new search with current filters
      performSearch({}, page, offset);
    }
  }, [currentSearchParams, performSearch]);

  // Expose pagination handler to parent component
  React.useImperativeHandle(React.forwardRef(() => null), () => ({
    handlePageChange
  }));

  // Make pagination handler available to parent
  React.useEffect(() => {
    if (onSearchResults && typeof onSearchResults === 'function') {
      // Add pagination handler as a property to the callback
      onSearchResults.handlePageChange = handlePageChange;
    }
  }, [handlePageChange, onSearchResults]);

  // Handle filter changes with proper null handling
  const handleFilterChange = (filterName, value) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value
    }));
  };

  // Reset entire search state
  const resetSearchState = () => {
    setSearchQuery('');
    setFilters({
      company: null,
      industry: null,
      title: ''
    });
    setSearchCount(0);
    setShowAdvancedFilters(false);
    setCurrentSearchParams(null);
    onSearchStateChange?.(false);
    onSearchResults?.(null);
  };

  // Clear search query (X button)
  const clearSearchQuery = () => {
    setSearchQuery('');
    // If there are no other filters, reset everything
    if (!hasActiveFiltersExceptQuery()) {
      resetSearchState();
    }
  };

  // Refresh search with current parameters
  const refreshSearch = () => {
    performSearch({}, 1, 0); // Reset to page 1
  };

  // Check if any filters are applied (excluding search query)
  const hasActiveFiltersExceptQuery = () => {
    return filters.company || 
           filters.industry || 
           filters.title;
  };

  // Check if any filters are applied (including search query)
  const hasActiveFilters = () => {
    return searchQuery || hasActiveFiltersExceptQuery();
  };

  // Expose the pagination handler to parent components
  React.useEffect(() => {
    // Create a custom property on the component to expose pagination
    if (typeof window !== 'undefined') {
      window.recruiterSearchPagination = handlePageChange;
    }
    
    return () => {
      if (typeof window !== 'undefined') {
        delete window.recruiterSearchPagination;
      }
    };
  }, [handlePageChange]);

  return (
    <Paper elevation={0} sx={{ mb: 3, border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}>
      <CardContent sx={{ p: 3 }}>
        {/* Main Search Bar */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
            <SearchIcon sx={{ color: theme.palette.primary.main }} />
            Find Recruiters
            {searchCount > 0 && (
              <Chip 
                label={`${searchCount.toLocaleString()} found`} 
                size="small" 
                color="primary" 
                variant="outlined"
                sx={{ borderRadius: 1 }}
              />
            )}
          </Typography>
          
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={8}>
              <TextField
                fullWidth
                variant="outlined"
                placeholder="Search by name, company, title, or keywords..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                InputProps={{
                  startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,
                  endAdornment: searchQuery && (
                    <IconButton size="small" onClick={clearSearchQuery}>
                      <ClearIcon />
                    </IconButton>
                  )
                }}
                sx={{ 
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2
                  }
                }}
              />
            </Grid>
            
            <Grid item xs={12} md={4}>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="contained"
                  onClick={handleSearch}
                  disabled={isSearching}
                  startIcon={isSearching ? <CircularProgress size={16} color="inherit" /> : <SearchIcon />}
                  sx={{ borderRadius: 2, minWidth: 120 }}
                >
                  {isSearching ? 'Searching...' : 'Search'}
                </Button>
                
                <Badge 
                  badgeContent={hasActiveFilters() ? '●' : 0} 
                  color="secondary"
                  variant="dot"
                >
                  <Button
                    variant="outlined"
                    onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                    startIcon={<FilterIcon />}
                    endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    sx={{ borderRadius: 2 }}
                  >
                    Filters
                  </Button>
                </Badge>
              </Box>
            </Grid>
          </Grid>
        </Box>

        {/* Advanced Filters */}
        <Collapse in={showAdvancedFilters}>
          <Paper 
            elevation={0} 
            sx={{ 
              p: 3, 
              borderRadius: 2, 
              bgcolor: theme.palette.grey[50],
              border: `1px solid ${theme.palette.divider}`
            }}
          >
            <Typography variant="subtitle1" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
              <FilterIcon sx={{ color: theme.palette.primary.main }} />
              Advanced Filters
            </Typography>
            
            <Grid container spacing={3}>
              {/* Company Filter */}
              <Grid item xs={12} md={6} lg={4}>
                <Autocomplete
                  options={filterOptions.companies}
                  getOptionLabel={(option) => option?.name || ''}
                  value={filters.company}
                  onChange={(e, value) => handleFilterChange('company', value)}
                  loading={filterOptionsLoading}
                  isOptionEqualToValue={(option, value) => option?.name === value?.name}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Company"
                      placeholder="Select company..."
                      size="small"
                      InputProps={{
                        ...params.InputProps,
                        startAdornment: <BusinessIcon sx={{ mr: 1, color: 'text.secondary', fontSize: '1.2rem' }} />
                      }}
                    />
                  )}
                  renderOption={(props, option) => (
                    <Box component="li" {...props} key={option.name}>
                      <Box>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>{option.name}</Typography>
                        <Typography variant="caption" color="text.secondary">
                          {option.count} recruiters
                        </Typography>
                      </Box>
                    </Box>
                  )}
                />
              </Grid>

              {/* Industry Filter */}
              <Grid item xs={12} md={6} lg={4}>
                <Autocomplete
                  options={filterOptions.industries}
                  getOptionLabel={(option) => option?.name || ''}
                  value={filters.industry}
                  onChange={(e, value) => handleFilterChange('industry', value)}
                  loading={filterOptionsLoading}
                  isOptionEqualToValue={(option, value) => option?.name === value?.name}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Industry"
                      placeholder="Select industry..."
                      size="small"
                      InputProps={{
                        ...params.InputProps,
                        startAdornment: <WorkIcon sx={{ mr: 1, color: 'text.secondary', fontSize: '1.2rem' }} />
                      }}
                    />
                  )}
                  renderOption={(props, option) => (
                    <Box component="li" {...props} key={option.name}>
                      <Box>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>{option.name}</Typography>
                        <Typography variant="caption" color="text.secondary">
                          {option.count} recruiters
                        </Typography>
                      </Box>
                    </Box>
                  )}
                />
              </Grid>

              {/* Title Filter */}
              <Grid item xs={12} md={6} lg={4}>
                <TextField
                  fullWidth
                  size="small"
                  label="Job Title"
                  placeholder="e.g., Technical Recruiter"
                  value={filters.title}
                  onChange={(e) => handleFilterChange('title', e.target.value)}
                  InputProps={{
                    startAdornment: <PersonIcon sx={{ mr: 1, color: 'text.secondary', fontSize: '1.2rem' }} />
                  }}
                />
              </Grid>
            </Grid>

            <Divider sx={{ my: 2 }} />

            {/* Filter Actions */}
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', gap: 1 }}>
                {hasActiveFilters() && (
                  <Button
                    variant="outlined"
                    startIcon={<ClearIcon />}
                    onClick={resetSearchState}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Reset All
                  </Button>
                )}
              </Box>
              
              <Button
                variant="contained"
                onClick={handleSearch}
                disabled={isSearching}
                startIcon={isSearching ? <CircularProgress size={16} color="inherit" /> : <SearchIcon />}
                sx={{ borderRadius: 2 }}
              >
                Apply Filters
              </Button>
            </Box>

            {/* Active Filters Display */}
            {hasActiveFilters() && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="caption" color="text.secondary" gutterBottom display="block" sx={{ mb: 1 }}>
                  Active Filters:
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  {searchQuery && (
                    <Chip
                      label={`Search: "${searchQuery}"`}
                      size="small"
                      onDelete={() => setSearchQuery('')}
                      color="primary"
                      sx={{ borderRadius: 1 }}
                    />
                  )}
                  {filters.company && (
                    <Chip
                      label={`Company: ${filters.company.name}`}
                      size="small"
                      onDelete={() => handleFilterChange('company', null)}
                      color="primary"
                      sx={{ borderRadius: 1 }}
                    />
                  )}
                  {filters.industry && (
                    <Chip
                      label={`Industry: ${filters.industry.name}`}
                      size="small"
                      onDelete={() => handleFilterChange('industry', null)}
                      color="primary"
                      sx={{ borderRadius: 1 }}
                    />
                  )}
                  {filters.title && (
                    <Chip
                      label={`Title: ${filters.title}`}
                      size="small"
                      onDelete={() => handleFilterChange('title', '')}
                      color="primary"
                      sx={{ borderRadius: 1 }}
                    />
                  )}
                </Box>
              </Box>
            )}
          </Paper>
        </Collapse>

        {/* Search Tips */}
        {!hasActiveFilters() && (
          <Alert 
            severity="info" 
            sx={{ 
              mt: 2,
              borderRadius: 2,
              '& .MuiAlert-icon': {
                color: theme.palette.info.main
              }
            }}
          >
            <Typography variant="body2">
              💡 <strong>Search Tips:</strong> Use specific keywords like "Technical Recruiter", company names, or job titles. 
              Try filtering by industry for better results.
            </Typography>
          </Alert>
        )}
      </CardContent>
      
      {/* Export pagination handler for parent component */}
      <div style={{ display: 'none' }} data-pagination-handler={handlePageChange} />
    </Paper>
  );
};

// Add pagination handler as a static method
RecruiterSearch.handlePageChange = null;

export default RecruiterSearch;

================
File: src/components/resumes/components/AiEditingToolbar.js
================
// src/components/resumes/components/AiEditingToolbar.js - FIXED PROGRESS DISPLAY
import React from 'react';
import {
  Box,
  Typography,
  Paper,
  Button,
  ButtonGroup,
  Chip,
  Grid,
  LinearProgress,
  useTheme
} from '@mui/material';
import {
  Chat as ChatIcon,
  AutoFixHigh as AutoFixHighIcon
} from '@mui/icons-material';
import AutoJobLogo from '../../common/AutoJobLogo';

/**
 * AI editing toolbar component with enhanced progress tracking
 * @param {object} props - Component props
 * @param {object} props.resume - Resume data
 * @param {function} props.onQuickAction - Quick action handler
 * @param {function} props.onOpenChat - Open chat handler
 * @param {boolean} props.aiProcessing - AI processing state
 * @param {string} props.progressStage - Current progress stage message
 * @param {number} props.progressPercentage - Progress percentage (0-100)
 * @returns {JSX.Element} AI editing toolbar component
 */
const AiEditingToolbar = ({ 
  resume, 
  onQuickAction, 
  onOpenChat, 
  aiProcessing, 
  progressStage, 
  progressPercentage 
}) => {
  const theme = useTheme();
  
  // Ensure progress percentage is valid for MUI LinearProgress
  const validProgressPercentage = Math.max(0, Math.min(100, progressPercentage || 0));

  return (
    <Paper 
      elevation={3} 
      sx={{ 
        p: 2, 
        mb: 3, 
        borderRadius: 3,
        background: `linear-gradient(135deg, ${theme.palette.primary.main}10 0%, ${theme.palette.secondary.main}10 100%)`,
        border: `1px solid ${theme.palette.primary.main}30`
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <AutoJobLogo variant="icon-only" size="small" />
        <Typography variant="h6" sx={{ ml: 1, fontWeight: 600 }}>
          AI Job Assistant
        </Typography>
        <Chip 
          label="Powered by AJ" 
          size="small" 
          color="primary" 
          sx={{ ml: 2 }}
        />
      </Box>

      {aiProcessing && (
        <Box sx={{ mb: 2 }}>
          <LinearProgress 
            variant="determinate" 
            value={validProgressPercentage} 
            sx={{ 
              borderRadius: 1,
              height: 8,
              '& .MuiLinearProgress-bar': {
                borderRadius: 1,
                background: `linear-gradient(90deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`
              }
            }} 
          />
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1 }}>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ 
                fontWeight: 500,
                maxWidth: '75%',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap'
              }}
            >
              {progressStage || 'AJ is improving your resume...'}
            </Typography>
            <Typography variant="caption" color="primary" fontWeight="medium">
              {Math.round(validProgressPercentage)}%
            </Typography>
          </Box>
        </Box>
      )}

      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} md={8}>
          <Typography variant="body2" color="text.secondary">
            Let AJ analyze and optimize your resume for better ATS compatibility and job matching.
          </Typography>
        </Grid>
        
        <Grid item xs={12} md={4}>
          <ButtonGroup variant="contained" fullWidth>
            <Button
              startIcon={<ChatIcon />}
              onClick={onOpenChat}
              disabled={aiProcessing}
              sx={{ flexGrow: 1 }}
            >
              Edit with AJ
            </Button>
            <Button
              startIcon={<AutoFixHighIcon />}
              onClick={() => onQuickAction('Auto-Fix for ATS')}
              disabled={aiProcessing}
              color="secondary"
            >
              Auto-Fix for ATS
            </Button>
          </ButtonGroup>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default AiEditingToolbar;

================
File: src/components/resumes/components/BeforeAfterComparison.js
================
// src/components/resumes/components/BeforeAfterComparison.js - FIXED READABILITY
import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Chip,
  IconButton,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Alert
} from '@mui/material';
import {
  Close as CloseIcon,
  TrendingUp as TrendingUpIcon,
  CheckCircle as CheckCircleIcon,
  ArrowForward as ArrowForwardIcon,
  Timeline as TimelineIcon,
  Work as WorkIcon,
  Code as CodeIcon
} from '@mui/icons-material';

/**
 * Before/After Comparison Dialog Component - FIXED UI READABILITY
 * @param {object} props - Component props
 * @param {boolean} props.open - Dialog open state
 * @param {function} props.onClose - Close dialog handler
 * @param {object} props.comparisonData - Comparison data from backend
 * @returns {JSX.Element} Before/After comparison dialog
 */
const BeforeAfterComparison = ({ open, onClose, comparisonData }) => {
  const [tabValue, setTabValue] = useState(0);

  if (!comparisonData) return null;

  const { scores, changes, summary, summaryText } = comparisonData;

  const TabPanel = ({ children, value, index }) => (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}
    </div>
  );

  const renderScoreComparison = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Alert severity="success" sx={{ mb: 3 }}>
          <Typography variant="h6" gutterBottom>
            🎉 Optimization Results
          </Typography>
          <Typography variant="body1">
            {summaryText}
          </Typography>
        </Alert>
      </Grid>
      
      <Grid item xs={12} md={6}>
        <Card variant="outlined" sx={{ textAlign: 'center', p: 2 }}>
          <Typography variant="h6" color="text.secondary" gutterBottom>
            Before Optimization
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'space-around', mt: 2 }}>
            <Box>
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {scores.before.overallScore}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Overall Score
              </Typography>
            </Box>
            <Box>
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {scores.before.atsCompatibility}%
              </Typography>
              <Typography variant="caption" color="text.secondary">
                ATS Score
              </Typography>
            </Box>
          </Box>
        </Card>
      </Grid>

      <Grid item xs={12} md={6}>
        <Card variant="outlined" sx={{ 
          textAlign: 'center', 
          p: 2, 
          bgcolor: 'success.light', 
          border: '2px solid',
          borderColor: 'success.main'
        }}>
          <Typography variant="h6" gutterBottom sx={{ color: 'success.dark', fontWeight: 600 }}>
            After Optimization
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'space-around', mt: 2 }}>
            <Box>
              <Typography variant="h4" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
                {scores.after.overallScore}
              </Typography>
              <Typography variant="caption" sx={{ color: 'success.dark', fontWeight: 500 }}>
                Overall Score
              </Typography>
            </Box>
            <Box>
              <Typography variant="h4" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
                {scores.after.atsCompatibility}%
              </Typography>
              <Typography variant="caption" sx={{ color: 'success.dark', fontWeight: 500 }}>
                ATS Score
              </Typography>
            </Box>
          </Box>
          {(scores.after.atsCompatibility - scores.before.atsCompatibility) > 0 && (
            <Chip 
              icon={<TrendingUpIcon />}
              label={`+${scores.after.atsCompatibility - scores.before.atsCompatibility}% improvement`}
              color="success"
              variant="outlined"
              sx={{ 
                mt: 2,
                bgcolor: 'white',
                color: 'success.dark',
                fontWeight: 600,
                '& .MuiChip-icon': {
                  color: 'success.main'
                }
              }}
            />
          )}
        </Card>
      </Grid>

      <Grid item xs={12}>
        <Card variant="outlined" sx={{ p: 2 }}>
          <Typography variant="h6" gutterBottom>
            📊 Summary Statistics
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={4}>
              <Box sx={{ textAlign: 'center' }}>
                <Typography variant="h5" color="primary" fontWeight="bold">
                  {summary.sectionsModified}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Sections Enhanced
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={4}>
              <Box sx={{ textAlign: 'center' }}>
                <Typography variant="h5" color="primary" fontWeight="bold">
                  {summary.improvementsCount}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Improvements Made
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={4}>
              <Box sx={{ textAlign: 'center' }}>
                <Typography variant="h5" color="primary" fontWeight="bold">
                  {summary.keywordsAdded}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Keywords Added
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Card>
      </Grid>
    </Grid>
  );

  const renderDetailedChanges = () => (
    <Box>
      {changes.map((change, index) => (
        <Card key={index} variant="outlined" sx={{ mb: 3 }}>
          <CardContent>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              {change.section === 'experience' ? <WorkIcon color="primary" /> : <CodeIcon color="primary" />}
              <Box sx={{ ml: 1 }}>
                <Typography variant="h6" color="primary">
                  {change.section === 'experience' ? 'Work Experience' : 'Skills'} Enhancement
                </Typography>
                {change.jobTitle && (
                  <Typography variant="body2" color="text.secondary">
                    {change.jobTitle} at {change.company}
                  </Typography>
                )}
              </Box>
              <Box sx={{ ml: 'auto' }}>
                <Chip 
                  label={change.changeType} 
                  color="primary" 
                  size="small"
                  sx={{ textTransform: 'capitalize' }}
                />
              </Box>
            </Box>

            <Typography variant="body2" color="text.secondary" gutterBottom>
              {change.impact}
            </Typography>

            <Divider sx={{ my: 2 }} />

            {change.field === 'highlights' ? (
              <Box>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="error.main" gutterBottom>
                      Before:
                    </Typography>
                    <List dense>
                      {change.before.map((item, idx) => (
                        <ListItem key={idx} sx={{ pl: 0, py: 0.5 }}>
                          <ListItemText 
                            primary={item}
                            sx={{ 
                              '& .MuiListItemText-primary': { 
                                fontSize: '0.875rem',
                                bgcolor: 'rgba(255, 0, 0, 0.05)',
                                p: 1,
                                borderRadius: 1,
                                border: '1px solid rgba(255, 0, 0, 0.2)'
                              }
                            }}
                          />
                        </ListItem>
                      ))}
                    </List>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="success.main" gutterBottom>
                      After:
                    </Typography>
                    <List dense>
                      {change.after.map((item, idx) => (
                        <ListItem key={idx} sx={{ pl: 0, py: 0.5 }}>
                          <ListItemIcon sx={{ minWidth: 32 }}>
                            <CheckCircleIcon fontSize="small" color="success" />
                          </ListItemIcon>
                          <ListItemText 
                            primary={item}
                            sx={{ 
                              '& .MuiListItemText-primary': { 
                                fontSize: '0.875rem',
                                bgcolor: 'rgba(0, 255, 0, 0.05)',
                                p: 1,
                                borderRadius: 1,
                                border: '1px solid rgba(0, 255, 0, 0.2)'
                              }
                            }}
                          />
                        </ListItem>
                      ))}
                    </List>
                  </Grid>
                </Grid>
              </Box>
            ) : (
              <Box>
                <Typography variant="subtitle2" color="error.main" gutterBottom>
                  Before:
                </Typography>
                <Typography variant="body2" sx={{ 
                  bgcolor: 'rgba(255, 0, 0, 0.05)', 
                  p: 2, 
                  borderRadius: 1,
                  border: '1px solid rgba(255, 0, 0, 0.2)',
                  mb: 2
                }}>
                  {change.before}
                </Typography>
                
                <Typography variant="subtitle2" color="success.main" gutterBottom>
                  After:
                </Typography>
                <Typography variant="body2" sx={{ 
                  bgcolor: 'rgba(0, 255, 0, 0.05)', 
                  p: 2, 
                  borderRadius: 1,
                  border: '1px solid rgba(0, 255, 0, 0.2)'
                }}>
                  {change.after}
                </Typography>
              </Box>
            )}
          </CardContent>
        </Card>
      ))}

      {changes.length === 0 && (
        <Alert severity="info">
          <Typography variant="body1">
            No detailed changes to display. The optimization focused on overall improvements and keyword enhancements.
          </Typography>
        </Alert>
      )}
    </Box>
  );

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="lg" 
      fullWidth
      PaperProps={{
        sx: { borderRadius: 3, maxHeight: '90vh' }
      }}
    >
      <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <TimelineIcon color="primary" sx={{ mr: 1 }} />
          <Typography variant="h5" fontWeight="bold">
            ATS Optimization Results
          </Typography>
        </Box>
        <IconButton onClick={onClose} size="small">
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent>
        <Tabs 
          value={tabValue} 
          onChange={(e, newValue) => setTabValue(newValue)}
          sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}
        >
          <Tab 
            label="Score Comparison" 
            icon={<TrendingUpIcon />} 
            iconPosition="start"
          />
          <Tab 
            label="Detailed Changes" 
            icon={<CheckCircleIcon />} 
            iconPosition="start"
          />
        </Tabs>

        <TabPanel value={tabValue} index={0}>
          {renderScoreComparison()}
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          {renderDetailedChanges()}
        </TabPanel>
      </DialogContent>

      <DialogActions sx={{ p: 3 }}>
        <Button 
          onClick={onClose} 
          variant="contained" 
          startIcon={<CheckCircleIcon />}
          size="large"
        >
          Got it!
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BeforeAfterComparison;

================
File: src/components/resumes/components/ProcessingView.js
================
// src/components/resumes/components/ProcessingView.js
import React from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  CircularProgress,
  Divider
} from '@mui/material';
import { ArrowBack as ArrowBackIcon } from '@mui/icons-material';
import MainLayout from '../../layout/MainLayout';

/**
 * Processing view component shown while resume is being analyzed
 * @param {object} props - Component props
 * @param {function} props.navigate - Navigation function
 * @returns {JSX.Element} Processing view component
 */
const ProcessingView = ({ navigate }) => {
  return (
    <MainLayout>
      <Box sx={{ p: 3 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate('/resumes')}
          sx={{ mb: 3 }}
        >
          Back to Resumes
        </Button>
        
        <Card sx={{ maxWidth: 700, mx: 'auto', borderRadius: 3 }}>
          <CardContent sx={{ textAlign: 'center', py: 5 }}>
            <CircularProgress size={80} thickness={4} sx={{ mb: 3 }} />
            <Typography variant="h5" gutterBottom fontWeight={500}>
              Processing Your Resume
            </Typography>
            <Typography variant="body1" sx={{ mb: 4, color: 'text.secondary' }}>
              Our AI is currently analyzing your resume. This process may take a few minutes.
            </Typography>
            <Divider sx={{ my: 2 }} />
            <Typography variant="body2" color="primary">
              This page will automatically update when processing is complete.
            </Typography>
          </CardContent>
        </Card>
      </Box>
    </MainLayout>
  );
};

export default ProcessingView;

================
File: src/components/resumes/components/ScoreDisplay.js
================
// src/components/resumes/components/ScoreDisplay.js
import React from 'react';
import {
  Box,
  Typography,
  CircularProgress,
  useTheme
} from '@mui/material';
import { getScoreColor } from '../utils/resumeHelpers';

/**
 * Circular progress score display component
 * @param {object} props - Component props
 * @param {number} props.value - Score value (0-100)
 * @param {string} props.label - Score label
 * @param {number} props.size - Circle size in pixels
 * @returns {JSX.Element} Score display component
 */
const ScoreDisplay = ({ value, label, size = 100 }) => {
  const theme = useTheme();
  const color = getScoreColor(value, theme);

  return (
    <Box sx={{ position: 'relative', display: 'inline-flex' }}>
      <CircularProgress
        variant="determinate"
        size={size}
        thickness={5}
        value={100}
        sx={{ color: color, opacity: 0.2, position: 'absolute' }}
      />
      <CircularProgress
        variant="determinate"
        size={size}
        thickness={5}
        value={value}
        sx={{ color: color }}
      />
      <Box
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexDirection: 'column'
        }}
      >
        <Typography variant="h4" fontWeight="bold" color={color}>
          {Math.round(value)}
        </Typography>
        <Typography variant="caption" color="text.secondary">
          {label}
        </Typography>
      </Box>
    </Box>
  );
};

export default ScoreDisplay;

================
File: src/components/resumes/components/TabPanel.js
================
// src/components/resumes/components/TabPanel.js
import React from 'react';
import { Box } from '@mui/material';

/**
 * Generic tab panel wrapper component
 * @param {object} props - Component props
 * @param {React.ReactNode} props.children - Tab content
 * @param {number} props.value - Current tab value
 * @param {number} props.index - Tab index
 * @returns {JSX.Element} Tab panel component
 */
const TabPanel = ({ children, value, index, ...other }) => (
  <div
    role="tabpanel"
    hidden={value !== index}
    id={`resume-tabpanel-${index}`}
    aria-labelledby={`resume-tab-${index}`}
    {...other}
  >
    {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
  </div>
);

export default TabPanel;

================
File: src/components/resumes/hooks/useAiIntegration.js
================
// src/components/resumes/hooks/useAiIntegration.js - COMPLETE FIXED VERSION WITH ANALYSIS REFRESH
import { useState, useEffect, useCallback, useRef } from 'react';
import { useAiAssistant } from '../../../context/AiAssistantContext';
import axios from '../../../utils/axios';

/**
 * Custom hook for AI integration functionality with REAL SSE progress tracking and ANALYSIS REFRESH
 * @param {object} resume - Resume data object
 * @param {function} fetchResumeDetails - Function to refresh resume data
 * @returns {object} AI processing states and functions
 */
export const useAiIntegration = (resume, fetchResumeDetails) => {
  const [aiProcessing, setAiProcessing] = useState(false);
  const [aiSuccess, setAiSuccess] = useState('');
  const [progressPercentage, setProgressPercentage] = useState(0);
  const [progressStage, setProgressStage] = useState('');
  const [comparisonData, setComparisonData] = useState(null);
  
  // SSE connection ref
  const eventSourceRef = useRef(null);
  
  // Safely get AI assistant functions
  let setAiOpen = () => {};
  let updateContextFromLocation = () => {};
  
  try {
    const aiAssistant = useAiAssistant();
    setAiOpen = aiAssistant?.setIsOpen || (() => {});
    updateContextFromLocation = aiAssistant?.updateContextFromLocation || (() => {});
    
    // Log available functions for debugging
    console.log('Available AI functions:', Object.keys(aiAssistant));
  } catch (error) {
    console.warn('AI Assistant not available:', error);
  }

  // Cleanup SSE connection on unmount
  useEffect(() => {
    return () => {
      if (eventSourceRef.current) {
        console.log('🧹 Cleaning up SSE connection on unmount');
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
    };
  }, []);

  // Trigger context update when resume changes
  useEffect(() => {
    if (resume && updateContextFromLocation) {
      // Use the existing context update function
      updateContextFromLocation();
      console.log('Updated AI context for resume:', resume.name);
    }
  }, [resume, updateContextFromLocation]);

  // 🔥 CRITICAL FIX: Listen for AI resume updates AND refresh analysis
  useEffect(() => {
    const handleResumeUpdate = async (event) => {
      if (event.detail?.resumeId === resume?.id) {
        console.log('🔄 Resume update event received, refreshing analysis data...');
        
        // Force a complete refresh of resume data including analysis
        await fetchResumeDetails();
        
        // Show success message
        setAiSuccess(event.detail.message || '✅ AJ updated your resume!');
        
        // 🔥 ENHANCED: If the event includes new analysis data, use it
        if (event.detail.newAnalysis) {
          console.log('📊 New analysis data received:', event.detail.newAnalysis);
          setAiSuccess(prev => prev + `\n📊 New Scores: Overall ${event.detail.newAnalysis.overallScore}%, ATS ${event.detail.newAnalysis.atsCompatibility}%`);
        }
        
        setTimeout(() => setAiSuccess(''), 8000); // Longer timeout for detailed messages
      }
    };

    window.addEventListener('resumeUpdated', handleResumeUpdate);
    return () => window.removeEventListener('resumeUpdated', handleResumeUpdate);
  }, [resume?.id, fetchResumeDetails]);

  /**
   * Start real-time progress tracking via SSE - FIXED VERSION
   */
  const startProgressTracking = useCallback((resumeId) => {
    console.log('🚀 Starting real-time progress tracking via SSE for resume:', resumeId);
    
    // Close existing connection if any
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
      eventSourceRef.current = null;
    }

    try {
      // Get auth token for SSE request
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('❌ No auth token available for SSE connection');
        setProgressStage('Authentication required');
        return;
      }

      // 🔧 FIX: Construct the URL properly with backend port
      const baseUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:5000' 
        : window.location.origin;
      
      const sseUrl = `${baseUrl}/api/resumes/${resumeId}/optimization-progress?token=${encodeURIComponent(token)}`;
      console.log('📡 Connecting to SSE URL:', sseUrl);
      
      // 🔧 FIX: Add a small delay to ensure backend is ready
      setTimeout(() => {
        try {
          // Create EventSource connection
          eventSourceRef.current = new EventSource(sseUrl);
          
          eventSourceRef.current.onopen = (event) => {
            console.log('📡 SSE connection opened successfully', event);
            setProgressStage('Connected to progress stream');
          };
          
          eventSourceRef.current.onmessage = (event) => {
            try {
              const data = JSON.parse(event.data);
              console.log('📡 Parsed SSE update:', data);
              
              if (data.type === 'progress') {
                console.log(`📊 Real Progress Update: ${data.percentage}% - ${data.message}`);
                setProgressPercentage(data.percentage);
                setProgressStage(data.message);
                
                // If optimization is complete, we'll handle it in the main API response
                if (data.percentage >= 100) {
                  console.log('✅ SSE Progress Complete - awaiting final API response');
                  setProgressStage('Optimization complete - finalizing...');
                }
              } else if (data.type === 'connected') {
                console.log('📡 SSE Connection confirmed:', data.message);
                setProgressStage('Progress tracking connected');
              } else if (data.type === 'complete') {
                console.log('🎉 SSE Optimization complete signal received');
                setProgressPercentage(100);
                setProgressStage(data.message);
              } else if (data.type === 'error') {
                console.error('❌ SSE Error received:', data.message);
                setProgressStage(`Error: ${data.message}`);
              } else if (data.type === 'heartbeat') {
                // Ignore heartbeat messages, just log them
                console.log('💓 SSE Heartbeat received');
              }
            } catch (parseError) {
              console.error('❌ Error parsing SSE data:', parseError, 'Raw data:', event.data);
            }
          };
          
          eventSourceRef.current.onerror = (error) => {
            console.error('❌ SSE Connection Error:', error);
            console.error('❌ SSE ReadyState:', eventSourceRef.current?.readyState);
            console.error('❌ SSE URL was:', sseUrl);
            
            // 🔧 FIX: Better error handling with specific messages
            const readyState = eventSourceRef.current?.readyState;
            let errorMessage = 'Connection error';
            
            if (readyState === 0) {
              errorMessage = 'Connecting to progress stream...';
            } else if (readyState === 2) {
              errorMessage = 'Connection closed - continuing without live updates';
            } else {
              errorMessage = 'Connection failed - continuing without live updates';
            }
            
            setProgressStage(errorMessage);
            
            // Close and cleanup on error
            if (eventSourceRef.current) {
              eventSourceRef.current.close();
              eventSourceRef.current = null;
            }
          };

          console.log('📡 SSE Connection setup complete');
          
        } catch (connectionError) {
          console.error('❌ Failed to create SSE connection:', connectionError);
          setProgressStage('Failed to connect - continuing without live updates');
        }
      }, 100); // Small delay to ensure everything is ready
      
    } catch (error) {
      console.error('❌ Failed to establish SSE connection:', error);
      setProgressStage('Failed to connect - continuing without live updates');
    }
  }, []);

  /**
   * Stop progress tracking and cleanup SSE connection
   */
  const stopProgressTracking = useCallback(() => {
    console.log('🛑 Stopping progress tracking and closing SSE connection');
    
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
      eventSourceRef.current = null;
      console.log('📡 SSE connection closed');
    }
  }, []);

  const openAiChat = useCallback(() => {
    try {
      setAiOpen(true);
    } catch (error) {
      console.warn('Cannot open AI chat:', error);
      setAiSuccess('AI Assistant not available. Please check your setup.');
      setTimeout(() => setAiSuccess(''), 3000);
    }
  }, [setAiOpen]);

  const handleQuickAction = useCallback(async (action) => {
    if (!resume) return;
    
    console.log(`🤖 AJ: Starting ${action} with real progress tracking...`);
    
    setAiProcessing(true);
    setProgressPercentage(0);
    setProgressStage('Initializing...');
    setComparisonData(null);
    
    try {
      if (action === 'Auto-Fix for ATS') {
        console.log('🤖 AJ: Starting ATS optimization with real progress...');
        
        // 🔧 FIX: Start SSE connection FIRST, then add delay before API call
        startProgressTracking(resume.id);
        
        // 🔧 FIX: Wait longer to ensure SSE connection is established
        setProgressStage('Connecting to progress stream...');
        await new Promise(resolve => setTimeout(resolve, 1500)); // Increased delay
        
        setProgressStage('Starting ATS optimization...');
        
        // Call the real backend API for ATS optimization
        const response = await axios.post(`/resumes/${resume.id}/optimize-ats`, {
          targetJob: null // Could be enhanced to include specific job targeting
        });
        
console.log('✅ AJ: ATS optimization response:', response.data);
       
       if (response.data.success) {
         const { data } = response.data;
         
         // Store comparison data for before/after dialog
         if (data.comparison) {
           console.log('📊 Setting comparison data for before/after view');
           setComparisonData(data.comparison);
         }
         
         // Show detailed success message with improvement metrics
         const improvementMessage = `✅ ATS Optimization Complete! 
📈 ATS Score: ${data.previousATSScore}% → ${data.newATSScore}% 
🚀 Improvement: +${data.improvementGain}%`;
         
         setAiSuccess(improvementMessage);
         setProgressPercentage(100);
         setProgressStage('Optimization completed successfully!');
         
         // 🔥 CRITICAL FIX: Force complete resume refresh with analysis
         console.log('🔄 Forcing complete resume data refresh with new analysis...');
         await fetchResumeDetails();
         
         // 🔥 ENHANCED: Wait a moment then force another refresh to ensure analysis is updated
         setTimeout(async () => {
           console.log('🔄 Secondary refresh to ensure analysis scores are updated...');
           await fetchResumeDetails();
         }, 2000);
         
         // Dispatch update event with detailed info
         window.dispatchEvent(new CustomEvent('resumeUpdated', {
           detail: { 
             resumeId: resume.id, 
             message: `ATS optimization complete: ${data.newATSScore}% compatibility`,
             atsScore: data.newATSScore,
             improvement: data.improvementGain,
             // 🔥 CRITICAL: Include new analysis data for UI refresh
             newAnalysis: {
               overallScore: data.newATSScore,
               atsCompatibility: data.newATSScore
             }
           }
         }));
         
       } else {
         throw new Error(response.data.message || 'ATS optimization failed');
       }
       
     } else {
       // Handle other actions (if any in the future)
       console.log(`🤖 AJ: Processing action: ${action}`);
       
       // Simulate other actions for now
       setProgressStage('Processing...');
       setProgressPercentage(50);
       await new Promise(resolve => setTimeout(resolve, 2000));
       setProgressPercentage(100);
       setProgressStage('Complete!');
       
       setAiSuccess(`✅ ${action} completed successfully!`);
       
       // 🔥 CRITICAL FIX: Force complete resume refresh for all actions
       await fetchResumeDetails();
       
       window.dispatchEvent(new CustomEvent('resumeUpdated', {
         detail: { resumeId: resume.id, message: `AI completed: ${action}` }
       }));
     }
     
   } catch (error) {
     console.error('❌ AI action failed:', error);
     
     // Enhanced error handling with specific messages
     let errorMessage = '❌ AI action failed. Please try again.';
     
     if (error.response?.status === 401) {
       errorMessage = '❌ Authentication error. Please log in again.';
     } else if (error.response?.status === 404) {
       errorMessage = '❌ Resume not found. Please refresh and try again.';
     } else if (error.response?.status === 500) {
       errorMessage = '❌ Server error. Our AI is temporarily unavailable.';
     } else if (error.response?.data?.message) {
       errorMessage = `❌ ${error.response.data.message}`;
     }
     
     setAiSuccess(errorMessage);
     setProgressStage(errorMessage);
     
   } finally {
     // Always cleanup SSE connection when done
     stopProgressTracking();
     
     setAiProcessing(false);
     setTimeout(() => {
       setAiSuccess('');
       setProgressStage('');
       setProgressPercentage(0);
     }, 8000); // Longer timeout for detailed messages
   }
 }, [resume, fetchResumeDetails, startProgressTracking, stopProgressTracking]);

 return { 
   aiProcessing, 
   aiSuccess, 
   openAiChat, 
   handleQuickAction,
   progressPercentage,
   progressStage,
   comparisonData
 };
};

================
File: src/components/resumes/hooks/useResumeData.js
================
// src/components/resumes/hooks/useResumeData.js - ENHANCED WITH FORCE REFRESH
import { useState, useCallback } from 'react';
import axios from '../../../utils/axios';

/**
 * Custom hook for managing resume data, loading states, and API calls
 * @param {string} id - Resume ID
 * @returns {object} Resume data, loading states, and fetch function
 */
export const useResumeData = (id) => {
  const [resume, setResume] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [processingStatus, setProcessingStatus] = useState('complete');

  const fetchResumeDetails = useCallback(async (isPolling = false, forceRefresh = false) => {
    try {
      if (!isPolling && !forceRefresh) setLoading(true);
      
      console.log(`🔄 Fetching resume details: ${id} (polling: ${isPolling}, force: ${forceRefresh})`);
      
      // 🔥 CRITICAL FIX: Add cache-busting parameter for force refresh
      const url = forceRefresh 
        ? `/resumes/${id}?_t=${Date.now()}` 
        : `/resumes/${id}`;
      
      const response = await axios.get(url);
      const resumeData = response.data.resume || response.data;
      
      console.log('📊 Resume data received:', {
        id: resumeData.id,
        name: resumeData.name,
        hasAnalysis: !!resumeData.analysis,
        overallScore: resumeData.analysis?.overallScore,
        atsCompatibility: resumeData.analysis?.atsCompatibility,
        analysisKeys: resumeData.analysis ? Object.keys(resumeData.analysis) : []
      });
      
      setResume(resumeData);
      
      // Check processing status
      if (resumeData.parsedData?.contactInfo?.name === 'Parsing Error') {
        setProcessingStatus('in-progress');
      } else {
        setProcessingStatus('complete');
      }
      
      setError('');
      
      console.log('✅ Resume data updated in state');
      
    } catch (error) {
      console.error('Error fetching resume details:', error);
      setError('Failed to load resume details. Please try again.');
    } finally {
      if (!isPolling && !forceRefresh) setLoading(false);
    }
  }, [id]);

  // 🔥 NEW: Force refresh function that bypasses cache
  const forceRefreshResume = useCallback(async () => {
    console.log('🔄 Force refreshing resume data...');
    setLoading(true);
    await fetchResumeDetails(false, true);
    setLoading(false);
  }, [fetchResumeDetails]);

  return { 
    resume, 
    loading, 
    error, 
    processingStatus, 
    fetchResumeDetails, 
    forceRefreshResume, // 🔥 NEW: Expose force refresh function
    setResume 
  };
};

================
File: src/components/resumes/ResumeDetail.js
================
// src/components/resumes/ResumeDetail.js - ENHANCED WITH ANALYSIS REFRESH
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Tabs,
  Tab,
  CircularProgress,
  Alert,
  Snackbar,
  useTheme,
  ButtonGroup,
  Fade,
  Chip
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Description as DescriptionIcon,
  Lightbulb as LightbulbIcon,
  Person as PersonIcon,
  CloudDownload as CloudDownloadIcon,
  Refresh as RefreshIcon,
  Visibility as VisibilityIcon
} from '@mui/icons-material';
import MainLayout from '../layout/MainLayout';

// Import custom hooks
import { useResumeData } from './hooks/useResumeData';
import { useAiIntegration } from './hooks/useAiIntegration';

// Import components
import TabPanel from './components/TabPanel';
import ProcessingView from './components/ProcessingView';
import AiEditingToolbar from './components/AiEditingToolbar';
import BeforeAfterComparison from './components/BeforeAfterComparison';

// Import tab content components
import OverviewTab from './tabs/OverviewTab';
import AnalysisTab from './tabs/AnalysisTab';
import ContentTab from './tabs/ContentTab';

/**
 * Main ResumeDetail component - now modular and streamlined with progress tracking and ANALYSIS REFRESH
 * Orchestrates all the individual components and manages state
 */
const ResumeDetail = () => {
  const theme = useTheme();
  const { id } = useParams();
  const navigate = useNavigate();
  const [tabValue, setTabValue] = useState(0);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'success' });
  const [showComparison, setShowComparison] = useState(false);

  // Custom hooks for data and AI integration
  const { 
    resume, 
    loading, 
    error, 
    processingStatus, 
    fetchResumeDetails, 
    forceRefreshResume // 🔥 NEW: Use force refresh function
  } = useResumeData(id);
  
  const { 
    aiProcessing, 
    aiSuccess, 
    openAiChat, 
    handleQuickAction,
    progressStage,
    progressPercentage,
    comparisonData
  } = useAiIntegration(resume, forceRefreshResume); // 🔥 FIXED: Use force refresh

  // Show comparison dialog when optimization completes
  useEffect(() => {
    if (comparisonData && !aiProcessing) {
      setShowComparison(true);
    }
  }, [comparisonData, aiProcessing]);

  // Polling for processing status
  useEffect(() => {
    if (processingStatus === 'in-progress') {
      const pollInterval = setInterval(() => fetchResumeDetails(true), 10000);
      return () => clearInterval(pollInterval);
    }
  }, [processingStatus, fetchResumeDetails]);

  // Initial load
  useEffect(() => {
    fetchResumeDetails();
  }, [fetchResumeDetails]);

  // 🔥 CRITICAL FIX: Enhanced resume update event listener with analysis refresh
  useEffect(() => {
    const handleResumeUpdate = async (event) => {
      if (event.detail?.resumeId === id) {
        console.log('🔄 ResumeDetail: Resume update event received, force refreshing...');
        
        // Force refresh the resume data to get new analysis scores
        await forceRefreshResume();
        
        // Show success alert with new scores if available
        let message = event.detail.message || '✅ Resume updated successfully!';
        
        if (event.detail.newAnalysis) {
          message += `\n📊 New Scores: Overall ${event.detail.newAnalysis.overallScore}%, ATS ${event.detail.newAnalysis.atsCompatibility}%`;
        }
        
        setAlert({
          open: true,
          message: message,
          severity: 'success'
        });
        
        // Auto-hide alert after longer duration for detailed messages
        setTimeout(() => {
          setAlert({ open: false, message: '', severity: 'success' });
        }, 8000);
      }
    };

    window.addEventListener('resumeUpdated', handleResumeUpdate);
    return () => window.removeEventListener('resumeUpdated', handleResumeUpdate);
  }, [id, forceRefreshResume]);

  const handleDownload = async () => {
    try {
      // Get the latest version or fall back to original
      let downloadUrl;
      
      if (resume.versions && resume.versions.length > 0) {
        // Get the most recent version
        const latestVersion = resume.versions[resume.versions.length - 1];
        downloadUrl = latestVersion.downloadUrl;
        console.log('📥 Downloading latest version:', latestVersion.versionNumber, latestVersion.createdAt);
      } else {
        // Fall back to original file
        downloadUrl = resume.downloadUrl;
        console.log('📥 Downloading original file');
      }
      
      if (downloadUrl) {
        // Open in new tab to trigger download
        window.open(downloadUrl, '_blank');
      } else {
        throw new Error('No download URL available');
      }
      
    } catch (error) {
      console.error('Download error:', error);
      setAlert({
        open: true,
        message: 'Failed to download the resume. Please try again.',
        severity: 'error'
      });
    }
  };

  // 🔥 ENHANCED: Force refresh function for manual refresh button
  const handleManualRefresh = async () => {
    console.log('🔄 Manual refresh triggered');
    setAlert({
      open: true,
      message: 'Refreshing resume data...',
      severity: 'info'
    });
    
    try {
      await forceRefreshResume();
      setAlert({
        open: true,
        message: '✅ Resume data refreshed successfully!',
        severity: 'success'
      });
    } catch (error) {
      setAlert({
        open: true,
        message: '❌ Failed to refresh resume data.',
        severity: 'error'
      });
    }
  };

  // Loading state
  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
          <CircularProgress size={60} thickness={4} />
          <Typography variant="h6" sx={{ mt: 3, color: 'text.secondary' }}>
            Loading your resume details...
          </Typography>
        </Box>
      </MainLayout>
    );
  }

  // Error state
  if (error) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Alert severity="error">{error}</Alert>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/resumes')}
            sx={{ mt: 2 }}
          >
            Back to Resumes
          </Button>
        </Box>
      </MainLayout>
    );
  }

  // Processing state
  if (processingStatus === 'in-progress') {
    return <ProcessingView navigate={navigate} />;
  }

  if (!resume) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Alert severity="info">Resume not found.</Alert>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/resumes')}
            sx={{ mt: 2 }}
          >
            Back to Resumes
          </Button>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <Box sx={{ p: 3, maxWidth: '1200px', mx: 'auto' }}>
        {/* Navigation */}
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate('/resumes')}
          variant="outlined"
          sx={{ mb: 3 }}
        >
          Back to Resumes
        </Button>

        {/* AI Success Message */}
        {aiSuccess && (
          <Fade in={!!aiSuccess}>
            <Alert 
              severity="success" 
              sx={{ 
                mb: 3,
                '& .MuiAlert-message': {
                  whiteSpace: 'pre-line' // Allow line breaks in success messages
                }
              }}
              action={
                comparisonData && (
                  <Button 
                    color="inherit" 
                    size="small"
                    startIcon={<VisibilityIcon />}
                    onClick={() => setShowComparison(true)}
                  >
                    View Changes
                  </Button>
                )
              }
            >
              {aiSuccess}
            </Alert>
          </Fade>
        )}

        {/* Header */}
        <Paper 
          elevation={2} 
          sx={{ 
            p: 3, 
            mb: 3, 
            borderRadius: 3,
            backgroundImage: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.primary.light}15 100%)` 
          }}
        >
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap' }}>
            <Box sx={{ maxWidth: { xs: '80%', sm: '70%', md: '75%' } }}>
              <Typography 
                variant="h4" 
                component="h1" 
                fontWeight={700} 
                color="primary"
                sx={{ 
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                  mb: 0.5
                }}
              >
                {resume.name}
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', mt: 1, flexWrap: 'wrap' }}>
                <Chip 
                  icon={<DescriptionIcon />} 
                  label={resume.fileType} 
                  size="small" 
                  sx={{ mr: 1, mb: 0.5 }} 
                />
                <Typography variant="body2" color="text.secondary">
                  Last updated: {new Date(resume.updatedAt).toLocaleDateString()}
                </Typography>
                {/* 🔥 ENHANCED: Show analysis scores in header */}
                {resume.analysis && (
                  <Box sx={{ ml: 2, display: 'flex', gap: 1 }}>
                    <Chip 
                      label={`Score: ${resume.analysis.overallScore || 0}%`}
                      size="small"
                      color={resume.analysis.overallScore >= 80 ? 'success' : resume.analysis.overallScore >= 60 ? 'warning' : 'error'}
                    />
                    <Chip 
                      label={`ATS: ${resume.analysis.atsCompatibility || 0}%`}
                      size="small"
                      color={resume.analysis.atsCompatibility >= 80 ? 'success' : resume.analysis.atsCompatibility >= 60 ? 'warning' : 'error'}
                    />
                  </Box>
                )}
              </Box>
            </Box>
            
            <ButtonGroup>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={handleManualRefresh} // 🔥 FIXED: Use force refresh
                size="small"
              >
                Refresh
              </Button>
              <Button
                variant="contained"
                startIcon={<CloudDownloadIcon />}
                onClick={handleDownload}
              >
                Download
              </Button>
            </ButtonGroup>
          </Box>
        </Paper>

        {/* AI Editing Toolbar */}
        <AiEditingToolbar
          resume={resume}
          onQuickAction={handleQuickAction}
          onOpenChat={openAiChat}
          aiProcessing={aiProcessing}
          progressStage={progressStage}
          progressPercentage={progressPercentage}
        />

        {/* Main Content Tabs */}
        <Box>
          <Paper sx={{ borderRadius: 3, overflow: 'hidden', mb: 3 }}>
            <Tabs
              value={tabValue}
              onChange={(e, newValue) => setTabValue(newValue)}
              variant="scrollable"
              scrollButtons="auto"
              sx={{ 
                borderBottom: 1, 
                borderColor: 'divider',
                bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)',
              }}
            >
              <Tab label="Overview" icon={<DescriptionIcon />} iconPosition="start" />
              <Tab label="Analysis" icon={<LightbulbIcon />} iconPosition="start" />
              <Tab label="Content" icon={<PersonIcon />} iconPosition="start" />
            </Tabs>
          </Paper>

          <TabPanel value={tabValue} index={0}>
            <OverviewTab resume={resume} theme={theme} />
          </TabPanel>

          <TabPanel value={tabValue} index={1}>
            <AnalysisTab resume={resume} theme={theme} />
          </TabPanel>

          <TabPanel value={tabValue} index={2}>
            <ContentTab resume={resume} theme={theme} />
          </TabPanel>
        </Box>

        {/* Alert Snackbar */}
        <Snackbar 
          open={alert.open} 
          autoHideDuration={6000} 
          onClose={() => setAlert({ ...alert, open: false })}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert onClose={() => setAlert({ ...alert, open: false })} severity={alert.severity}>
            {alert.message}
          </Alert>
        </Snackbar>

        {/* Before/After Comparison Dialog */}
        <BeforeAfterComparison
          open={showComparison}
          onClose={() => setShowComparison(false)}
          comparisonData={comparisonData}
        />
      </Box>
    </MainLayout>
  );
};

export default ResumeDetail;

================
File: src/components/resumes/ResumesPage.js
================
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Paper, 
  Grid, 
  Card, 
  CardContent, 
  CardActions, 
  Divider, 
  Chip, 
  CircularProgress, 
  LinearProgress,
  IconButton,
  Menu,
  MenuItem,
  Tooltip
} from '@mui/material';
import { 
  Add as AddIcon, 
  Description as DescriptionIcon,
  Refresh as RefreshIcon,
  ErrorOutline as ErrorOutlineIcon,
  MoreVert as MoreVertIcon,
  TrendingUp as TrendingUpIcon,
  LightbulbOutlined as LightbulbIcon,
  Download as DownloadIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  SmartToy as SmartToyIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import axios from '../../utils/axios';
import MainLayout from '../layout/MainLayout';
import ResumeUploadDialog from './ResumeUploadDialog';

const ResumesPage = () => {
  const navigate = useNavigate();
  const [resumes, setResumes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [openUploadDialog, setOpenUploadDialog] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedResumeId, setSelectedResumeId] = useState(null);

  useEffect(() => {
    fetchResumes();
  }, []);

  const fetchResumes = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('Fetching resumes...');
      const response = await axios.get('/resumes');
      console.log('Resume response:', response);
      setResumes(response.data.resumes || []);
    } catch (err) {
      console.error('Error fetching resumes:', err);
      setError(err.response?.data?.message || 'Failed to load resumes. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenUploadDialog = () => {
    setOpenUploadDialog(true);
  };

  const handleCloseUploadDialog = () => {
    setOpenUploadDialog(false);
  };

  const handleResumeUploaded = (resumeId) => {
    fetchResumes();
    handleCloseUploadDialog();
    
    // If a resumeId is provided, navigate to the resume detail page
    if (resumeId) {
      navigate(`/resumes/${resumeId}`);
    }
  };

  const handleMenuOpen = (event, resumeId) => {
    setAnchorEl(event.currentTarget);
    setSelectedResumeId(resumeId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedResumeId(null);
  };

  const handleDeleteResume = async () => {
    if (!selectedResumeId) return;
    
    try {
      await axios.delete(`/resumes/${selectedResumeId}`);
      setResumes(prevResumes => prevResumes.filter(resume => resume._id !== selectedResumeId));
      handleMenuClose();
    } catch (err) {
      console.error('Error deleting resume:', err);
    }
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'success.main';
    if (score >= 60) return 'warning.main';
    return 'error.main';
  };

  const renderEmptyState = () => (
    <Box sx={{ mt: 2 }}>
      <Paper 
        elevation={1} 
        sx={{ 
          p: 3, 
          textAlign: 'center', 
          display: 'flex', 
          flexDirection: 'column', 
          alignItems: 'center',
          backgroundColor: theme => theme.palette.background.paper,
          border: `1px solid`,
          borderColor: 'divider',
          borderRadius: 3,
          mb: 3
        }}
      >
        <DescriptionIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2, opacity: 0.8 }} />
        <Typography variant="h5" gutterBottom fontWeight={600}>
          Let's Supercharge Your Job Search
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3, maxWidth: 560, lineHeight: 1.5 }}>
          Upload your resume to unlock AI-powered analysis, optimization, and job matching. 
          Our platform will help you create the perfect resume, match with relevant job opportunities, 
          and significantly increase your chances of landing interviews.
        </Typography>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<AddIcon />} 
          onClick={handleOpenUploadDialog}
          sx={{ 
            py: 1, 
            px: 3, 
            fontSize: '0.9rem', 
            fontWeight: 500,
            borderRadius: 2
          }}
        >
          Upload Your First Resume
        </Button>
      </Paper>

      <Typography variant="h6" sx={{ mb: 2.5, fontWeight: 600 }}>
        How Our Resume Manager Works
      </Typography>

      <Grid container spacing={2.5} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #4caf50',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              1. AI Resume Analysis
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <DescriptionIcon sx={{ fontSize: 56, color: '#4caf50', opacity: 0.8 }} />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Our AI scans your resume and provides detailed insights about strengths, weaknesses, 
              and specific improvement suggestions.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #2196f3',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              2. ATS Optimization
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <TrendingUpIcon sx={{ fontSize: 56, color: '#2196f3', opacity: 0.8 }} />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Beat the automated screening systems with compatibility scoring and keyword 
              optimization suggestions.
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={1} sx={{ 
            p: 2.5, 
            borderRadius: 2, 
            borderLeft: '3px solid #ff9800',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <Typography variant="subtitle1" gutterBottom fontWeight={600}>
              3. Job-Resume Matching
            </Typography>
            <Box sx={{ 
                height: 100, 
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                my: 1.5
              }}
            >
              <LightbulbIcon sx={{ fontSize: 56, color: '#ff9800', opacity: 0.8 }} />
            </Box>
            <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.4 }}>
              Find the perfect match between your resume and job opportunities with skills gap 
              analysis and tailored recommendations.
            </Typography>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );

  const renderErrorState = () => (
    <Paper 
      elevation={1} 
      sx={{ 
        p: 3, 
        mt: 2,
        borderRadius: 2,
        border: `1px solid`,
        borderColor: 'error.light',
        bgcolor: theme => `${theme.palette.error.main}08`
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
        <ErrorOutlineIcon color="error" sx={{ mr: 1.5, mt: 0.5 }} />
        <Box>
          <Typography variant="subtitle1" color="error" gutterBottom fontWeight={600}>
            Error Loading Resumes
          </Typography>
          <Typography variant="body2" sx={{ mb: 2.5 }}>
            Failed to load resumes. Please try again.
          </Typography>
        </Box>
      </Box>
      <Box sx={{ display: 'flex', gap: 1.5 }}>
        <Button 
          variant="outlined" 
          color="primary" 
          startIcon={<RefreshIcon />} 
          onClick={fetchResumes}
          size="small"
          sx={{ borderRadius: 2 }}
        >
          Try Again
        </Button>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<AddIcon />} 
          onClick={handleOpenUploadDialog}
          size="small"
          sx={{ borderRadius: 2 }}
        >
          Upload New Resume
        </Button>
      </Box>
    </Paper>
  );

  const renderResumeGrid = () => (
    <Grid container spacing={3} sx={{ mt: 1 }}>
      {resumes.map((resume) => (
        <Grid item xs={12} sm={6} md={4} key={resume._id}>
          <Card sx={{ 
            height: '100%', 
            display: 'flex', 
            flexDirection: 'column',
            position: 'relative',
            transition: 'transform 0.2s, box-shadow 0.2s',
            '&:hover': {
              transform: 'translateY(-4px)',
              boxShadow: '0 8px 24px rgba(0,0,0,0.12)'
            }
          }}>
            <CardContent sx={{ flexGrow: 1, pt: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                {resume.isTailored && (
                  <SmartToyIcon color="secondary" sx={{ mr: 1 }} />
                )}
                <Typography variant="h6" gutterBottom noWrap fontWeight={500}>
                  {resume.name}
                </Typography>
              </Box>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Updated {new Date(resume.updatedAt || resume.createdAt).toLocaleDateString()}
              </Typography>
              {resume.isTailored && resume.tailoredForJob && (
                <Typography variant="body2" color="secondary.main" sx={{ fontStyle: 'italic', mb: 1 }}>
                  Tailored for {resume.tailoredForJob.jobTitle} at {resume.tailoredForJob.company}
                </Typography>
              )}
              <Divider sx={{ my: 2 }} />
              
              {resume.analysis && resume.analysis.overallScore && (
                <Box sx={{ mt: 2, mb: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="subtitle2" fontWeight={500}>
                      Resume Score
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography variant="h6" fontWeight={600} color={getScoreColor(resume.analysis.overallScore)}>
                        {resume.analysis.overallScore}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ ml: 0.5 }}>
                        /100
                      </Typography>
                    </Box>
                  </Box>
                  <LinearProgress 
                    variant="determinate" 
                    value={resume.analysis.overallScore} 
                    sx={{ 
                      height: 8, 
                      borderRadius: 2,
                      backgroundColor: 'rgba(0,0,0,0.05)',
                      '& .MuiLinearProgress-bar': {
                        backgroundColor: getScoreColor(resume.analysis.overallScore)
                      }
                    }}
                  />
                </Box>
              )}
              
              {resume.analysis && resume.analysis.atsCompatibility && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    ATS Compatibility
                  </Typography>
                  <Typography variant="body2" fontWeight={500}>
                    {resume.analysis.atsCompatibility}%
                  </Typography>
                </Box>
              )}
              
              {resume.matchAnalysis && resume.matchAnalysis.overallScore && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <TrendingUpIcon fontSize="small" color="success" sx={{ mr: 0.5 }} />
                    <Typography variant="body2" color="text.secondary">
                      Match Rate
                    </Typography>
                  </Box>
                  <Typography variant="body2" fontWeight={500}>
                    {resume.matchAnalysis.overallScore}%
                  </Typography>
                </Box>
              )}
              
              <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                <Chip 
                  label={resume.fileType ? resume.fileType.toUpperCase() : 'PDF'} 
                  size="small" 
                  variant="outlined" 
                />
                {resume.versions && resume.versions.length > 0 && (
                  <Chip 
                    label={`${resume.versions.length + 1} Versions`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
                {resume.isTailored && (
                  <Chip 
                    icon={<SmartToyIcon />}
                    label="AI Tailored" 
                    size="small" 
                    variant="outlined"
                    color="secondary"
                  />
                )}
              </Box>
              
              {resume.analysis && resume.analysis.improvementAreas && resume.analysis.improvementAreas.length > 0 && (
                <Box sx={{ mt: 2 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 1 }}>
                    <LightbulbIcon fontSize="small" sx={{ color: 'warning.main' }} />
                    <Typography variant="body2" fontWeight={500}>
                      Improvement Areas
                    </Typography>
                  </Box>
                  {resume.analysis.improvementAreas.slice(0, 2).map((area, index) => (
                    <Typography key={index} variant="body2" color="text.secondary" sx={{ 
                      display: 'flex', 
                      alignItems: 'center',
                      fontSize: '0.75rem',
                      '&:before': {
                        content: '""',
                        display: 'inline-block',
                        width: '4px',
                        height: '4px',
                        borderRadius: '50%',
                        backgroundColor: 'text.secondary',
                        mr: 1
                      }
                    }}>
                      {area.section}: {area.suggestions[0]}
                    </Typography>
                  ))}
                </Box>
              )}
            </CardContent>
            <CardActions sx={{ justifyContent: 'space-between', p: 2 }}>
              <Button 
                size="small" 
                color="primary" 
                onClick={() => navigate(`/resumes/${resume._id}`)}
                variant="contained"
              >
                View Details
              </Button>
              <Box>
                <Tooltip title="Download">
                  <IconButton 
                    size="small" 
                    onClick={() => window.open(resume.downloadUrl || resume.fileUrl, '_blank')}
                    sx={{ mr: 1 }}
                  >
                    <DownloadIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                <IconButton 
                  size="small"
                  aria-controls={`resume-menu-${resume._id}`}
                  aria-haspopup="true"
                  onClick={(e) => handleMenuOpen(e, resume._id)}
                >
                  <MoreVertIcon fontSize="small" />
                </IconButton>
              </Box>
            </CardActions>
          </Card>
        </Grid>
      ))}
      <Grid item xs={12} sm={6} md={4}>
        <Card 
          sx={{ 
            height: '100%', 
            minHeight: 200,
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'center', 
            alignItems: 'center',
            p: 3,
            backgroundColor: 'rgba(0, 0, 0, 0.02)',
            border: '2px dashed',
            borderColor: 'divider',
            cursor: 'pointer',
            transition: 'all 0.2s ease-in-out',
            '&:hover': {
              borderColor: 'primary.main',
              backgroundColor: 'rgba(63, 81, 181, 0.04)'
            }
          }}
          onClick={handleOpenUploadDialog}
        >
          <AddIcon sx={{ fontSize: 40, color: 'primary.main', mb: 2 }} />
          <Typography variant="h6" align="center" fontWeight={500}>
            Upload New Resume
          </Typography>
          <Typography variant="body2" color="text.secondary" align="center" sx={{ mt: 1 }}>
            Add another resume to your collection
          </Typography>
        </Card>
      </Grid>
    </Grid>
  );

  return (
    <MainLayout>
      <Box sx={{ p: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Typography variant="h4" component="h1" fontWeight={500}>
            Resume Manager
          </Typography>
          {!loading && !error && resumes.length > 0 && (
            <Button 
              variant="contained" 
              color="primary" 
              startIcon={<AddIcon />} 
              onClick={handleOpenUploadDialog}
              sx={{ textTransform: 'none' }}
            >
              Upload New Resume
            </Button>
          )}
        </Box>

        {loading ? (
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '300px' }}>
            <CircularProgress size={60} thickness={4} color="primary" />
            <Typography variant="h6" sx={{ mt: 3, color: 'text.secondary' }}>
              Loading your resumes...
            </Typography>
          </Box>
        ) : error ? (
          renderErrorState()
        ) : resumes.length === 0 ? (
          renderEmptyState()
        ) : (
          renderResumeGrid()
        )}
      </Box>

      <ResumeUploadDialog 
        open={openUploadDialog}
        onClose={handleCloseUploadDialog}
        onResumeUploaded={handleResumeUploaded}
      />
      
      <Menu
        id="resume-menu"
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >

        <MenuItem onClick={handleDeleteResume} sx={{ color: 'error.main' }}>
          <DeleteIcon fontSize="small" sx={{ mr: 1 }} />
          Delete Resume
        </MenuItem>
      </Menu>
    </MainLayout>
  );
};

export default ResumesPage;

================
File: src/components/resumes/ResumeUploadDialog.js
================
import React, { useState, useEffect } from 'react';
import { 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions, 
  Button, 
  TextField, 
  Box, 
  Typography,
  Alert,
  Stepper,
  Step,
  StepLabel,
  IconButton,
  LinearProgress,
  StepContent
} from '@mui/material';
import { 
  CloudUpload as CloudUploadIcon,
  Close as CloseIcon,
  PictureAsPdf as PdfIcon,
  Description as DescriptionIcon,
  CheckCircle as CheckCircleIcon,
  Info as InfoIcon,
  Psychology as PsychologyIcon,
  DataObject as DataObjectIcon,
  Memory as MemoryIcon,
  Error as ErrorIcon
} from '@mui/icons-material';
import resumeService from '../../utils/resumeService';

const ResumeUploadDialog = ({ open, onClose, onResumeUploaded }) => {
  const [activeStep, setActiveStep] = useState(0);
  const [file, setFile] = useState(null);
  const [name, setName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [dragActive, setDragActive] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [processingStage, setProcessingStage] = useState('uploading'); // 'uploading', 'parsing', 'analyzing', 'completed', 'error'
  const [uploadComplete, setUploadComplete] = useState(false);
  const [resumeId, setResumeId] = useState(null);
  const [processingTimeout, setProcessingTimeout] = useState(false);
  const [canClose, setCanClose] = useState(true);

  // Clear any intervals when the component unmounts
  useEffect(() => {
    return () => {
      // Cleanup function
    };
  }, []);

  const steps = [
    { label: 'Select Resume', icon: <DescriptionIcon /> },
    { label: 'Add Details', icon: <DataObjectIcon /> },
    { label: 'Processing', icon: <MemoryIcon /> }
  ];

  const processingSteps = [
    { label: 'Uploading', value: 10, icon: <CloudUploadIcon color="primary" /> },
    { label: 'Parsing', value: 30, icon: <DataObjectIcon color="info" /> },
    { label: 'AI Analyzing', value: 75, icon: <PsychologyIcon color="secondary" /> },
    { label: 'Complete', value: 100, icon: <CheckCircleIcon color="success" /> }
  ];

  const getProcessingStepIndex = () => {
    switch (processingStage) {
      case 'uploading': return 0;
      case 'parsing': return 1;
      case 'analyzing': return 2;
      case 'completed': return 3;
      default: return 0;
    }
  };

  const resetForm = () => {
    setFile(null);
    setName('');
    setError('');
    setActiveStep(0);
    setUploadProgress(0);
    setProcessingStage('uploading');
    setUploadComplete(false);
    setResumeId(null);
    setProcessingTimeout(false);
    setCanClose(true);
  };

  const handleClose = () => {
    if (canClose) {
      resetForm();
      onClose();
    }
  };

  const handleFileDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      validateAndSetFile(droppedFile);
    }
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      validateAndSetFile(selectedFile);
    }
  };

  const validateAndSetFile = (file) => {
    const validTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
    const maxSize = 10 * 1024 * 1024; // 10MB
    
    setError('');
    
    if (!validTypes.includes(file.type)) {
      setError('Please upload a PDF or DOCX file');
      return;
    }
    
    if (file.size > maxSize) {
      setError('File size must be less than 10MB');
      return;
    }
    
    setFile(file);
    if (!name) {
      // Set the name field to file name without extension
      const fileName = file.name.replace(/\.[^/.]+$/, "");
      setName(fileName);
    }
    
    setActiveStep(1);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
  };

  const handleProgressUpdate = (status) => {
    if (!status) return;
    
    console.log('Status update:', status); // Log the status for debugging
    
    // Update processing stage based on status
    const stage = status.stage || status.status || 'uploading';
    setProcessingStage(stage);
    
    // Update progress percentage
    if (status.percentage) {
      setUploadProgress(status.percentage);
    } else {
      // If no percentage is provided, use default values based on stage
      switch (stage) {
        case 'uploading':
          setUploadProgress(10);
          break;
        case 'parsing':
          setUploadProgress(30);
          break;
        case 'analyzing':
          setUploadProgress(75);
          break;
        case 'completed':
          setUploadProgress(100);
          setUploadComplete(true);
          setCanClose(true);
          break;
        case 'error':
          setError(status.error || status.message || 'An error occurred during processing');
          setCanClose(true);
          break;
        default:
          break;
      }
    }
  };

  const handleSubmit = async () => {
    if (!file) {
      setError('Please select a file to upload');
      return;
    }
    
    if (!name.trim()) {
      setError('Please enter a name for your resume');
      return;
    }

    try {
      setLoading(true);
      setActiveStep(2);
      setProcessingStage('uploading');
      setUploadProgress(10);
      setCanClose(false); // Prevent closing during upload
      setError('');
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('name', name);
      
      // Upload the resume
      const response = await resumeService.uploadResume(formData);
      
      console.log('Upload response:', response); // Log the response structure
      
      // Extract resume ID from the response (handle different response structures)
      let resumeId = null;
      
      if (response && response.resume && response.resume._id) {
        // Standard structure
        resumeId = response.resume._id;
      } else if (response && response._id) {
        // Alternative structure where resume is the root object
        resumeId = response._id;
      } else if (response && response.id) {
        // Alternative structure with 'id' instead of '_id'
        resumeId = response.id;
      } else if (response && response.resume && response.resume.id) {
        // Alternative structure with 'id' instead of '_id'
        resumeId = response.resume.id;
      } else if (response && response.data && response.data.resume && response.data.resume._id) {
        // Structure with data wrapper
        resumeId = response.data.resume._id;
      } else if (response && response.data && response.data._id) {
        // Structure with data wrapper
        resumeId = response.data._id;
      }
      
      if (resumeId) {
        setResumeId(resumeId);
        
        try {
          // Start polling for status updates
          await resumeService.pollResumeStatus(resumeId, handleProgressUpdate, 300000);
        } catch (pollError) {
          console.error('Error polling resume status:', pollError);
          
          if (pollError.message && pollError.message.includes('timed out')) {
            setProcessingTimeout(true);
            setError('Processing is taking longer than expected. You can close this dialog and check back later.');
          } else {
            setError(pollError.message || 'An error occurred while processing your resume');
          }
          
          setCanClose(true);
        }
      } else {
        console.error('Could not extract resume ID from response:', response);
        throw new Error('Invalid response from server - could not find resume ID');
      }
    } catch (err) {
      console.error('Error uploading resume:', err);
      setError(err.response?.data?.message || 'Failed to upload resume. Please try again.');
      setCanClose(true);
    } finally {
      setLoading(false);
    }
  };

  const getFileIcon = () => {
    if (!file) return null;
    
    return file.type === 'application/pdf' 
      ? <PdfIcon color="error" fontSize="large" />
      : <DescriptionIcon color="primary" fontSize="large" />;
  };

  const getProcessingStageIcon = () => {
    switch (processingStage) {
      case 'uploading':
        return <CloudUploadIcon sx={{ fontSize: 64, color: 'primary.main' }} />;
      case 'parsing':
        return <DataObjectIcon sx={{ fontSize: 64, color: 'info.main' }} />;
      case 'analyzing':
        return <PsychologyIcon sx={{ fontSize: 64, color: 'secondary.main' }} />;
      case 'completed':
        return <CheckCircleIcon sx={{ fontSize: 64, color: 'success.main' }} />;
      case 'error':
        return <ErrorIcon sx={{ fontSize: 64, color: 'error.main' }} />;
      default:
        return <MemoryIcon sx={{ fontSize: 64, color: 'primary.main' }} />;
    }
  };

  const getProcessingStageText = () => {
    switch (processingStage) {
      case 'uploading':
        return {
          title: 'Uploading your resume...',
          description: 'Your file is being securely uploaded to our servers.'
        };
      case 'parsing':
        return {
          title: 'Parsing your resume...',
          description: 'Our AI is extracting information from your resume, identifying your experience, skills, and qualifications.'
        };
      case 'analyzing':
        return {
          title: 'Analyzing your resume...',
          description: 'We\'re now analyzing your resume to provide personalized recommendations, identify strengths and weaknesses, and prepare improvement suggestions.'
        };
      case 'completed':
        return {
          title: 'Processing complete!',
          description: 'Your resume has been successfully processed and analyzed.'
        };
      case 'error':
        return {
          title: 'Processing error',
          description: 'There was an error processing your resume. Please try again.'
        };
      default:
        return {
          title: 'Processing your resume...',
          description: 'This may take a moment.'
        };
    }
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0:
        return (
          <Box 
            sx={{ 
              mt: 2, 
              border: '2px dashed',
              borderColor: dragActive ? 'primary.main' : 'divider',
              borderRadius: 2,
              p: 4,
              textAlign: 'center',
              cursor: 'pointer',
              backgroundColor: dragActive ? 'action.hover' : 'background.paper',
              transition: 'all 0.2s ease'
            }}
            onDrop={handleFileDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onClick={() => document.getElementById('resume-file-upload').click()}
          >
            <input
              id="resume-file-upload"
              type="file"
              accept=".pdf,.docx"
              onChange={handleFileChange}
              style={{ display: 'none' }}
            />
            
            <CloudUploadIcon sx={{ fontSize: 64, color: 'primary.main', mb: 2 }} />
            
            <Typography variant="h6" gutterBottom fontWeight={500}>
              Drag & drop your resume here
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              or click to browse your files
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Supported formats: PDF, DOCX (Max size: 10MB)
            </Typography>
          </Box>
        );
      case 1:
        return (
          <Box sx={{ mt: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              {getFileIcon()}
              <Box sx={{ ml: 2, flexGrow: 1 }}>
                <Typography variant="body1" fontWeight="medium">
                  {file?.name}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {(file?.size / 1024 / 1024).toFixed(2)} MB
                </Typography>
              </Box>
            </Box>
            
            <TextField
              label="Resume Name"
              fullWidth
              value={name}
              onChange={(e) => setName(e.target.value)}
              margin="normal"
              required
              placeholder="e.g., Software Developer Resume"
              helperText="Give your resume a descriptive name to easily identify it later"
            />
            
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 3, p: 2, bgcolor: 'info.light', borderRadius: 2 }}>
              <InfoIcon color="info" sx={{ mr: 1.5, alignSelf: 'flex-start' }} />
              <Typography variant="body2">
                Your resume will be analyzed with AI to provide personalized insights, skills assessment, and improvement suggestions. This process may take a few minutes to complete.
              </Typography>
            </Box>
          </Box>
        );
      case 2:
        const stageText = getProcessingStageText();
        const processingStepIndex = getProcessingStepIndex();
        
        return (
          <Box sx={{ mt: 2 }}>
            {/* Processing steps stepper */}
            <Stepper activeStep={processingStepIndex} orientation="vertical" sx={{ mb: 3 }}>
              {processingSteps.map((step, index) => (
                <Step key={step.label} completed={index < processingStepIndex}>
                  <StepLabel 
                    StepIconComponent={() => step.icon}
                    sx={{ 
                      '& .MuiStepLabel-label': { 
                        fontWeight: index === processingStepIndex ? 600 : 400 
                      }
                    }}
                  >
                    {step.label}
                  </StepLabel>
                  <StepContent>
                    <Typography variant="body2" color="text.secondary">
                      {index === 0 && 'Uploading your file to our secure servers'}
                      {index === 1 && 'Extracting information from your resume'}
                      {index === 2 && 'Our AI is analyzing your resume for insights and recommendations'}
                      {index === 3 && 'All done! Your resume has been processed successfully'}
                    </Typography>
                  </StepContent>
                </Step>
              ))}
            </Stepper>
            
            {/* Progress visualization */}
            <Box sx={{ textAlign: 'center', px: 2, mb: 3 }}>
              {getProcessingStageIcon()}
              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                {stageText.title}
              </Typography>
              <Typography variant="body2" color="text.secondary" gutterBottom sx={{ mb: 3, mx: 'auto', maxWidth: 400 }}>
                {stageText.description}
              </Typography>
              <LinearProgress 
                variant="determinate" 
                value={uploadProgress} 
                sx={{ height: 8, borderRadius: 4, mb: 1 }} 
              />
              <Typography variant="body2" color="text.secondary">
                {Math.round(uploadProgress)}% Complete
              </Typography>
            </Box>
            
            {/* Warning message */}
            {!uploadComplete && !processingTimeout && (
              <Alert severity="warning" sx={{ mt: 2 }}>
                <Typography variant="body2" fontWeight={500}>
                  Please don't close this window
                </Typography>
                <Typography variant="body2">
                  Closing this dialog before processing is complete may result in incomplete analysis.
                </Typography>
              </Alert>
            )}
            
            {/* Timeout message */}
            {processingTimeout && (
              <Alert severity="info" sx={{ mt: 2 }}>
                <Typography variant="body2" fontWeight={500}>
                  Processing is taking longer than expected
                </Typography>
                <Typography variant="body2">
                  You can close this dialog and check back later. Your resume will continue processing in the background.
                </Typography>
              </Alert>
            )}
            
            {/* Success message */}
            {uploadComplete && (
              <Alert severity="success" sx={{ mt: 2 }}>
                <Typography variant="body2" fontWeight={500}>
                  Resume processing complete!
                </Typography>
                <Typography variant="body2">
                  Your resume has been successfully processed and analyzed. You can now view your analysis and improvement suggestions.
                </Typography>
              </Alert>
            )}
          </Box>
        );
      default:
        return null;
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={canClose ? handleClose : undefined} 
      maxWidth="sm" 
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2
        }
      }}
    >
      <DialogTitle>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Typography variant="h6" fontWeight={600}>Upload Resume</Typography>
          {canClose && (
            <IconButton onClick={handleClose} size="small">
              <CloseIcon />
            </IconButton>
          )}
        </Box>
      </DialogTitle>
      
      <DialogContent>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}
        
        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
          {steps.map((step) => (
            <Step key={step.label}>
              <StepLabel StepIconComponent={() => step.icon}>{step.label}</StepLabel>
            </Step>
          ))}
        </Stepper>
        
        {renderStepContent()}
      </DialogContent>
      
      <DialogActions sx={{ px: 3, pb: 3 }}>
        {activeStep === 0 && (
          <Button onClick={handleClose} disabled={!canClose}>
            Cancel
          </Button>
        )}
        
        {activeStep === 1 && (
          <>
            <Button onClick={() => setActiveStep(0)} disabled={loading}>
              Back
            </Button>
            <Button 
              onClick={handleSubmit} 
              variant="contained" 
              color="primary"
              disabled={!file || !name.trim() || loading}
            >
              Upload
            </Button>
          </>
        )}
        
        {activeStep === 2 && (
          <>
            {(processingTimeout || uploadComplete || processingStage === 'error') && (
              <Button 
                onClick={() => {
                  handleClose();
                  if (uploadComplete) {
                    onResumeUploaded(resumeId);
                  }
                }} 
                variant="contained" 
                color="primary"
              >
                {uploadComplete ? 'View Resume' : 'Close'}
              </Button>
            )}
            
            {!uploadComplete && !processingTimeout && processingStage !== 'error' && (
              <Button 
                disabled={!canClose}
                variant="outlined"
                color="primary"
              >
                Processing...
              </Button>
            )}
          </>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default ResumeUploadDialog;

================
File: src/components/resumes/ResumeWithAssistant.js
================
// src/components/resumes/ResumeWithAssistant.js
import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Paper,
  Typography,
  Button,
  Fab,
  Tooltip,
  Chip,
  Alert,
  Zoom,
  useTheme,
  alpha
} from '@mui/material';
import {
  SmartToy as RobotIcon,
  AutoFixHigh as SuggestionIcon,
  Visibility as PreviewIcon,
  Edit as EditIcon,
  Chat as ChatIcon
} from '@mui/icons-material';
import { useParams } from 'react-router-dom';
import AiAssistantWidget from '../assistant/AiAssistantWidget';
import resumeService from '../../utils/resumeService';
import assistantService from '../../utils/assistantService';
import MainLayout from '../layout/MainLayout';

const ResumeWithAssistant = () => {
  const theme = useTheme();
  const { id: resumeId } = useParams();
  const [resume, setResume] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [assistantActive, setAssistantActive] = useState(false);
  const [pendingSuggestions, setPendingSuggestions] = useState([]);
  const [showAssistant, setShowAssistant] = useState(false);

  useEffect(() => {
    if (resumeId) {
      fetchResume();
    }
  }, [resumeId]);

  const fetchResume = async () => {
    try {
      setLoading(true);
      const resumeData = await resumeService.getResumeById(resumeId);
      setResume(resumeData);
    } catch (err) {
      console.error('Error fetching resume:', err);
      setError('Failed to load resume');
    } finally {
      setLoading(false);
    }
  };

  const handleResumeUpdate = async (changes) => {
    try {
      // Apply changes to resume
      const updatedResume = await assistantService.applyResumeChanges(resumeId, changes);
      setResume(updatedResume.resume);
      
      // Show success feedback
      setPendingSuggestions(prev => prev.filter(s => s.id !== changes.id));
      
    } catch (error) {
      console.error('Error applying resume changes:', error);
    }
  };

  const handleAssistantToggle = () => {
    setShowAssistant(!showAssistant);
  };

  const ResumePreview = () => (
    <Paper 
      elevation={2} 
      sx={{ 
        p: 3, 
        height: 'fit-content',
        borderRadius: 2,
        border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`
      }}
    >
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" fontWeight={600}>
          {resume?.name || 'Resume Preview'}
        </Typography>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Tooltip title="Edit Resume">
            <Button
              variant="outlined"
              size="small"
              startIcon={<EditIcon />}
              onClick={() => {/* Navigate to edit */}}
            >
              Edit
            </Button>
          </Tooltip>
          <Tooltip title="Preview Resume">
            <Button
              variant="outlined"
              size="small"
              startIcon={<PreviewIcon />}
              onClick={() => {/* Open preview */}}
            >
              Preview
            </Button>
          </Tooltip>
        </Box>
      </Box>

      {/* Resume Sections */}
      {resume?.parsedData && (
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          {/* Contact Info */}
          {resume.parsedData.contactInfo && (
            <Box>
              <Typography variant="h6" fontWeight={500} sx={{ mb: 1, color: theme.palette.primary.main }}>
                Contact Information
              </Typography>
              <Typography variant="body1" fontWeight={500}>
                {resume.parsedData.contactInfo.name}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {resume.parsedData.contactInfo.email} | {resume.parsedData.contactInfo.phone}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {resume.parsedData.contactInfo.location}
              </Typography>
            </Box>
          )}

          {/* Summary */}
          {resume.parsedData.summary && (
            <Box>
              <Typography variant="h6" fontWeight={500} sx={{ mb: 1, color: theme.palette.primary.main }}>
                Professional Summary
              </Typography>
              <Typography variant="body2" sx={{ lineHeight: 1.6 }}>
                {resume.parsedData.summary}
              </Typography>
            </Box>
          )}

          {/* Experience */}
          {resume.parsedData.experience?.length > 0 && (
            <Box>
              <Typography variant="h6" fontWeight={500} sx={{ mb: 2, color: theme.palette.primary.main }}>
                Experience
              </Typography>
              {resume.parsedData.experience.slice(0, 3).map((exp, index) => (
                <Box key={index} sx={{ mb: 2, pb: 2, borderBottom: index < 2 ? `1px solid ${theme.palette.divider}` : 'none' }}>
                  <Typography variant="subtitle1" fontWeight={500}>
                    {exp.title} at {exp.company}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    {exp.startDate} - {exp.endDate || 'Present'} | {exp.location}
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    {exp.description}
                  </Typography>
                  {exp.highlights?.length > 0 && (
                    <Box component="ul" sx={{ mt: 1, pl: 2 }}>
                      {exp.highlights.slice(0, 3).map((highlight, i) => (
                        <Typography component="li" variant="body2" key={i} sx={{ mb: 0.5 }}>
                          {highlight}
                        </Typography>
                      ))}
                    </Box>
                  )}
                </Box>
              ))}
            </Box>
          )}

          {/* Skills */}
          {resume.parsedData.skills?.length > 0 && (
            <Box>
              <Typography variant="h6" fontWeight={500} sx={{ mb: 2, color: theme.palette.primary.main }}>
                Skills
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {resume.parsedData.skills.slice(0, 12).map((skill, index) => (
                  <Chip
                    key={index}
                    label={typeof skill === 'string' ? skill : skill.name}
                    size="small"
                    variant="outlined"
                    sx={{ borderColor: alpha(theme.palette.primary.main, 0.3) }}
                  />
                ))}
                {resume.parsedData.skills.length > 12 && (
                  <Chip
                    label={`+${resume.parsedData.skills.length - 12} more`}
                    size="small"
                    color="primary"
                    variant="outlined"
                  />
                )}
              </Box>
            </Box>
          )}

          {/* Education */}
          {resume.parsedData.education?.length > 0 && (
            <Box>
              <Typography variant="h6" fontWeight={500} sx={{ mb: 2, color: theme.palette.primary.main }}>
                Education
              </Typography>
              {resume.parsedData.education.map((edu, index) => (
                <Box key={index} sx={{ mb: 1 }}>
                  <Typography variant="subtitle1" fontWeight={500}>
                    {edu.degree} in {edu.field}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {edu.institution} | {edu.endDate}
                  </Typography>
                </Box>
              ))}
            </Box>
          )}
        </Box>
      )}
    </Paper>
  );

  const AssistantPanel = () => (
    <Box sx={{ position: 'sticky', top: 24 }}>
      {/* AI Suggestions Banner */}
      {pendingSuggestions.length > 0 && (
        <Alert 
          severity="info" 
          icon={<SuggestionIcon />}
          sx={{ 
            mb: 2,
            border: `1px solid ${alpha(theme.palette.info.main, 0.3)}`,
            borderRadius: 2
          }}
          action={
            <Button 
              size="small" 
              onClick={handleAssistantToggle}
              sx={{ color: theme.palette.info.main }}
            >
              Review
            </Button>
          }
        >
          AJ has {pendingSuggestions.length} suggestion{pendingSuggestions.length > 1 ? 's' : ''} for your resume
        </Alert>
      )}

      {/* Assistant Status */}
      <Paper 
        elevation={1} 
        sx={{ 
          p: 2, 
          borderRadius: 2,
          background: `linear-gradient(45deg, ${alpha(theme.palette.secondary.main, 0.05)} 30%, ${alpha(theme.palette.secondary.light, 0.05)} 90%)`,
          border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <RobotIcon sx={{ color: theme.palette.secondary.main, mr: 1 }} />
          <Typography variant="h6" fontWeight={500}>
            AJ Assistant
          </Typography>
          {assistantActive && (
            <Chip 
              label="Active" 
              size="small" 
              color="success" 
              sx={{ ml: 'auto' }}
            />
          )}
        </Box>
        
        <Typography variant="body2" color="text.secondary" paragraph>
          Your AI career assistant is ready to help optimize your resume and provide career guidance.
        </Typography>

        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="contained"
            color="secondary"
            startIcon={<ChatIcon />}
            onClick={handleAssistantToggle}
            size="small"
            fullWidth
          >
            Chat with AJ
          </Button>
        </Box>

        <Box sx={{ mt: 2, pt: 2, borderTop: `1px solid ${theme.palette.divider}` }}>
          <Typography variant="caption" color="text.secondary">
            Quick Actions:
          </Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>
            <Chip 
              label="Analyze Resume" 
              size="small" 
              variant="outlined" 
              clickable
              onClick={() => {/* Handle quick action */}}
            />
            <Chip 
              label="Improve Summary" 
              size="small" 
              variant="outlined" 
              clickable
            />
            <Chip 
              label="Enhance Skills" 
              size="small" 
              variant="outlined" 
              clickable
            />
          </Box>
        </Box>
      </Paper>
    </Box>
  );

  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '60vh' }}>
          <Typography>Loading resume...</Typography>
        </Box>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <Box sx={{ p: 3 }}>
          <Alert severity="error">{error}</Alert>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <Box sx={{ p: 3, maxWidth: '1400px', mx: 'auto' }}>
        <Grid container spacing={3}>
          {/* Main Resume Content */}
          <Grid item xs={12} md={8}>
            <ResumePreview />
          </Grid>

          {/* AI Assistant Panel */}
          <Grid item xs={12} md={4}>
            <AssistantPanel />
          </Grid>
        </Grid>

        {/* AI Assistant Widget */}
        {showAssistant && (
          <Zoom in={showAssistant}>
            <Box>
              <AiAssistantWidget
                resumeId={resumeId}
                resumeData={resume?.parsedData}
                onResumeUpdate={handleResumeUpdate}
                position={{ bottom: 100, right: 24 }}
              />
            </Box>
          </Zoom>
        )}

        {/* Floating Assistant Button (when not shown in panel) */}
        {!showAssistant && (
          <Zoom in={!showAssistant}>
            <Fab
              color="secondary"
              onClick={handleAssistantToggle}
              sx={{
                position: 'fixed',
                bottom: 24,
                right: 24,
                zIndex: 1000,
                background: `linear-gradient(45deg, ${theme.palette.secondary.main} 30%, ${theme.palette.secondary.light} 90%)`,
                boxShadow: '0 8px 24px rgba(0, 196, 180, 0.3)',
                '&:hover': {
// Continuation of ResumeWithAssistant.js

                  background: `linear-gradient(45deg, ${theme.palette.secondary.dark} 30%, ${theme.palette.secondary.main} 90%)`,
                  transform: 'scale(1.05)',
                },
                transition: 'all 0.2s ease-in-out'
              }}
            >
              <RobotIcon sx={{ fontSize: 28 }} />
            </Fab>
          </Zoom>
        )}
      </Box>
    </MainLayout>
  );
};

export default ResumeWithAssistant;

================
File: src/components/resumes/tabs/AnalysisTab.js
================
// src/components/resumes/tabs/AnalysisTab.js
import React from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardHeader,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider
} from '@mui/material';
import {
  ArrowUpward as ArrowUpwardIcon,
  Lightbulb as LightbulbIcon,
  Timeline as TimelineIcon,
  CheckCircle as CheckCircleIcon,
  ExpandMore as ExpandMoreIcon
} from '@mui/icons-material';
import { renderImprovedSnippet } from '../utils/resumeHelpers';

/**
 * Analysis tab component showing detailed improvement areas and recommendations
 * @param {object} props - Component props
 * @param {object} props.resume - Resume data
 * @param {object} props.theme - MUI theme object
 * @returns {JSX.Element} Analysis tab content
 */
const AnalysisTab = ({ resume, theme }) => {
  const COLORS = [
    theme.palette.primary.main, 
    theme.palette.secondary.main, 
    theme.palette.success.main, 
    theme.palette.warning.main, 
    theme.palette.error.main,
    theme.palette.info.main
  ];

  return (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Card elevation={2} sx={{ borderRadius: 3, mb: 3 }}>
          <CardHeader 
            title="Detailed Improvement Areas" 
            avatar={<ArrowUpwardIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent sx={{ pb: 1 }}>
            {(resume.analysis?.improvementAreas || []).map((area, index) => (
              <Accordion 
                key={index} 
                defaultExpanded={index === 0}
                sx={{ 
                  mb: 2, 
                  borderRadius: '8px !important', 
                  overflow: 'hidden',
                  '&:before': { display: 'none' },
                  boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                }}
              >
                <AccordionSummary
                  expandIcon={<ExpandMoreIcon />}
                  sx={{ 
                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)' 
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Box sx={{ 
                      width: 32, 
                      height: 32, 
                      borderRadius: '50%', 
                      bgcolor: theme.palette.primary.main,
                      color: 'white',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mr: 2,
                      flexShrink: 0
                    }}>
                      {index + 1}
                    </Box>
                    <Typography variant="subtitle1" fontWeight="bold" sx={{ textTransform: 'capitalize' }}>
                      {area.section}
                    </Typography>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <List dense>
                    {(area.suggestions || []).map((suggestion, idx) => (
                      <ListItem key={idx} sx={{ px: 0 }}>
                        <ListItemIcon>
                          <LightbulbIcon fontSize="small" color="warning" />
                        </ListItemIcon>
                        <ListItemText primary={suggestion} />
                      </ListItem>
                    ))}
                  </List>
                  
                  {area.improvedSnippets && area.improvedSnippets.length > 0 ? (
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="subtitle2" gutterBottom sx={{ 
                        color: theme.palette.primary.main,
                        fontWeight: 600,
                        display: 'flex',
                        alignItems: 'center'
                      }}>
                        AI-Enhanced Examples
                      </Typography>
                      {area.improvedSnippets.map((snippet) => (
                        renderImprovedSnippet(snippet, theme)
                      ))}
                    </Box>
                  ) : (
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="subtitle2" gutterBottom sx={{ 
                        color: theme.palette.primary.main,
                        fontWeight: 600
                      }}>
                        No examples available for this section
                      </Typography>
                    </Box>
                  )}
                </AccordionDetails>
              </Accordion>
            ))}
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12}>
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
          <CardHeader 
            title="Keyword Recommendations" 
            avatar={<LightbulbIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent>
            <Typography variant="body2" color="text.secondary" paragraph>
              Including these keywords will boost your resume's ATS compatibility and relevance for your target roles:
            </Typography>
            
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
              {(resume.analysis?.keywordsSuggestions || []).map((keyword, index) => (
                <Chip 
                  key={index} 
                  label={keyword} 
                  sx={{ 
                    bgcolor: COLORS[index % COLORS.length] + '20',
                    color: COLORS[index % COLORS.length],
                    fontWeight: 500,
                    borderRadius: 2
                  }} 
                />
              ))}
            </Box>
            
            <Box sx={{ 
              p: 2, 
              bgcolor: 'rgba(33, 150, 243, 0.1)', 
              borderRadius: 2,
              border: '1px solid rgba(33, 150, 243, 0.2)',
              display: 'flex',
              alignItems: 'flex-start'
            }}>
              <CheckCircleIcon color="info" sx={{ mr: 1.5, mt: 0.5 }} />
              <Typography variant="body2">
                Using these keywords strategically throughout your resume helps you pass through Applicant Tracking Systems (ATS) and catch the attention of recruiters looking for these specific skills and qualifications.
              </Typography>
            </Box>
          </CardContent>
        </Card>
      </Grid>

      {resume.analysis?.profileSummary && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ borderRadius: 3 }}>
            <CardHeader 
              title="Career Path Analysis" 
              avatar={<TimelineIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle1" gutterBottom fontWeight={600} color="primary">
                      Current Profile
                    </Typography>
                    <Box sx={{ p: 2, bgcolor: 'rgba(0,0,0,0.02)', borderRadius: 2 }}>
                      <Typography variant="body1" fontWeight={500} paragraph>
                        {resume.analysis.profileSummary.currentRole || 'Product Manager'}
                      </Typography>
                      <Typography variant="body2" paragraph>
                        Career Level: {resume.analysis.profileSummary.careerLevel || 'Mid-Senior'}
                      </Typography>
                      <Typography variant="body2" sx={{ mb: 1 }}>
                        Industry Experience:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                        {(resume.analysis.profileSummary.industries || ['Software', 'SaaS', 'Enterprise']).map((industry, index) => (
                          <Chip 
                            key={index} 
                            label={industry} 
                            size="small" 
                            sx={{ 
                              bgcolor: `${theme.palette.primary.main}20`,
                              color: theme.palette.primary.main 
                            }} 
                          />
                        ))}
                      </Box>
                    </Box>
                  </Box>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle1" gutterBottom fontWeight={600} color="primary">
                      Career Progression Opportunities
                    </Typography>
                    <Box sx={{ p: 2, bgcolor: 'rgba(0,0,0,0.02)', borderRadius: 2 }}>
                      <Typography variant="body2" sx={{ mb: 1 }}>
                        Suggested Job Titles:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 2 }}>
                        {(resume.analysis.profileSummary.suggestedJobTitles || ['Senior Product Manager', 'Product Lead', 'Director of Product']).map((title, index) => (
                          <Chip 
                            key={index} 
                            label={title} 
                            size="small" 
                            variant="outlined" 
                            color="primary" 
                          />
                        ))}
                      </Box>
                      
                      <Typography variant="body2" sx={{ mb: 1 }}>
                        Recommended Industries:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                        {(resume.analysis.profileSummary.suggestedIndustries || ['AI/ML', 'FinTech', 'Enterprise SaaS']).map((industry, index) => (
                          <Chip 
                            key={index} 
                            label={industry} 
                            size="small" 
                            sx={{ 
                              bgcolor: `${theme.palette.secondary.main}20`,
                              color: theme.palette.secondary.main
                            }} 
                          />
                        ))}
                      </Box>
                    </Box>
                  </Box>
                </Grid>
                
                <Grid item xs={12}>
                  <Divider sx={{ my: 1 }} />
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle1" gutterBottom fontWeight={600} color="primary">
                      Career Growth Recommendations
                    </Typography>
                    <List dense>
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon>
                          <CheckCircleIcon color="success" />
                        </ListItemIcon>
                        <ListItemText 
                          primary="Highlight quantifiable achievements in product launches and user metrics" 
                          secondary="Add specific numbers to demonstrate your impact on business outcomes"
                        />
                      </ListItem>
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon>
                          <CheckCircleIcon color="success" />
                        </ListItemIcon>
                        <ListItemText 
                          primary="Showcase strategic thinking and leadership experience" 
                          secondary="Emphasize instances where you've led cross-functional teams or influenced product strategy"
                        />
                      </ListItem>
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon>
                          <CheckCircleIcon color="success" />
                        </ListItemIcon>
                        <ListItemText 
                          primary="Emphasize technical skills alongside product management expertise" 
                          secondary="Highlight your understanding of technical concepts, data analysis capabilities, and technical tools"
                        />
                      </ListItem>
                    </List>
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      )}
    </Grid>
  );
};

export default AnalysisTab;

================
File: src/components/resumes/tabs/ContentTab.js
================
// src/components/resumes/tabs/ContentTab.js
import React from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardHeader,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip
} from '@mui/material';
import {
  Person as PersonIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  LocationOn as LocationOnIcon,
  Description as DescriptionIcon,
  Work as WorkIcon,
  School as SchoolIcon,
  Code as CodeIcon,
  CheckCircle as CheckCircleIcon,
  BusinessCenter as BusinessCenterIcon,
  Timeline as TimelineIcon
} from '@mui/icons-material';
import { formatDateRange } from '../utils/resumeHelpers';

/**
 * Content tab component showing full resume content in structured format
 * @param {object} props - Component props
 * @param {object} props.resume - Resume data
 * @param {object} props.theme - MUI theme object
 * @returns {JSX.Element} Content tab content
 */
const ContentTab = ({ resume, theme }) => {
  const COLORS = [
    theme.palette.primary.main, 
    theme.palette.secondary.main, 
    theme.palette.success.main, 
    theme.palette.warning.main, 
    theme.palette.error.main,
    theme.palette.info.main
  ];

  return (
    <Grid container spacing={3}>
      {/* Contact Information */}
      <Grid item xs={12}>
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
          <CardHeader 
            title="Contact Information" 
            avatar={<PersonIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                  <PersonIcon fontSize="small" sx={{ mt: 0.5, mr: 1, color: theme.palette.primary.main }} />
                  <Box>
                    <Typography variant="body2" color="text.secondary">Name</Typography>
                    <Typography variant="body1" fontWeight="medium">{resume.parsedData?.contactInfo?.name || 'Not specified'}</Typography>
                  </Box>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                  <EmailIcon fontSize="small" sx={{ mt: 0.5, mr: 1, color: theme.palette.primary.main }} />
                  <Box>
                    <Typography variant="body2" color="text.secondary">Email</Typography>
                    <Typography variant="body1" fontWeight="medium">{resume.parsedData?.contactInfo?.email || 'Not specified'}</Typography>
                  </Box>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                  <PhoneIcon fontSize="small" sx={{ mt: 0.5, mr: 1, color: theme.palette.primary.main }} />
                  <Box>
                    <Typography variant="body2" color="text.secondary">Phone</Typography>
                    <Typography variant="body1" fontWeight="medium">{resume.parsedData?.contactInfo?.phone || 'Not specified'}</Typography>
                  </Box>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
                  <LocationOnIcon fontSize="small" sx={{ mt: 0.5, mr: 1, color: theme.palette.primary.main }} />
                  <Box>
                    <Typography variant="body2" color="text.secondary">Location</Typography>
                    <Typography variant="body1" fontWeight="medium">{resume.parsedData?.contactInfo?.location || 'Not specified'}</Typography>
                  </Box>
                </Box>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      </Grid>

      {/* Summary */}
      {resume.parsedData?.summary && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Professional Summary" 
              avatar={<DescriptionIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Typography variant="body1" sx={{ lineHeight: 1.7 }}>
                {resume.parsedData.summary}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Experience */}
      {resume.parsedData?.experience && resume.parsedData.experience.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Work Experience" 
              avatar={<WorkIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              {resume.parsedData.experience.map((exp, index) => (
                <Box key={index} sx={{ 
                  mb: 3, 
                  pb: 3, 
                  borderBottom: index < resume.parsedData.experience.length - 1 ? '1px solid' : 'none', 
                  borderColor: 'divider' 
                }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap' }}>
                    <Box>
                      <Typography variant="h6" fontWeight={600} color="primary">
                        {exp.title}
                      </Typography>
                      <Typography variant="subtitle1" sx={{ display: 'flex', alignItems: 'center' }}>
                        <BusinessCenterIcon fontSize="small" sx={{ mr: 1, color: theme.palette.secondary.main }} />
                        {exp.company}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ 
                      bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)', 
                      px: 1.5, 
                      py: 0.5, 
                      borderRadius: 2,
                      display: 'flex',
                      alignItems: 'center',
                      alignSelf: 'flex-start'
                    }}>
                      <TimelineIcon fontSize="small" sx={{ mr: 0.5, color: theme.palette.primary.main }} />
                      <Typography variant="body2" color="text.secondary">
                        {formatDateRange(exp.startDate, exp.endDate)}
                      </Typography>
                    </Box>
                  </Box>
                  
                  {exp.location && (
                    <Typography variant="body2" color="text.secondary" sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      mt: 0.5 
                    }}>
                      <LocationOnIcon fontSize="small" sx={{ mr: 0.5 }} /> {exp.location}
                    </Typography>
                  )}
                  
                  {exp.description && (
                    <Typography variant="body2" sx={{ whiteSpace: 'pre-line', my: 1.5 }}>
                      {exp.description}
                    </Typography>
                  )}
                  
                  {exp.highlights && exp.highlights.length > 0 && (
                    <Box sx={{ mt: 1.5 }}>
                      <Typography variant="body2" fontWeight="bold" color="primary">
                        Key Achievements:
                      </Typography>
                      <List dense sx={{ pl: 2 }}>
                        {exp.highlights.map((highlight, idx) => (
                          <ListItem key={idx} sx={{ px: 0, py: 0.5 }}>
                            <ListItemIcon sx={{ minWidth: 28 }}>
                              <CheckCircleIcon fontSize="small" color="success" />
                            </ListItemIcon>
                            <ListItemText primary={highlight} />
                          </ListItem>
                        ))}
                      </List>
                    </Box>
                  )}
                  
                  {exp.skills && exp.skills.length > 0 && (
                    <Box sx={{ mt: 1.5 }}>
                      <Typography variant="body2" fontWeight="bold" color="primary">
                        Skills Used:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
                        {exp.skills.map((skill, idx) => (
                          <Chip 
                            key={idx} 
                            label={skill} 
                            size="small" 
                            sx={{ 
                              bgcolor: `${theme.palette.primary.main}15`,
                              color: theme.palette.primary.main 
                            }} 
                          />
                        ))}
                      </Box>
                    </Box>
                  )}
                </Box>
              ))}
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Education */}
      {resume.parsedData?.education && resume.parsedData.education.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Education" 
              avatar={<SchoolIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              {resume.parsedData.education.map((edu, index) => (
                <Box key={index} sx={{ 
                  mb: 3, 
                  pb: 3, 
                  borderBottom: index < resume.parsedData.education.length - 1 ? '1px solid' : 'none', 
                  borderColor: 'divider' 
                }}>
                  <Typography variant="h6" fontWeight={600} color="primary">
                    {edu.degree} {edu.field ? `in ${edu.field}` : ''}
                  </Typography>
                  <Typography variant="subtitle1" sx={{ display: 'flex', alignItems: 'center' }}>
                    <SchoolIcon fontSize="small" sx={{ mr: 1, color: theme.palette.secondary.main }} />
                    {edu.institution}
                  </Typography>
                  <Box sx={{ 
                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)', 
                    px: 1.5, 
                    py: 0.5, 
                    borderRadius: 2,
                    display: 'inline-flex',
                    alignItems: 'center',
                    mt: 1
                  }}>
                    <TimelineIcon fontSize="small" sx={{ mr: 0.5, color: theme.palette.primary.main }} />
                    <Typography variant="body2" color="text.secondary">
                      {formatDateRange(edu.startDate, edu.endDate)}
                    </Typography>
                  </Box>
                  
                  {edu.gpa && (
                    <Typography variant="body2" sx={{ mt: 1.5 }}>
                      <b>GPA:</b> {edu.gpa}
                    </Typography>
                  )}
                  
                  {edu.highlights && edu.highlights.length > 0 && (
                    <Box sx={{ mt: 1.5 }}>
                      <Typography variant="body2" fontWeight="bold" color="primary">
                        Highlights:
                      </Typography>
                      <List dense sx={{ pl: 2 }}>
                        {edu.highlights.map((highlight, idx) => (
                          <ListItem key={idx} sx={{ px: 0, py: 0.5 }}>
                            <ListItemIcon sx={{ minWidth: 28 }}>
                              <CheckCircleIcon fontSize="small" color="success" />
                            </ListItemIcon>
                            <ListItemText primary={highlight} />
                          </ListItem>
                        ))}
                      </List>
                    </Box>
                  )}
                </Box>
              ))}
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Certifications */}
      {resume.parsedData?.certifications && resume.parsedData.certifications.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Certifications" 
              avatar={<CheckCircleIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Grid container spacing={2}>
                {resume.parsedData.certifications.map((cert, index) => (
                  <Grid item xs={12} sm={6} lg={4} key={index}>
                    <Box sx={{ 
                      p: 2, 
                      borderRadius: 2, 
                      border: '1px solid',
                      borderColor: theme.palette.divider,
                      height: '100%',
                      display: 'flex',
                      flexDirection: 'column',
                      transition: 'all 0.2s ease',
                      '&:hover': {
                        boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
                        borderColor: theme.palette.primary.light
                      }
                    }}>
                      <Typography variant="h6" fontWeight={600} color="primary" gutterBottom>
                        {cert.name}
                      </Typography>
                      <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                        <BusinessCenterIcon fontSize="small" sx={{ mr: 0.5, color: theme.palette.secondary.main }} />
                        {cert.issuer}
                      </Typography>
                      {cert.dateObtained && (
                        <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center', color: 'text.secondary' }}>
                          <TimelineIcon fontSize="small" sx={{ mr: 0.5 }} />
                          {new Date(cert.dateObtained).toLocaleDateString()}
                          {cert.validUntil && ` - ${new Date(cert.validUntil).toLocaleDateString()}`}
                        </Typography>
                      )}
                    </Box>
                  </Grid>
                ))}
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Skills */}
      {resume.parsedData?.skills && resume.parsedData.skills.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Skills" 
              avatar={<CodeIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {resume.parsedData.skills.map((skill, index) => {
                  let color;
                  if (typeof skill === 'object' && skill.level) {
                    color = skill.level === 'Expert' ? theme.palette.success.main : 
                            skill.level === 'Advanced' ? theme.palette.info.main : 
                            skill.level === 'Intermediate' ? theme.palette.warning.main : 
                            theme.palette.grey[600];
                  } else {
                    color = COLORS[index % COLORS.length];
                  }
                  
                  return (
                    <Chip 
                      key={index} 
                      label={
                        typeof skill === 'object' ? 
                          skill.level ? 
                            `${skill.name} (${skill.level})` : 
                            skill.name : 
                          skill
                      } 
                      sx={{ 
                        bgcolor: `${color}15`, 
                        color: color,
                        fontWeight: 500,
                        borderRadius: 2,
                        py: 2
                      }} 
                    />
                  );
                })}
              </Box>
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Languages */}
      {resume.parsedData?.languages && resume.parsedData.languages.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
            <CardHeader 
              title="Languages" 
              avatar={<PersonIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Grid container spacing={2}>
                {resume.parsedData.languages.map((lang, index) => (
                  <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                    <Box sx={{ 
                      p: 2,
                      borderRadius: 2,
                      border: '1px solid',
                      borderColor: theme.palette.divider,
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center'
                    }}>
                      <Box>
                        <Typography variant="body1" fontWeight="medium">{lang.language}</Typography>
                        {lang.proficiency && (
                          <Typography variant="body2" color="text.secondary">{lang.proficiency}</Typography>
                        )}
                      </Box>
                      {lang.proficiency && (
                        <Chip 
                          label={lang.proficiency} 
                          size="small" 
                          sx={{ 
                            bgcolor: theme.palette.primary.main + '20',
                            color: theme.palette.primary.main,
                            fontWeight: 500 
                          }} 
                        />
                      )}
                    </Box>
                  </Grid>
                ))}
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      )}

      {/* Projects */}
      {resume.parsedData?.projects && resume.parsedData.projects.length > 0 && (
        <Grid item xs={12}>
          <Card elevation={2} sx={{ borderRadius: 3 }}>
            <CardHeader 
              title="Projects" 
              avatar={<WorkIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <Grid container spacing={3}>
                {resume.parsedData.projects.map((project, index) => (
                  <Grid item xs={12} md={6} key={index}>
                    <Box sx={{ 
                      p: 2,
                      borderRadius: 3,
                      border: '1px solid',
                      borderColor: theme.palette.divider,
                      height: '100%',
                      transition: 'all 0.2s ease',
                      '&:hover': {
                        boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
                        borderColor: theme.palette.primary.light
                      }
                    }}>
                      <Typography variant="h6" fontWeight={600} color="primary">
                        {project.name}
                      </Typography>
                      
                      {project.url && (
                        <Typography variant="body2" color="primary" component="a" href={project.url} target="_blank" sx={{ 
                          display: 'block', 
                          mb: 1,
                          textDecoration: 'none',
                          '&:hover': { textDecoration: 'underline' }
                        }}>
                          {project.url}
                        </Typography>
                      )}
                      
                      {(project.startDate || project.endDate) && (
                        <Typography variant="body2" color="text.secondary" sx={{ 
                          mb: 1.5,
                          display: 'flex',
                          alignItems: 'center' 
                        }}>
                          <TimelineIcon fontSize="small" sx={{ mr: 0.5 }} />
                          {formatDateRange(project.startDate, project.endDate)}
                        </Typography>
                      )}
                      
                      {project.description && (
                        <Typography variant="body2" sx={{ mb: 1.5 }}>
                          {project.description}
                        </Typography>
                      )}
                      
                      {project.skills && project.skills.length > 0 && (
                        <Box sx={{ mt: 1.5 }}>
                          <Typography variant="body2" fontWeight="bold" color="text.secondary">
                            Technologies Used:
                          </Typography>
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>
                            {project.skills.map((skill, idx) => (
                              <Chip 
                                key={idx} 
                                label={skill} 
                                size="small" 
                                sx={{ 
                                  bgcolor: `${theme.palette.secondary.main}15`,
                                  color: theme.palette.secondary.main 
                                }} 
                              />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </Box>
                  </Grid>
                ))}
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      )}
    </Grid>
  );
};

export default ContentTab;

================
File: src/components/resumes/tabs/OverviewTab.js
================
// src/components/resumes/tabs/OverviewTab.js
import React from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardHeader,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  LinearProgress
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Person as PersonIcon,
  BusinessCenter as BusinessCenterIcon,
  Timeline as TimelineIcon,
  Lightbulb as LightbulbIcon
} from '@mui/icons-material';
import ScoreDisplay from '../components/ScoreDisplay';

/**
 * Overview tab component showing resume scores, strengths, and profile summary
 * @param {object} props - Component props
 * @param {object} props.resume - Resume data
 * @param {object} props.theme - MUI theme object
 * @returns {JSX.Element} Overview tab content
 */
const OverviewTab = ({ resume, theme }) => {
  const COLORS = [
    theme.palette.primary.main, 
    theme.palette.secondary.main, 
    theme.palette.success.main, 
    theme.palette.warning.main, 
    theme.palette.error.main,
    theme.palette.info.main
  ];

  return (
    <Grid container spacing={3}>
      <Grid item xs={12} md={4}>
        {/* Resume Scores Card */}
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
          <CardHeader 
            title="Resume Scores" 
            avatar={<CheckCircleIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent sx={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center' }}>
            <ScoreDisplay 
              value={resume.analysis?.overallScore || 0} 
              label="Overall Score"
            />
            
            <Box sx={{ width: '100%', mt: 3 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body1">ATS Compatibility</Typography>
                <Typography variant="h6" fontWeight="medium">
                  {resume.analysis?.atsCompatibility || 0}%
                </Typography>
              </Box>
              <LinearProgress 
                variant="determinate" 
                value={resume.analysis?.atsCompatibility || 0}
                sx={{ height: 8, borderRadius: 4 }}
              />
            </Box>
          </CardContent>
        </Card>

        {/* Profile Summary Card */}
        {resume.analysis?.profileSummary && (
          <Card elevation={2} sx={{ borderRadius: 3 }}>
            <CardHeader 
              title="Professional Profile" 
              avatar={<PersonIcon color="primary" />}
              sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
            />
            <CardContent>
              <List disablePadding>
                <ListItem disableGutters sx={{ px: 0, py: 1 }}>
                  <ListItemIcon sx={{ minWidth: 40 }}>
                    <BusinessCenterIcon fontSize="small" color="primary" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Current Role" 
                    secondary={resume.analysis.profileSummary.currentRole || 'Not specified'}
                  />
                </ListItem>
                
                <ListItem disableGutters sx={{ px: 0, py: 1 }}>
                  <ListItemIcon sx={{ minWidth: 40 }}>
                    <TimelineIcon fontSize="small" color="primary" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Career Level" 
                    secondary={resume.analysis.profileSummary.careerLevel || 'Mid-level'}
                  />
                </ListItem>
              </List>
              
              {resume.analysis.profileSummary.suggestedJobTitles?.length > 0 && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle2" gutterBottom color="text.secondary">
                    Suggested Job Titles
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    {resume.analysis.profileSummary.suggestedJobTitles.map((title, index) => (
                      <Chip 
                        key={index} 
                        label={title} 
                        size="small" 
                        variant="outlined" 
                        color="primary" 
                      />
                    ))}
                  </Box>
                </Box>
              )}
            </CardContent>
          </Card>
        )}
      </Grid>

      <Grid item xs={12} md={8}>
        {/* Strengths & Weaknesses */}
        <Card elevation={2} sx={{ mb: 3, borderRadius: 3 }}>
          <CardHeader 
            title="Strengths & Improvement Areas" 
            avatar={<CheckCircleIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle1" gutterBottom color="success.main" fontWeight={600}>
                  <CheckCircleIcon sx={{ mr: 1, verticalAlign: 'middle' }} /> Strengths
                </Typography>
                <List dense>
                  {(resume.analysis?.strengths || []).map((strength, index) => (
                    <ListItem key={index} sx={{ 
                      backgroundColor: `${theme.palette.success.main}10`, 
                      borderRadius: 2, 
                      mb: 1,
                      px: 2
                    }}>
                      <ListItemText primary={strength} />
                    </ListItem>
                  ))}
                </List>
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle1" gutterBottom color="warning.main" fontWeight={600}>
                  <WarningIcon sx={{ mr: 1, verticalAlign: 'middle' }} /> Improvement Areas
                </Typography>
                <List dense>
                  {(resume.analysis?.weaknesses || []).map((weakness, index) => (
                    <ListItem key={index} sx={{ 
                      backgroundColor: `${theme.palette.warning.main}10`, 
                      borderRadius: 2, 
                      mb: 1,
                      px: 2 
                    }}>
                      <ListItemText primary={weakness} />
                    </ListItem>
                  ))}
                </List>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        
        {/* Keywords */}
        <Card elevation={2} sx={{ borderRadius: 3 }}>
          <CardHeader 
            title="Keyword Recommendations" 
            avatar={<LightbulbIcon color="primary" />}
            sx={{ '& .MuiCardHeader-title': { fontWeight: 600 } }}
          />
          <CardContent>                    
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {(resume.analysis?.keywordsSuggestions || []).map((keyword, index) => (
                <Chip 
                  key={index} 
                  label={keyword} 
                  sx={{ 
                    bgcolor: COLORS[index % COLORS.length] + '20',
                    color: COLORS[index % COLORS.length],
                    fontWeight: 500,
                    borderRadius: 2
                  }} 
                />
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default OverviewTab;

================
File: src/components/resumes/utils/resumeHelpers.js
================
// src/components/resumes/utils/resumeHelpers.js
import React from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Avatar,
} from '@mui/material';
import { ArrowUpward as ArrowUpwardIcon } from '@mui/icons-material';

/**
 * Renders an improved snippet component showing before/after text
 * @param {object} snippet - Snippet object with original and improved text
 * @param {object} theme - MUI theme object
 * @returns {JSX.Element} Rendered snippet card
 */
export const renderImprovedSnippet = (snippet, theme) => {
  return (
    <Card variant="outlined" sx={{ mb: 2, overflow: 'visible', borderRadius: 2 }} key={snippet.original}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ position: 'relative', mb: 2 }}>
          <Box sx={{ 
            backgroundColor: 'rgba(239, 83, 80, 0.1)', 
            color: 'text.primary', 
            p: 2, 
            borderRadius: 2,
            position: 'relative',
            border: '1px solid rgba(239, 83, 80, 0.3)'
          }}>
            <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
              {snippet.original}
            </Typography>
          </Box>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'center', 
            py: 1 
          }}>
            <Avatar sx={{ bgcolor: theme.palette.primary.main }}>
              <ArrowUpwardIcon />
            </Avatar>
          </Box>
          <Box sx={{ 
            backgroundColor: 'rgba(76, 175, 80, 0.1)', 
            color: 'text.primary', 
            p: 2, 
            borderRadius: 2,
            border: '1px solid rgba(76, 175, 80, 0.3)'
          }}>
            <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
              {snippet.improved}
            </Typography>
          </Box>
        </Box>
      </CardContent>
    </Card>
  );
};

/**
 * Gets color based on score value
 * @param {number} value - Score value (0-100)
 * @param {object} theme - MUI theme object
 * @returns {string} Color value
 */
export const getScoreColor = (value, theme) => {
  if (value >= 80) return theme.palette.success.main;
  if (value >= 60) return theme.palette.warning.main;
  return theme.palette.error.main;
};

/**
 * Formats date range for display
 * @param {string|Date} startDate - Start date
 * @param {string|Date} endDate - End date
 * @returns {string} Formatted date range
 */
export const formatDateRange = (startDate, endDate) => {
  if (startDate && endDate) {
    return `${new Date(startDate).toLocaleDateString()} - ${endDate ? new Date(endDate).toLocaleDateString() : 'Present'}`;
  } else if (startDate) {
    return `From ${new Date(startDate).toLocaleDateString()}`;
  } else if (endDate) {
    return `Until ${new Date(endDate).toLocaleDateString()}`;
  }
  return 'Date not specified';
};

================
File: src/components/search/SearchPage.js
================
// src/components/search/SearchPage.js
import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  TextField,
  InputAdornment,
  IconButton,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tabs,
  Tab,
  CircularProgress,
  Alert,
  useTheme,
  alpha,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Checkbox,
  FormControlLabel,
  Slider,
  Badge
} from '@mui/material';
import {
  Search as SearchIcon,
  Clear as ClearIcon,
  FilterList as FilterListIcon,
  Sort as SortIcon,
  Work as WorkIcon,
  Description as DescriptionIcon,
  Person as PersonIcon,
  ExpandMore as ExpandMoreIcon,
  History as HistoryIcon,
  TrendingUp as TrendingUpIcon,
  Bookmark as BookmarkIcon,
  Share as ShareIcon,
  Download as DownloadIcon
} from '@mui/icons-material';
import { useLocation, useNavigate } from 'react-router-dom';
import MainLayout from '../layout/MainLayout';
import useSearch from '../../hooks/useSearch';
import searchService from '../../utils/searchService';

const SearchPage = () => {
  const theme = useTheme();
  const location = useLocation();
  const navigate = useNavigate();
  
  // Initialize search with URL params
  const searchParams = new URLSearchParams(location.search);
  const initialQuery = searchParams.get('q') || '';
  const initialCategory = searchParams.get('category') || 'all';

  const {
    query,
    category,
    results,
    suggestions,
    isLoading,
    error,
    recentSearches,
    setQuery,
    setCategory,
    search,
    clearAll,
    getResultsForCategory,
    getTotalResults,
    hasResults,
    categories
  } = useSearch({
    initialQuery,
    initialCategory,
    autoSearch: true,
    onSearchComplete: (results, searchQuery) => {
      // Update URL with search params
      const newSearchParams = new URLSearchParams();
      newSearchParams.set('q', searchQuery);
      if (category !== 'all') {
        newSearchParams.set('category', category);
      }
      navigate(`/search?${newSearchParams}`, { replace: true });
    }
  });

  // Advanced filters state
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [filters, setFilters] = useState({
    dateRange: 'all',
    matchScore: [0, 100],
    location: '',
    company: '',
    experienceLevel: '',
    skills: [],
    sortBy: 'relevance',
    sortOrder: 'desc'
  });

  // Popular searches and categories
  const [popularSearches, setPopularSearches] = useState([]);

  useEffect(() => {
    loadPopularSearches();
  }, []);

  const loadPopularSearches = async () => {
    try {
      const popular = await searchService.getPopularSearches();
      setPopularSearches(popular.searches || []);
    } catch (error) {
      console.error('Error loading popular searches:', error);
    }
  };

  const handleSearchSubmit = (event) => {
    event.preventDefault();
    if (query.trim()) {
      search(query, category);
    }
  };

  const handleCategoryChange = (event, newCategory) => {
    setCategory(newCategory);
  };

  const handleFilterChange = (filterName, value) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value
    }));
  };

  const handleClearFilters = () => {
    setFilters({
      dateRange: 'all',
      matchScore: [0, 100],
      location: '',
      company: '',
      experienceLevel: '',
      skills: [],
      sortBy: 'relevance',
      sortOrder: 'desc'
    });
  };

  const handleResultClick = (result) => {
    navigate(result.url);
  };

  const renderSearchInput = () => (
    <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
      <Box component="form" onSubmit={handleSearchSubmit}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="Search jobs, resumes, recruiters, companies, skills..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon color="action" />
              </InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                {query && (
                  <IconButton onClick={() => setQuery('')} edge="end">
                    <ClearIcon />
                  </IconButton>
                )}
                <Button
                  type="submit"
                  variant="contained"
                  sx={{ ml: 1 }}
                  disabled={!query.trim()}
                >
                  Search
                </Button>
              </InputAdornment>
            )
          }}
          sx={{
            '& .MuiOutlinedInput-root': {
              fontSize: '1.1rem',
              '& fieldset': {
                borderColor: alpha(theme.palette.primary.main, 0.3),
              },
              '&:hover fieldset': {
                borderColor: theme.palette.primary.main,
              },
              '&.Mui-focused fieldset': {
                borderColor: theme.palette.primary.main,
              },
            }
          }}
        />
      </Box>

      {/* Recent and Popular Searches */}
      {!query && (
        <Box sx={{ mt: 2 }}>
          {recentSearches.length > 0 && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                <HistoryIcon fontSize="small" sx={{ mr: 1 }} />
                Recent Searches
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {recentSearches.slice(0, 5).map((search, index) => (
                  <Chip
                    key={index}
                    label={search.query}
                    onClick={() => setQuery(search.query)}
                    sx={{ cursor: 'pointer' }}
                  />
                ))}
              </Box>
            </Box>
          )}

          {popularSearches.length > 0 && (
            <Box>
              <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                <TrendingUpIcon fontSize="small" sx={{ mr: 1 }} />
                Popular Searches
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {popularSearches.slice(0, 8).map((search, index) => (
                  <Chip
                    key={index}
                    label={search}
                    variant="outlined"
                    onClick={() => setQuery(search)}
                    sx={{ cursor: 'pointer' }}
                  />
                ))}
              </Box>
            </Box>
          )}
        </Box>
      )}
    </Paper>
  );

  const renderFilters = () => (
    <Card sx={{ mb: 3 }}>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center' }}>
            <FilterListIcon sx={{ mr: 1 }} />
            Filters
          </Typography>
          <Box>
            <Button
              variant="outlined"
              size="small"
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              sx={{ mr: 1 }}
            >
              Advanced
            </Button>
            <Button
              variant="text"
              size="small"
              onClick={handleClearFilters}
            >
              Clear All
            </Button>
          </Box>
        </Box>

        <Grid container spacing={2}>
          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Date Range</InputLabel>
              <Select
                value={filters.dateRange}
                onChange={(e) => handleFilterChange('dateRange', e.target.value)}
                label="Date Range"
              >
                <MenuItem value="all">All Time</MenuItem>
                <MenuItem value="today">Today</MenuItem>
                <MenuItem value="week">This Week</MenuItem>
                <MenuItem value="month">This Month</MenuItem>
                <MenuItem value="quarter">This Quarter</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Sort By</InputLabel>
              <Select
                value={filters.sortBy}
                onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                label="Sort By"
              >
                <MenuItem value="relevance">Relevance</MenuItem>
                <MenuItem value="date">Date</MenuItem>
                <MenuItem value="match_score">Match Score</MenuItem>
                <MenuItem value="alphabetical">Alphabetical</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          {category === 'jobs' && (
            <>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  size="small"
                  label="Location"
                  value={filters.location}
                  onChange={(e) => handleFilterChange('location', e.target.value)}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  size="small"
                  label="Company"
                  value={filters.company}
                  onChange={(e) => handleFilterChange('company', e.target.value)}
                />
              </Grid>
            </>
          )}
        </Grid>

        {/* Advanced Filters */}
        {showAdvancedFilters && (
          <Accordion sx={{ mt: 2 }}>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Advanced Filters</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>
                    Match Score Range
                  </Typography>
                  <Slider
                    value={filters.matchScore}
                    onChange={(e, value) => handleFilterChange('matchScore', value)}
                    valueLabelDisplay="auto"
                    marks={[
                      { value: 0, label: '0%' },
                      { value: 50, label: '50%' },
                      { value: 100, label: '100%' }
                    ]}
                  />
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>
                    Experience Level
                  </Typography>
                  <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                    {['Entry Level', 'Mid Level', 'Senior Level', 'Executive'].map((level) => (
                      <FormControlLabel
                        key={level}
                        control={<Checkbox size="small" />}
                        label={level}
                      />
                    ))}
                  </Box>
                </Grid>
              </Grid>
            </AccordionDetails>
          </Accordion>
        )}
      </CardContent>
    </Card>
  );

  const renderCategoryTabs = () => (
    <Paper sx={{ mb: 3 }}>
      <Tabs
        value={category}
        onChange={handleCategoryChange}
        variant="scrollable"
        scrollButtons="auto"
        sx={{ borderBottom: 1, borderColor: 'divider' }}
      >
        {categories.map((cat) => (
          <Tab
            key={cat.value}
            value={cat.value}
            label={
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                {cat.label}
                {results && getResultsForCategory(cat.value).length > 0 && (
                  <Badge
                    badgeContent={getResultsForCategory(cat.value).length}
                    color="primary"
                    sx={{
                      '& .MuiBadge-badge': {
                        fontSize: '0.7rem',
                        height: 16,
                        minWidth: 16
                      }
                    }}
                  />
                )}
              </Box>
            }
          />
        ))}
      </Tabs>
    </Paper>
  );

  const renderResults = () => {
    if (isLoading) {
      return (
        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
          <CircularProgress />
        </Box>
      );
    }

    if (error) {
      return (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      );
    }

    if (!hasResults() && query) {
      return (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <SearchIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" gutterBottom>
            No results found for "{query}"
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            Try adjusting your search terms or filters
          </Typography>
          <Button onClick={clearAll}>Clear Search</Button>
        </Paper>
      );
    }

    if (!hasResults()) {
      return null;
    }

    const currentResults = getResultsForCategory(category);

    return (
      <Paper>
        <Box sx={{ p: 2, borderBottom: '1px solid', borderColor: 'divider' }}>
          <Typography variant="h6">
            {getTotalResults()} results found
            {query && ` for "${query}"`}
          </Typography>
        </Box>

        <List>
          {currentResults.map((result, index) => {
            const typeDisplay = searchService.getResultTypeDisplay(result.type);
            
            return (
              <React.Fragment key={`${result.type}-${result.id}`}>
                {index > 0 && <Divider />}
                <ListItem
                  button
                  onClick={() => handleResultClick(result)}
                  sx={{ py: 2 }}
                >
                  <ListItemIcon>
                    <Box
                      sx={{
                        width: 40,
                        height: 40,
                        borderRadius: 1,
                        backgroundColor: alpha(typeDisplay.color, 0.1),
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: typeDisplay.color
                      }}
                    >
                      {result.type === 'job' && <WorkIcon />}
                      {result.type === 'resume' && <DescriptionIcon />}
                      {result.type === 'recruiter' && <PersonIcon />}
                    </Box>
                  </ListItemIcon>
                  
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 500 }}>
                          {result.title}
                        </Typography>
                        <Chip
                          label={typeDisplay.label}
                          size="small"
                          sx={{ 
                            backgroundColor: alpha(typeDisplay.color, 0.1),
                            color: typeDisplay.color,
                            fontSize: '0.7rem'
                          }}
                        />
                        {result.matchScore && (
                          <Chip
                            label={`${result.matchScore}% match`}
                            size="small"
                            color={result.matchScore >= 80 ? 'success' : result.matchScore >= 60 ? 'info' : 'warning'}
                            sx={{ fontSize: '0.7rem' }}
                          />
                        )}
                      </Box>
                    }
                    secondary={
                      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          {result.subtitle}
                        </Typography>
                        {result.description && (
                          <Typography variant="caption" display="block" color="text.secondary" sx={{ mb: 0.5 }}>
                            {result.description}
                          </Typography>
                        )}
                        {result.skills && result.skills.length > 0 && (
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                            {result.skills.slice(0, 5).map((skill, skillIndex) => (
                              <Chip
                                key={skillIndex}
                                label={typeof skill === 'string' ? skill : skill.name}
                                size="small"
                                variant="outlined"
                                sx={{ height: 20, fontSize: '0.65rem' }}
                              />
                            ))}
                            {result.skills.length > 5 && (
                              <Typography variant="caption" color="text.secondary">
                                +{result.skills.length - 5} more
                              </Typography>
                            )}
                          </Box>
                        )}
                      </Box>
                    }
                  />

                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                    <IconButton size="small">
                      <BookmarkIcon fontSize="small" />
                    </IconButton>
                    <IconButton size="small">
                      <ShareIcon fontSize="small" />
                    </IconButton>
                  </Box>
                </ListItem>
              </React.Fragment>
            );
          })}
        </List>
      </Paper>
    );
  };

  return (
    <MainLayout>
      <Container maxWidth="xl">
        <Box sx={{ py: 3 }}>
          <Typography variant="h4" gutterBottom>
            Search
          </Typography>
          
          {renderSearchInput()}
          
          {query && (
            <>
              {renderFilters()}
              {renderCategoryTabs()}
            </>
          )}
          
          {renderResults()}
        </Box>
      </Container>
    </MainLayout>
  );
};

export default SearchPage;

================
File: src/components/SettingsPage.js
================
// src/components/SettingsPage.js
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Divider,
  Alert,
  Avatar,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  LinearProgress,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction
} from '@mui/material';
import {
  Person as PersonIcon,
  Security as SecurityIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Lock as LockIcon,
  Delete as DeleteIcon,
  Verified as VerifiedIcon,
  Warning as WarningIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { useAuth } from '../context/AuthContext';
import MainLayout from './layout/MainLayout';
import settingsService from '../utils/settingsService';

console.log('🔧 SettingsPage component is being loaded...');

const SettingsPage = () => {
  console.log('🔧 SettingsPage component is rendering...');
  const theme = useTheme();
  const { currentUser, refreshUser } = useAuth();
  
  // Form state
  const [profileData, setProfileData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: ''
  });
  
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  
  // UI state
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });
  
  // Loading and error states
  const [loading, setLoading] = useState({
    profile: false,
    password: false,
    delete: false
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Initialize form data when user data loads
  useEffect(() => {
    if (currentUser) {
      setProfileData({
        firstName: currentUser.firstName || '',
        lastName: currentUser.lastName || '',
        email: currentUser.email || '',
        phoneNumber: currentUser.phoneNumber || ''
      });
    }
  }, [currentUser]);

  // Clear messages after 5 seconds
  useEffect(() => {
    if (error || success) {
      const timer = setTimeout(() => {
        setError('');
        setSuccess('');
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, success]);

  const handleProfileSave = async () => {
    try {
      setLoading(prev => ({ ...prev, profile: true }));
      setError('');
      
      // Validate form data
      const validation = settingsService.validateProfileData(profileData);
      if (!validation.isValid) {
        setError(validation.errors.join(', '));
        return;
      }
      
      // Call API to update profile
      const response = await settingsService.updateProfile(profileData);
      
      setSuccess(response.message || 'Profile updated successfully!');
      setIsEditingProfile(false);
      
      // Refresh user data
      if (refreshUser) {
        await refreshUser();
      }
      
    } catch (error) {
      console.error('Profile update failed:', error);
      setError(settingsService.getErrorMessage(error));
    } finally {
      setLoading(prev => ({ ...prev, profile: false }));
    }
  };

  const handlePasswordChange = async () => {
    try {
      setLoading(prev => ({ ...prev, password: true }));
      setError('');
      
      // Validate form data
      const validation = settingsService.validatePasswordData(passwordData);
      if (!validation.isValid) {
        setError(validation.errors.join(', '));
        return;
      }
      
      // Call API to change password
      const response = await settingsService.changePassword(passwordData);
      
      setSuccess(response.message || 'Password changed successfully!');
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
      setIsChangingPassword(false);
      
    } catch (error) {
      console.error('Password change failed:', error);
      setError(settingsService.getErrorMessage(error));
    } finally {
      setLoading(prev => ({ ...prev, password: false }));
    }
  };

  const handleDeleteAccount = async () => {
    try {
      setLoading(prev => ({ ...prev, delete: true }));
      setError('');
      
      // Call API to delete account
      const response = await settingsService.deleteAccount({ confirmationText: 'DELETE' });
      
      setSuccess(response.message || 'Account deletion initiated. You will be logged out shortly.');
      
      // Logout user after a delay
      setTimeout(() => {
        window.location.href = '/login';
      }, 3000);
      
    } catch (error) {
      console.error('Account deletion failed:', error);
      setError(settingsService.getErrorMessage(error));
    } finally {
      setLoading(prev => ({ ...prev, delete: false }));
      setShowDeleteDialog(false);
    }
  };

  const handleCancelEdit = () => {
    // Reset form data to original values
    setProfileData({
      firstName: currentUser?.firstName || '',
      lastName: currentUser?.lastName || '',
      email: currentUser?.email || '',
      phoneNumber: currentUser?.phoneNumber || ''
    });
    setIsEditingProfile(false);
  };

  const togglePasswordVisibility = (field) => {
    setShowPasswords(prev => ({
      ...prev,
      [field]: !prev[field]
    }));
  };

  const getPasswordStrength = (password) => {
    return settingsService.calculatePasswordStrength(password);
  };

  const passwordStrength = getPasswordStrength(passwordData.newPassword);

  return (
    <MainLayout>
      <Box sx={{ p: 3 }}>
        {/* Page Header - following ResumesPage pattern */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" component="h1" fontWeight={500}>
            Settings
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Manage your account preferences and security settings
          </Typography>
        </Box>

      {/* Status Messages */}
      {error && (
        <Alert 
          severity="error" 
          sx={{ mb: 3, borderRadius: 2 }}
          onClose={() => setError('')}
        >
          {error}
        </Alert>
      )}
      
      {success && (
        <Alert 
          severity="success" 
          sx={{ mb: 3, borderRadius: 2 }}
          onClose={() => setSuccess('')}
        >
          {success}
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* User Profile Settings */}
        <Grid item xs={12} lg={8}>
          <Card sx={{ borderRadius: 3, mb: 3 }}>
            <CardContent sx={{ p: 4 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <Avatar
                  sx={{
                    width: 64,
                    height: 64,
                    bgcolor: theme.palette.primary.main,
                    fontSize: '1.5rem',
                    fontWeight: 600,
                    mr: 3
                  }}
                >
                  {profileData.firstName?.[0]}{profileData.lastName?.[0]}
                </Avatar>
                <Box sx={{ flex: 1 }}>
                  <Typography variant="h5" sx={{ fontWeight: 600, color: theme.palette.primary.main, mb: 1 }}>
                    <PersonIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Profile Information
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Update your personal information and contact details
                  </Typography>
                </Box>
                {!isEditingProfile && (
                  <Button
                    variant="outlined"
                    startIcon={<EditIcon />}
                    onClick={() => setIsEditingProfile(true)}
                    sx={{ borderRadius: 2 }}
                  >
                    Edit Profile
                  </Button>
                )}
              </Box>

              <Grid container spacing={3}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="First Name"
                    value={profileData.firstName}
                    onChange={(e) => setProfileData(prev => ({ ...prev, firstName: e.target.value }))}
                    disabled={!isEditingProfile}
                    variant="outlined"
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2
                      }
                    }}
                  />
                </Grid>

                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Last Name"
                    value={profileData.lastName}
                    onChange={(e) => setProfileData(prev => ({ ...prev, lastName: e.target.value }))}
                    disabled={!isEditingProfile}
                    variant="outlined"
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2
                      }
                    }}
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Email Address"
                    type="email"
                    value={profileData.email}
                    onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                    disabled={!isEditingProfile}
                    variant="outlined"
                    InputProps={{
                      startAdornment: <EmailIcon sx={{ mr: 1, color: theme.palette.primary.main }} />,
                      endAdornment: currentUser?.isEmailVerified ? (
                        <Chip
                          label="Verified"
                          size="small"
                          icon={<VerifiedIcon />}
                          color="success"
                          variant="outlined"
                          sx={{ borderRadius: 1 }}
                        />
                      ) : (
                        <Chip
                          label="Unverified"
                          size="small"
                          icon={<WarningIcon />}
                          color="warning"
                          variant="outlined"
                          sx={{ borderRadius: 1 }}
                        />
                      )
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2
                      }
                    }}
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Phone Number"
                    type="tel"
                    value={profileData.phoneNumber}
                    onChange={(e) => setProfileData(prev => ({ ...prev, phoneNumber: e.target.value }))}
                    disabled={!isEditingProfile}
                    variant="outlined"
                    placeholder="+1 (555) 123-4567"
                    InputProps={{
                      startAdornment: <PhoneIcon sx={{ mr: 1, color: theme.palette.secondary.main }} />
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2
                      }
                    }}
                  />
                </Grid>

                {isEditingProfile && (
                  <Grid item xs={12}>
                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                      <Button
                        variant="outlined"
                        startIcon={<CancelIcon />}
                        onClick={handleCancelEdit}
                        sx={{ borderRadius: 2 }}
                      >
                        Cancel
                      </Button>
                      <Button
                        variant="contained"
                        startIcon={loading.profile ? <LinearProgress sx={{ width: 20 }} /> : <SaveIcon />}
                        onClick={handleProfileSave}
                        disabled={loading.profile}
                        sx={{ 
                          borderRadius: 2,
                          background: `linear-gradient(45deg, ${theme.palette.success.main}, ${theme.palette.success.dark})`
                        }}
                      >
                        {loading.profile ? 'Saving...' : 'Save Changes'}
                      </Button>
                    </Box>
                  </Grid>
                )}
              </Grid>
            </CardContent>
          </Card>

          {/* Security Settings */}
          <Card sx={{ borderRadius: 3 }}>
            <CardContent sx={{ p: 4 }}>
              <Typography variant="h5" sx={{ fontWeight: 600, color: theme.palette.error.main, mb: 1 }}>
                <SecurityIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Privacy & Security
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 4 }}>
                Manage your account security and privacy preferences
              </Typography>

              {/* Change Password Section */}
              <Box sx={{ mb: 4 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600 }}>
                      Change Password
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Update your password to keep your account secure
                    </Typography>
                  </Box>
                  {!isChangingPassword && (
                    <Button
                      variant="outlined"
                      startIcon={<LockIcon />}
                      onClick={() => setIsChangingPassword(true)}
                      sx={{ borderRadius: 2 }}
                    >
                      Change Password
                    </Button>
                  )}
                </Box>

                {isChangingPassword && (
                  <Paper 
                    elevation={0} 
                    sx={{ 
                      p: 3, 
                      border: `1px solid ${theme.palette.divider}`, 
                      borderRadius: 2,
                      bgcolor: theme.palette.grey[50]
                    }}
                  >
                    <Grid container spacing={3}>
                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Current Password"
                          type={showPasswords.current ? 'text' : 'password'}
                          value={passwordData.currentPassword}
                          onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}
                          InputProps={{
                            endAdornment: (
                              <IconButton
                                onClick={() => togglePasswordVisibility('current')}
                                edge="end"
                              >
                                {showPasswords.current ? <VisibilityOffIcon /> : <VisibilityIcon />}
                              </IconButton>
                            )
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              borderRadius: 2
                            }
                          }}
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="New Password"
                          type={showPasswords.new ? 'text' : 'password'}
                          value={passwordData.newPassword}
                          onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                          InputProps={{
                            endAdornment: (
                              <IconButton
                                onClick={() => togglePasswordVisibility('new')}
                                edge="end"
                              >
                                {showPasswords.new ? <VisibilityOffIcon /> : <VisibilityIcon />}
                              </IconButton>
                            )
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              borderRadius: 2
                            }
                          }}
                        />
                        {passwordData.newPassword && (
                          <Box sx={{ mt: 1 }}>
                            <LinearProgress
                              variant="determinate"
                              value={passwordStrength.strength}
                              color={passwordStrength.color}
                              sx={{ height: 6, borderRadius: 3 }}
                            />
                            <Typography variant="caption" color={`${passwordStrength.color}.main`} sx={{ mt: 0.5, display: 'block' }}>
                              Password strength: {passwordStrength.label}
                            </Typography>
                          </Box>
                        )}
                      </Grid>

                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Confirm New Password"
                          type={showPasswords.confirm ? 'text' : 'password'}
                          value={passwordData.confirmPassword}
                          onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                          error={passwordData.confirmPassword && passwordData.newPassword !== passwordData.confirmPassword}
                          helperText={
                            passwordData.confirmPassword && passwordData.newPassword !== passwordData.confirmPassword
                              ? 'Passwords do not match'
                              : ''
                          }
                          InputProps={{
                            endAdornment: (
                              <IconButton
                                onClick={() => togglePasswordVisibility('confirm')}
                                edge="end"
                              >
                                {showPasswords.confirm ? <VisibilityOffIcon /> : <VisibilityIcon />}
                              </IconButton>
                            )
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              borderRadius: 2
                            }
                          }}
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                          <Button
                            variant="outlined"
                            onClick={() => {
                              setIsChangingPassword(false);
                              setPasswordData({
                                currentPassword: '',
                                newPassword: '',
                                confirmPassword: ''
                              });
                            }}
                            sx={{ borderRadius: 2 }}
                          >
                            Cancel
                          </Button>
                          <Button
                            variant="contained"
                            startIcon={loading.password ? <LinearProgress sx={{ width: 20 }} /> : <LockIcon />}
                            onClick={handlePasswordChange}
                            disabled={
                              loading.password ||
                              !passwordData.currentPassword ||
                              !passwordData.newPassword ||
                              passwordData.newPassword !== passwordData.confirmPassword
                            }
                            sx={{ 
                              borderRadius: 2,
                              background: `linear-gradient(45deg, ${theme.palette.warning.main}, ${theme.palette.warning.dark})`
                            }}
                          >
                            {loading.password ? 'Changing...' : 'Change Password'}
                          </Button>
                        </Box>
                      </Grid>
                    </Grid>
                  </Paper>
                )}
              </Box>

              <Divider sx={{ my: 4 }} />

              {/* Delete Account Section */}
              <Box>
                <Typography variant="h6" sx={{ fontWeight: 600, color: theme.palette.error.main, mb: 1 }}>
                  Delete Account
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                  Permanently delete your account and all associated data. This action cannot be undone.
                </Typography>
                
                <Alert severity="warning" sx={{ mb: 3, borderRadius: 2 }}>
                  <Typography variant="body2" sx={{ fontWeight: 500 }}>
                    Before deleting your account, please note:
                  </Typography>
                  <List dense sx={{ mt: 1 }}>
                    <ListItem sx={{ py: 0.5 }}>
                      <ListItemText 
                        primary="• All your resumes and job applications will be permanently deleted"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                    <ListItem sx={{ py: 0.5 }}>
                      <ListItemText 
                        primary="• Your AI search history and preferences will be lost"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                    <ListItem sx={{ py: 0.5 }}>
                      <ListItemText 
                        primary="• Any active outreach campaigns will be terminated"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                  </List>
                </Alert>

                <Button
                  variant="outlined"
                  color="error"
                  startIcon={<DeleteIcon />}
                  onClick={() => setShowDeleteDialog(true)}
                  sx={{ borderRadius: 2 }}
                >
                  Delete My Account
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Sidebar - Account Summary */}
        <Grid item xs={12} lg={4}>
          <Card sx={{ borderRadius: 3, position: 'sticky', top: 24 }}>
            <CardContent sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 3 }}>
                Account Summary
              </Typography>
              
              <List>
                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <PersonIcon color="primary" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Profile Completion"
                    secondary={`${settingsService.calculateProfileCompletion(currentUser)}% complete`}
                  />
                </ListItem>

                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <EmailIcon color={currentUser?.isEmailVerified ? 'success' : 'warning'} />
                  </ListItemIcon>
                  <ListItemText
                    primary="Email Status"
                    secondary={currentUser?.isEmailVerified ? 'Verified' : 'Pending verification'}
                  />
                  <ListItemSecondaryAction>
                    <Chip
                      label={currentUser?.isEmailVerified ? 'Verified' : 'Unverified'}
                      size="small"
                      color={currentUser?.isEmailVerified ? 'success' : 'warning'}
                      variant="outlined"
                      sx={{ borderRadius: 1 }}
                    />
                  </ListItemSecondaryAction>
                </ListItem>

                <ListItem sx={{ px: 0 }}>
                  <ListItemIcon>
                    <SecurityIcon color="info" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Account Security"
                    secondary="Password protected"
                  />
                  <ListItemSecondaryAction>
                    <Chip
                      label="Secure"
                      size="small"
                      color="success"
                      variant="outlined"
                      sx={{ borderRadius: 1 }}
                    />
                  </ListItemSecondaryAction>
                </ListItem>
              </List>

              <Divider sx={{ my: 2 }} />

              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center' }}>
                Member since {new Date(currentUser?.createdAt || Date.now()).toLocaleDateString('en-US', {
                  month: 'long',
                  year: 'numeric'
                })}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Delete Account Confirmation Dialog */}
      <Dialog
        open={showDeleteDialog}
        onClose={() => setShowDeleteDialog(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: { borderRadius: 3 }
        }}
      >
        <DialogTitle sx={{ 
          color: theme.palette.error.main,
          display: 'flex',
          alignItems: 'center',
          gap: 1
        }}>
          <DeleteIcon />
          Confirm Account Deletion
        </DialogTitle>
        <DialogContent>
          <Typography variant="body1" sx={{ mb: 2 }}>
            Are you absolutely sure you want to delete your account? This action is permanent and cannot be undone.
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Type <strong>DELETE</strong> below to confirm:
          </Typography>
          <TextField
            fullWidth
            placeholder="Type DELETE to confirm"
            value={deleteConfirmText}
            onChange={(e) => setDeleteConfirmText(e.target.value)}
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button 
            onClick={() => setShowDeleteDialog(false)}
            variant="outlined"
            sx={{ borderRadius: 2 }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleDeleteAccount}
            variant="contained"
            color="error"
            startIcon={loading.delete ? <LinearProgress sx={{ width: 20 }} /> : <DeleteIcon />}
            disabled={loading.delete || deleteConfirmText !== 'DELETE'}
            sx={{ borderRadius: 2 }}
          >
            {loading.delete ? 'Deleting...' : 'Delete Account'}
          </Button>
        </DialogActions>
      </Dialog>
      </Box>
    </MainLayout>
  );
};

export default SettingsPage;

================
File: src/context/AiAssistantContext.js
================
// src/context/AiAssistantContext.js - COMPLETE FILE WITH NEW CONVERSATION FIX
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useLocation } from 'react-router-dom';
import { useAuth } from './AuthContext';
import resumeService from '../utils/resumeService';
import jobService from '../utils/jobService';
import assistantService from '../utils/assistantService';

// Create the context
const AiAssistantContext = createContext();

// Custom hook to use the context
export const useAiAssistant = () => {
  const context = useContext(AiAssistantContext);
  if (!context) {
    throw new Error('useAiAssistant must be used within an AiAssistantProvider');
  }
  return context;
};

// Provider component
export const AiAssistantProvider = ({ children }) => {
  const location = useLocation();
  const { currentUser, isAuthenticated } = useAuth();
  
  // AI Assistant state
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  
  // Enhanced conversation state
  const [conversations, setConversations] = useState([]);
  const [currentConversationId, setCurrentConversationId] = useState(null);
  const [currentConversation, setCurrentConversation] = useState(null);
  const [conversationsLoading, setConversationsLoading] = useState(false);
  const [conversationError, setConversationError] = useState(null);
  
  // Memory state
  const [userMemories, setUserMemories] = useState([]);
  const [memoryInsights, setMemoryInsights] = useState([]);
  const [memoriesLoading, setMemoriesLoading] = useState(false);
  
  // Context awareness
  const [currentContext, setCurrentContext] = useState({
    page: 'dashboard',
    resumeCount: 0,
    jobCount: 0,
    currentResume: null,
    currentJob: null,
    userProfile: null
  });
  
  // Suggestions and analytics
  const [contextualSuggestions, setContextualSuggestions] = useState([]);
  const [suggestionsCount, setSuggestionsCount] = useState(0);
  const [analytics, setAnalytics] = useState(null);
  
  // Chat state
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Initialize on authentication
  useEffect(() => {
    if (isAuthenticated && currentUser) {
      initializeAiAssistant();
    } else {
      resetState();
    }
  }, [isAuthenticated, currentUser]);

  // Update context when location changes
  useEffect(() => {
    if (isAuthenticated && currentUser) {
      updateContextFromLocation();
    }
  }, [location.pathname, isAuthenticated, currentUser]);

  // Load conversation when current conversation changes
  useEffect(() => {
    if (currentConversationId && !currentConversationId.startsWith('new-conversation-')) {
      loadConversation(currentConversationId);
    }
  }, [currentConversationId]);

  /**
   * Initialize AI Assistant system
   */
  const initializeAiAssistant = useCallback(async () => {
    try {
      await Promise.all([
        loadConversations(),
        loadMemoryInsights(),
        updateContextFromLocation()
      ]);
    } catch (error) {
      console.error('Failed to initialize AI Assistant:', error);
      setError('Failed to initialize AI Assistant');
    }
  }, []);

  /**
   * Reset all state
   */
  const resetState = useCallback(() => {
    setConversations([]);
    setCurrentConversationId(null);
    setCurrentConversation(null);
    setUserMemories([]);
    setMemoryInsights([]);
    setMessages([]);
    setContextualSuggestions([]);
    setAnalytics(null);
    setError(null);
    setCurrentContext({
      page: 'auth',
      resumeCount: 0,
      jobCount: 0,
      currentResume: null,
      currentJob: null,
      userProfile: null
    });
  }, []);

  /**
   * Load user's conversations
   */
  const loadConversations = useCallback(async (options = {}) => {
    try {
      setConversationsLoading(true);
      setConversationError(null);

      const response = await assistantService.getConversations({
        limit: 20,
        sortBy: 'lastActiveAt',
        ...options
      });

      // Filter out placeholder conversations
      const realConversations = response.conversations?.filter(conv => !conv.isPlaceholder) || [];
      setConversations(realConversations);
      
      // Set current conversation to most recent if none selected
      if (!currentConversationId && realConversations.length > 0) {
        setCurrentConversationId(realConversations[0]._id);
      }

    } catch (error) {
      console.error('Failed to load conversations:', error);
      setConversationError('Failed to load conversations');
    } finally {
      setConversationsLoading(false);
    }
  }, [currentConversationId]);

  /**
   * Load specific conversation
   */
  const loadConversation = useCallback(async (conversationId) => {
    try {
      const conversation = await assistantService.getConversation(conversationId);
      setCurrentConversation(conversation);
      setMessages(conversation.messages || []);
    } catch (error) {
      console.error('Failed to load conversation:', error);
      setError('Failed to load conversation');
    }
  }, []);

  /**
   * Create new conversation - PROPERLY FIXED
   */
  const createNewConversation = useCallback(async (title, category = 'general') => {
    try {
      console.log('Creating new conversation...');
      
      // Create a temporary conversation placeholder
      const tempConversationId = `new-conversation-${Date.now()}`;
      const placeholderConversation = {
        _id: tempConversationId,
        title: title || 'New Conversation',
        category,
        messages: [],
        messageCount: 0,
        createdAt: new Date(),
        lastActiveAt: new Date(),
        isPlaceholder: true,
        status: 'active'
      };
      
      // Add to conversations list and set as current
      setConversations(prev => [placeholderConversation, ...prev]);
      setCurrentConversationId(tempConversationId);
      setCurrentConversation(placeholderConversation);
      setMessages([]);
      setError(null);
      
      console.log('New conversation placeholder created:', tempConversationId);
      return placeholderConversation;

    } catch (error) {
      console.error('Failed to create conversation:', error);
      setError('Failed to create new conversation');
      return null;
    }
  }, []);

  /**
   * Send message - ENHANCED to handle new conversations
   */
  const sendMessage = useCallback(async (message, options = {}) => {
  try {
    setIsLoading(true);
    setError(null);

    // Add user message immediately to UI with proper timestamp
    const userMessage = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'user',
      content: message,
      timestamp: new Date(), // FIXED: Use Date object instead of timestamp
      createdAt: new Date() // FIXED: Add createdAt for consistency
    };
    setMessages(prev => [...prev, userMessage]);

    // Check if this is a new conversation (placeholder)
    const isNewConversation = !currentConversationId || 
                             currentConversationId.startsWith('new-conversation-') ||
                             options.newConversation;

    // Prepare request data
    const requestData = {
      message,
      context: currentContext,
      conversationId: isNewConversation ? null : currentConversationId,
      newConversation: isNewConversation,
      conversationHistory: isNewConversation ? [] : messages.slice(-5)
    };

    console.log('Sending message:', { 
      isNewConversation, 
      currentConversationId, 
      messageLength: message.length 
    });

    // Send to AI
    const response = await assistantService.sendMessage(requestData);

    // Add AI response to UI with proper timestamp
    const aiMessage = {
      id: `msg_${Date.now() + 1}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'ai',
      content: response.message,
      timestamp: new Date(), // FIXED: Use Date object
      createdAt: new Date(), // FIXED: Add createdAt
      suggestions: response.suggestions || [],
      actions: response.actions || [],
      memoryInsights: response.memoryInsights || []
    };

    setMessages(prev => [...prev, aiMessage]);

    // Handle new conversation ID from backend
    if (response.conversationId) {
      // If this was a new conversation, update the ID and remove placeholder
      if (isNewConversation) {
        console.log('New conversation created with ID:', response.conversationId);
        
        // Remove the placeholder conversation
        setConversations(prev => prev.filter(conv => !conv.isPlaceholder));
        
        // Set the real conversation ID
        setCurrentConversationId(response.conversationId);
        
        // Refresh conversations to get the real conversation data
        setTimeout(() => {
          loadConversations();
        }, 500);
      }
      
      // Update conversation title if provided
      if (response.conversationTitle) {
        setCurrentConversation(prev => ({
          ...prev,
          title: response.conversationTitle
        }));
      }
    }

    // Update suggestions
    if (response.suggestions && response.suggestions.length > 0) {
      setContextualSuggestions(response.suggestions);
      setSuggestionsCount(response.suggestions.length);
    }

    return response;

  } catch (error) {
    console.error('Failed to send message:', error);
    setError('Failed to send message. Please try again.');
    
    // Add error message to UI with proper timestamp
    const errorMessage = {
      id: `msg_${Date.now() + 2}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'ai',
      content: "I'm having trouble connecting right now. Please try again in a moment.",
      timestamp: new Date(), // FIXED: Use Date object
      createdAt: new Date(), // FIXED: Add createdAt
      isError: true
    };
    setMessages(prev => [...prev, errorMessage]);

  } finally {
    setIsLoading(false);
  }
}, [currentContext, currentConversationId, messages, loadConversations]);

  /**
   * Switch to different conversation
   */
  const switchConversation = useCallback(async (conversationId) => {
    if (conversationId === currentConversationId) return;
    
    console.log('Switching to conversation:', conversationId);
    setCurrentConversationId(conversationId);
    setMessages([]);
    setError(null);
    
    // Don't load placeholder conversations
    if (!conversationId.startsWith('new-conversation-')) {
      // The useEffect will handle loading the conversation
    }
  }, [currentConversationId]);

  /**
   * Update conversation metadata
   */
  const updateConversation = useCallback(async (conversationId, updates) => {
    try {
      // Don't update placeholder conversations
      if (conversationId.startsWith('new-conversation-')) {
        return null;
      }

      const updatedConversation = await assistantService.updateConversation(conversationId, updates);
      
      // Update in conversations list
      setConversations(prev => 
        prev.map(conv => 
          conv._id === conversationId ? { ...conv, ...updatedConversation } : conv
        )
      );

      // Update current conversation if it's the one being updated
      if (conversationId === currentConversationId) {
        setCurrentConversation(prev => ({ ...prev, ...updatedConversation }));
      }

      return updatedConversation;

    } catch (error) {
      console.error('Failed to update conversation:', error);
      setError('Failed to update conversation');
      return null;
    }
  }, [currentConversationId]);

  /**
   * Delete conversation
   */
  const deleteConversation = useCallback(async (conversationId, permanent = false) => {
    try {
      // Handle placeholder conversations
      if (conversationId.startsWith('new-conversation-')) {
        setConversations(prev => prev.filter(conv => conv._id !== conversationId));
        if (conversationId === currentConversationId) {
          const remaining = conversations.filter(conv => conv._id !== conversationId);
          if (remaining.length > 0) {
            setCurrentConversationId(remaining[0]._id);
          } else {
            setCurrentConversationId(null);
            setCurrentConversation(null);
            setMessages([]);
          }
        }
        return;
      }

      await assistantService.deleteConversation(conversationId, permanent);
      
      // Remove from conversations list
      setConversations(prev => prev.filter(conv => conv._id !== conversationId));
      
      // If it was the current conversation, switch to another one
      if (conversationId === currentConversationId) {
        const remainingConversations = conversations.filter(conv => conv._id !== conversationId);
        if (remainingConversations.length > 0) {
          setCurrentConversationId(remainingConversations[0]._id);
        } else {
          setCurrentConversationId(null);
          setCurrentConversation(null);
          setMessages([]);
        }
      }

    } catch (error) {
      console.error('Failed to delete conversation:', error);
      setError('Failed to delete conversation');
    }
  }, [currentConversationId, conversations]);

  /**
   * Load memory insights
   */
  const loadMemoryInsights = useCallback(async () => {
    try {
      setMemoriesLoading(true);
      const response = await assistantService.getMemoryInsights();
      setMemoryInsights(response.insights || []);
      setUserMemories(response.analytics || {});
    } catch (error) {
      console.error('Failed to load memory insights:', error);
    } finally {
      setMemoriesLoading(false);
    }
  }, []);

  /**
   * Search across conversations and memories
   */
  const searchEverything = useCallback(async (query) => {
    try {
      const results = await assistantService.search(query);
      return results;
    } catch (error) {
      console.error('Search failed:', error);
      return { conversations: [], memories: [] };
    }
  }, []);

  /**
   * Get analytics
   */
  const loadAnalytics = useCallback(async (timeframe = '30d') => {
    try {
      const analyticsData = await assistantService.getAnalytics(timeframe);
      setAnalytics(analyticsData);
      return analyticsData;
    } catch (error) {
      console.error('Failed to load analytics:', error);
      return null;
    }
  }, []);

  /**
   * Update context from current location
   */
  const updateContextFromLocation = useCallback(async () => {
    if (!isAuthenticated || !currentUser) {
      setCurrentContext({
        page: 'auth',
        resumeCount: 0,
        jobCount: 0,
        currentResume: null,
        currentJob: null,
        userProfile: null
      });
      return;
    }

    try {
      console.log('🤖 AJ: Updating context for:', location.pathname);
      
      const pathSegments = location.pathname.split('/').filter(Boolean);
      const page = pathSegments[0] || 'dashboard';
      
      let newContext = {
        page,
        resumeCount: 0,
        jobCount: 0,
        currentResume: null,
        currentJob: null,
        userProfile: {
          name: `${currentUser.firstName} ${currentUser.lastName}`,
          email: currentUser.email
        }
      };

      // Get user's resumes and jobs count
      try {
        const [resumes, jobs] = await Promise.all([
          resumeService.getUserResumes(),
          jobService.getUserJobs()
        ]);

        newContext.resumeCount = resumes?.length || 0;
        newContext.jobCount = jobs?.length || 0;

        // Page-specific context
        switch (page) {
          case 'resumes':
            if (pathSegments[1] && resumes) {
              const currentResume = resumes.find(r => r._id === pathSegments[1]);
              if (currentResume) {
                newContext.currentResume = {
                  id: currentResume._id,
                  name: currentResume.name,
                  analysis: currentResume.analysis,
                  score: currentResume.analysis?.overallScore
                };
              }
            }
            break;

          case 'jobs':
            if (pathSegments[1] && pathSegments[1] !== 'ai-searches' && jobs) {
              const currentJob = jobs.find(j => j._id === pathSegments[1]);
              if (currentJob) {
                newContext.currentJob = {
                  id: currentJob._id,
                  title: currentJob.title,
                  company: currentJob.company,
                  matchAnalysis: currentJob.matchAnalysis
                };
              }
            }
            
            if (pathSegments[1] === 'ai-searches') {
              newContext.page = 'ai-searches';
            }
            break;

          default:
            break;
        }

      } catch (error) {
        console.warn('🤖 AJ: Error fetching user data for context:', error);
      }

      // Generate contextual suggestions
      const suggestions = generateContextualSuggestions(newContext);
      
      setCurrentContext(newContext);
      setContextualSuggestions(suggestions);
      setSuggestionsCount(suggestions.length);

      console.log('🤖 AJ: Context updated:', newContext);

    } catch (error) {
      console.error('🤖 AJ: Error updating context:', error);
    }
  }, [location.pathname, isAuthenticated, currentUser]);

  /**
   * Generate contextual suggestions
   */
  const generateContextualSuggestions = useCallback((context) => {
    const suggestions = [];

    switch (context.page) {
      case 'dashboard':
        if (context.resumeCount === 0) {
          suggestions.push('Upload your first resume');
        } else {
          suggestions.push('Which resume needs the most work?');
        }
        
        if (context.jobCount === 0) {
          suggestions.push('Find job opportunities');
        } else {
          suggestions.push('Review my job matches');
        }
        
        suggestions.push('Show my career progress');
        suggestions.push('What should I focus on today?');
        break;

      case 'resumes':
        if (context.currentResume) {
          suggestions.push('Improve this resume');
          suggestions.push('Check ATS compatibility');
          if (context.currentResume.score && context.currentResume.score < 80) {
            suggestions.push('What can I improve?');
          }
        } else {
          suggestions.push('Which resume is best?');
          suggestions.push('Compare my resumes');
        }
        suggestions.push('Create new resume');
        break;

      case 'jobs':
        if (context.currentJob) {
          suggestions.push('Match my resume to this job');
          suggestions.push('How can I improve my match?');
          suggestions.push('Write a cover letter');
        } else {
          suggestions.push('Find new job opportunities');
          suggestions.push('Review my job matches');
        }
        suggestions.push('Help with applications');
        break;

      case 'ai-searches':
        suggestions.push('Optimize search criteria');
        suggestions.push('Review found opportunities');
        suggestions.push('Adjust search parameters');
        break;

      default:
        suggestions.push('Help with resume');
        suggestions.push('Find job opportunities');
        suggestions.push('Career guidance');
        suggestions.push('Review my progress');
        break;
    }

    return suggestions.slice(0, 4);
  }, []);

  /**
   * Handle suggestion clicks
   */
  const handleSuggestionClick = useCallback((suggestion) => {
    return sendMessage(suggestion);
  }, [sendMessage]);

  /**
   * Refresh all data
   */
  const refreshContext = useCallback(async () => {
    await Promise.all([
      updateContextFromLocation(),
      loadConversations(),
      loadMemoryInsights()
    ]);
  }, [updateContextFromLocation, loadConversations, loadMemoryInsights]);

// Context value
const contextValue = {
  // State
  isOpen,
  setIsOpen,
  isMinimized,
  setIsMinimized,
  
  // Conversations
  conversations,
  currentConversationId,
  setCurrentConversationId,     // ADD THIS LINE
  currentConversation,
  setCurrentConversation,       // ADD THIS LINE
  conversationsLoading,
  conversationError,
  
  // Memory
  userMemories,
  memoryInsights,
  memoriesLoading,
  
  // Context
  currentContext,
  setCurrentContext,  // ADD THIS LINE
  contextualSuggestions,
  suggestionsCount,
  analytics,
  
  // Chat
  messages,
  isLoading,
  error,
  
  // Actions
  sendMessage,
  createNewConversation,
  switchConversation,
  updateConversation,
  deleteConversation,
  handleSuggestionClick,
  
  // Data management
  loadConversations,
  loadMemoryInsights,
  loadAnalytics,
  searchEverything,
  refreshContext,
  updateContextFromLocation,  // ADD THIS LINE TOO
  
  // Utilities
  setError,
  setMessages
};

  return (
    <AiAssistantContext.Provider value={contextValue}>
      {children}
    </AiAssistantContext.Provider>
  );
};

================
File: src/context/AuthContext.js
================
// frontend/src/context/AuthContext.js - FIXED INFINITE LOOP ISSUE
import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';
import api, { isRateLimitError, getErrorMessage } from '../utils/axios';

// Create and export the context
export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Use refs to track loading state and prevent infinite loops
  const isLoadingUser = useRef(false);
  const lastUserLoadAttempt = useRef(0);

  // Load user function - memoized properly to prevent infinite loops
  const loadUser = useCallback(async (force = false) => {
    const now = Date.now();
    const timeSinceLastAttempt = now - lastUserLoadAttempt.current;
    
    // Prevent rapid successive calls unless forced
    if (!force && (timeSinceLastAttempt < 3000 || isLoadingUser.current)) {
      console.log('🔄 Skipping user load - too recent or already loading');
      setLoading(false);
      return;
    }

    if (!token) {
      console.log('🔍 No token found, skipping user load');
      setLoading(false);
      return;
    }

    try {
      isLoadingUser.current = true;
      lastUserLoadAttempt.current = now;
      console.log('🔍 Loading user with token...');
      
      // Set the token in the Authorization header
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      const response = await api.get('/auth/me');
      console.log('✅ User loaded successfully:', response.data);
      
      if (response.data.success && response.data.data?.user) {
        setCurrentUser(response.data.data.user);
        setIsAuthenticated(true);
        setError(null);
        console.log('✅ User authenticated successfully');
      } else {
        throw new Error('Invalid response format from /auth/me');
      }
    } catch (err) {
      console.error('❌ Error loading user:', err);
      
      // Handle different error types
      if (isRateLimitError(err)) {
        console.log('⏱️ Rate limited during user load - keeping current auth state');
        setError('Too many requests. Please wait a moment.');
        // Don't clear auth state for rate limiting
      } else if (err.response?.status === 401 || err.response?.status === 403) {
        console.log('🔒 Token expired or invalid - clearing auth state');
        // Clear invalid token
        localStorage.removeItem('token');
        delete api.defaults.headers.common['Authorization'];
        setToken(null);
        setCurrentUser(null);
        setIsAuthenticated(false);
        setError(null);
      } else {
        console.log('🔥 Other error during user load');
        setError('Failed to load user session');
      }
    } finally {
      isLoadingUser.current = false;
      setLoading(false);
    }
  }, [token]); // Only depend on token

  // Load user if token exists - but only run when token actually changes
  useEffect(() => {
    const currentToken = localStorage.getItem('token');
    if (currentToken && currentToken === token) {
      loadUser(true);
    } else if (!currentToken) {
      setLoading(false);
    }
  }, [token]); // Remove loadUser from dependencies to prevent infinite loop

  // Register new user
  const register = async (userData) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('🔍 Attempting registration...');
      const response = await api.post('/auth/register', userData);
      console.log('✅ Registration response:', response.data);
      
      if (response.data.success && response.data.token) {
        const { token: newToken, data } = response.data;
        
        // Store token and set auth header
        localStorage.setItem('token', newToken);
        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
        
        setToken(newToken);
        setCurrentUser(data.user);
        setIsAuthenticated(true);
        
        console.log('✅ Registration successful');
        return { success: true, user: data.user };
      } else {
        throw new Error(response.data.error || 'Invalid registration response');
      }
    } catch (err) {
      console.error('❌ Registration error:', err);
      const errorMessage = getErrorMessage(err);
      setError(errorMessage);
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
    }
  };

  // Login user
  const login = async (email, password) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('🔍 Attempting login for:', email);
      
      const response = await api.post('/auth/login', { 
        email: email.trim(), 
        password 
      });
      
      console.log('✅ Login response:', response.data);
      
      if (response.data.success && response.data.token) {
        const { token: newToken, data } = response.data;
        
        // Store token and set auth header
        localStorage.setItem('token', newToken);
        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
        
        setToken(newToken);
        setCurrentUser(data.user);
        setIsAuthenticated(true);
        setError(null);
        
        console.log('✅ Login successful for user:', data.user.email);
        return { success: true, user: data.user };
      } else {
        throw new Error(response.data.error || 'Invalid login response');
      }
    } catch (err) {
      console.error('❌ Login error:', err);
      const errorMessage = getErrorMessage(err);
      setError(errorMessage);
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
    }
  };

  // Logout user
  const logout = async () => {
    try {
      console.log('🔍 Attempting logout...');
      
      // Try to call logout endpoint with timeout
      const logoutPromise = api.post('/auth/logout');
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Logout timeout')), 5000)
      );
      
      await Promise.race([logoutPromise, timeoutPromise]);
      console.log('✅ Logout successful');
    } catch (err) {
      console.error('❌ Logout error:', err);
      console.log('⚠️ Logout API call failed, but continuing with local cleanup');
      // Continue with local cleanup even if server request fails
    } finally {
      // Always clean up local state
      localStorage.removeItem('token');
      delete api.defaults.headers.common['Authorization'];
      setToken(null);
      setCurrentUser(null);
      setIsAuthenticated(false);
      setError(null);
      console.log('✅ Local session cleared');
    }
  };

  // Forgot password
  const forgotPassword = async (email) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('🔍 Requesting password reset for:', email);
      const response = await api.post('/auth/forgot-password', { email });
      console.log('✅ Password reset response:', response.data);
      
      return { 
        success: true, 
        message: response.data.data?.message || 'Reset email sent' 
      };
    } catch (err) {
      console.error('❌ Forgot password error:', err);
      const errorMessage = getErrorMessage(err);
      setError(errorMessage);
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
    }
  };

  // Reset password
  const resetPassword = async (resetToken, password) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('🔍 Attempting password reset...');
      const response = await api.put(`/auth/reset-password/${resetToken}`, { password });
      console.log('✅ Password reset response:', response.data);
      
      if (response.data.success && response.data.token) {
        const { token: newToken } = response.data;
        
        // Store new token
        localStorage.setItem('token', newToken);
        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
        setToken(newToken);
        
        return { success: true };
      } else {
        throw new Error(response.data.error || 'Invalid reset response');
      }
    } catch (err) {
      console.error('❌ Password reset error:', err);
      const errorMessage = getErrorMessage(err);
      setError(errorMessage);
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
    }
  };

  // Clear error
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // Force refresh user data
  const refreshUser = useCallback(() => {
    if (token) {
      return loadUser(true);
    }
  }, [token, loadUser]);

  const value = {
    currentUser,
    isAuthenticated,
    loading,
    error,
    register,
    login,
    logout,
    forgotPassword,
    resetPassword,
    clearError,
    refreshUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook for easier context usage
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Default export (some files might expect this)
export default AuthContext;

================
File: src/hooks/useSearch.js
================
// src/hooks/useSearch.js
import { useState, useEffect, useCallback, useRef } from 'react';
import searchService from '../utils/searchService';

/**
 * Custom hook for managing search functionality
 */
const useSearch = (options = {}) => {
  const {
    initialQuery = '',
    initialCategory = 'all',
    autoSearch = true,
    debounceDelay = 300,
    enableSuggestions = true,
    onSearchComplete = null,
    onError = null
  } = options;

  // State
  const [query, setQuery] = useState(initialQuery);
  const [category, setCategory] = useState(initialCategory);
  const [results, setResults] = useState(null);
  const [suggestions, setSuggestions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [recentSearches, setRecentSearches] = useState([]);

  // Refs
  const debouncedSearchRef = useRef(null);
  const abortControllerRef = useRef(null);

  // Initialize debounced search
  useEffect(() => {
    debouncedSearchRef.current = searchService.createDebouncedSearch(
      performSearch,
      debounceDelay
    );
  }, [category, debounceDelay]);

  // Load recent searches on mount
  useEffect(() => {
    const recent = searchService.getRecentSearches();
    setRecentSearches(recent);
  }, []);

  // Auto-search when query changes
  useEffect(() => {
    if (autoSearch && query.trim().length >= 2) {
      if (debouncedSearchRef.current) {
        debouncedSearchRef.current(query);
      }
    } else if (query.trim().length === 0) {
      clearResults();
    }
  }, [query, autoSearch]);

  // Load suggestions when query changes
  useEffect(() => {
    if (enableSuggestions && query.length >= 1 && query.length < 2) {
      loadSuggestions(query);
    }
  }, [query, enableSuggestions]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, []);

  const performSearch = useCallback(async (searchQuery) => {
    if (!searchQuery || searchQuery.trim().length < 2) {
      return;
    }

    try {
      // Cancel previous request
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      setIsLoading(true);
      setError(null);

      // Create new abort controller
      abortControllerRef.current = new AbortController();

      const searchResults = await searchService.globalSearch(searchQuery, {
        category,
        limit: 20
      });

      if (searchResults.success) {
        const formattedResults = searchService.formatSearchResults(searchResults.data.results);
        setResults(formattedResults);
        
        // Save to recent searches
        searchService.saveRecentSearch(searchQuery, searchResults.data.results);
        
        // Update recent searches state
        const updatedRecent = searchService.getRecentSearches();
        setRecentSearches(updatedRecent);

        // Call completion callback
        if (onSearchComplete) {
          onSearchComplete(formattedResults, searchQuery);
        }
      }
    } catch (err) {
      if (err.name !== 'AbortError') {
        const errorMessage = err.response?.data?.error || err.message || 'Search failed';
        setError(errorMessage);
        
        if (onError) {
          onError(err);
        }
      }
    } finally {
      setIsLoading(false);
    }
  }, [category, onSearchComplete, onError]);

  const loadSuggestions = useCallback(async (searchQuery) => {
    try {
      const suggestionsData = await searchService.getSuggestions(searchQuery);
      setSuggestions(suggestionsData.suggestions || []);
    } catch (err) {
      console.error('Error loading suggestions:', err);
      setSuggestions([]);
    }
  }, []);

  const clearResults = useCallback(() => {
    setResults(null);
    setSuggestions([]);
    setError(null);
  }, []);

  const clearAll = useCallback(() => {
    setQuery('');
    clearResults();
  }, [clearResults]);

  const search = useCallback((searchQuery, searchCategory = category) => {
    setQuery(searchQuery);
    setCategory(searchCategory);
    performSearch(searchQuery);
  }, [category, performSearch]);

  const searchInCategory = useCallback((searchCategory) => {
    setCategory(searchCategory);
    if (query.trim().length >= 2) {
      performSearch(query);
    }
  }, [query, performSearch]);

  const retrySearch = useCallback(() => {
    if (query.trim().length >= 2) {
      performSearch(query);
    }
  }, [query, performSearch]);

  const getResultsForCategory = useCallback((categoryName) => {
    return results?.[categoryName] || [];
  }, [results]);

  const getTotalResults = useCallback(() => {
    return results?.totalCount || 0;
  }, [results]);

  const hasResults = useCallback(() => {
    return getTotalResults() > 0;
  }, [getTotalResults]);

  const hasResultsForCategory = useCallback((categoryName) => {
    return getResultsForCategory(categoryName).length > 0;
  }, [getResultsForCategory]);

  const searchSpecificCategory = useCallback(async (searchQuery, categoryName) => {
    try {
      setIsLoading(true);
      setError(null);

      let categoryResults = [];
      
      switch (categoryName) {
        case 'jobs':
          categoryResults = await searchService.searchJobs(searchQuery);
          break;
        case 'resumes':
          categoryResults = await searchService.searchResumes(searchQuery);
          break;
        case 'recruiters':
          categoryResults = await searchService.searchRecruiters(searchQuery);
          break;
        default:
          throw new Error('Invalid category');
      }

      return categoryResults;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const validateQuery = useCallback((searchQuery) => {
    return searchService.validateSearchQuery(searchQuery);
  }, []);

  const highlightText = useCallback((text, highlightQuery = query) => {
    return searchService.highlightSearchTerms(text, highlightQuery);
  }, [query]);

  const addToRecentSearches = useCallback((searchQuery) => {
    searchService.saveRecentSearch(searchQuery, results || { totalCount: 0 });
    const updatedRecent = searchService.getRecentSearches();
    setRecentSearches(updatedRecent);
  }, [results]);

  const clearRecentSearches = useCallback(() => {
    searchService.clearRecentSearches();
    setRecentSearches([]);
  }, []);

  // Return search state and methods
  return {
    // State
    query,
    category,
    results,
    suggestions,
    isLoading,
    error,
    recentSearches,

    // Actions
    setQuery,
    setCategory,
    search,
    searchInCategory,
    searchSpecificCategory,
    clearResults,
    clearAll,
    retrySearch,
    addToRecentSearches,
    clearRecentSearches,

    // Utilities
    getResultsForCategory,
    getTotalResults,
    hasResults,
    hasResultsForCategory,
    validateQuery,
    highlightText,

    // Categories
    categories: searchService.getSearchCategories(),

    // Keyboard shortcuts
    shortcuts: searchService.getKeyboardShortcuts()
  };
};

export default useSearch;

================
File: src/index.css
================
/* src/index.css */
html {
  font-size: 90%;
  -webkit-text-size-adjust: 90%;
  -ms-text-size-adjust: 90%;
  height: 100%;
  overflow: hidden; /* Prevent body scroll */
}

body {
  margin: 0;
  padding: 0;
  font-family: 'Inter', 'Roboto', 'Segoe UI', -apple-system, BlinkMacSystemFont, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  box-sizing: border-box;
  height: 100vh;
  overflow: hidden; /* Prevent body scroll */
}

*, *:before, *:after {
  box-sizing: inherit;
}

/* Apply to the root app container for consistent scaling */
#root {
  width: 100%;
  height: 100vh;
  overflow: hidden; /* Ensure root container doesn't scroll */
}

/* Adjust any fixed pixel sizes that might need manual adjustment */
.MuiDialog-paper {
  max-width: calc(600px * 1.11) !important;
}

/* For any components with fixed dimensions that need adjustment */
.fixed-width-element {
  width: calc(300px * 1.11) !important;
}

.fixed-height-element {
  height: calc(200px * 1.11) !important;
}

/* Ensure proper scrollbar styling globally */
* {
  scrollbar-width: thin;
  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
}

*::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

*::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.04);
  border-radius: 3px;
}

*::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 3px;
}

*::-webkit-scrollbar-thumb:hover {
  background: rgba(0, 0, 0, 0.3);
}

*::-webkit-scrollbar-corner {
  background: transparent;
}

/* Ensure Material-UI components respect the layout */
.MuiAppBar-root {
  position: static !important;
}

/* Prevent any unwanted scrolling in layout components */
.layout-container {
  height: 100vh;
  overflow: hidden;
}

.content-container {
  height: 100%;
  overflow-y: auto;
}

================
File: src/index.js
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import ThemeProvider from './ThemeProvider'
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(
  <ThemeProvider>
    <App />
  </ThemeProvider>
)

================
File: src/ThemeProvider.js
================
// src/ThemeProvider.js
import { createTheme, ThemeProvider as MuiThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

// Define the auto-job.ai theme with 90% scaling
const theme = createTheme({
  palette: {
    primary: {
      main: '#1a73e8', // Deep blue
      light: '#4285f4',
      dark: '#0d47a1',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#00c4b4', // Teal accent
      light: '#33d1c1',
      dark: '#00897b',
      contrastText: '#ffffff',
    },
    success: {
      main: '#34a853',
      light: '#5cb85c',
      dark: '#2e7d32',
    },
    warning: {
      main: '#fbbc04',
      light: '#ffcd38',
      dark: '#f57c00',
    },
    error: {
      main: '#ea4335',
      light: '#ef5350',
      dark: '#c62828',
    },
    info: {
      main: '#4285f4',
      light: '#64b5f6',
      dark: '#1976d2',
    },
    background: {
      default: '#f5f7fa', // Light gray background
      paper: '#ffffff',
    },
    text: {
      primary: '#202124',
      secondary: '#5f6368',
      disabled: '#9aa0a6',
    },
    divider: 'rgba(0, 0, 0, 0.12)',
  },
  typography: {
    // Apply 90% scaling to the base font size
    fontSize: 14 * 0.9,
    fontFamily: [
      'Inter',
      'Roboto',
      '"Segoe UI"',
      '-apple-system',
      'BlinkMacSystemFont',
      'Arial',
      'sans-serif',
    ].join(','),
    h1: {
      fontSize: '2.5rem',
      fontWeight: 600,
      lineHeight: 1.2,
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 600,
      lineHeight: 1.3,
    },
    h3: {
      fontSize: '1.75rem',
      fontWeight: 600,
      lineHeight: 1.3,
    },
    h4: {
      fontSize: '1.5rem',
      fontWeight: 500,
      lineHeight: 1.4,
    },
    h5: {
      fontSize: '1.25rem',
      fontWeight: 500,
      lineHeight: 1.4,
    },
    h6: {
      fontSize: '1.125rem',
      fontWeight: 500,
      lineHeight: 1.4,
    },
    subtitle1: {
      fontSize: '1rem',
      fontWeight: 500,
      lineHeight: 1.5,
    },
    subtitle2: {
      fontSize: '0.875rem',
      fontWeight: 500,
      lineHeight: 1.5,
    },
    body1: {
      fontSize: '1rem',
      lineHeight: 1.5,
    },
    body2: {
      fontSize: '0.875rem',
      lineHeight: 1.5,
    },
    button: {
      fontSize: '0.875rem',
      fontWeight: 600,
      textTransform: 'none',
    },
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiCssBaseline: {
      styleOverrides: {
        html: {
          fontSize: '90%', // Set root font size to 90%
          WebkitTextSizeAdjust: '90%',
          MsTextSizeAdjust: '90%',
        },
        '*, *::before, *::after': {
          boxSizing: 'border-box',
        },
        body: {
          margin: 0,
          padding: 0,
          WebkitFontSmoothing: 'antialiased',
          MozOsxFontSmoothing: 'grayscale',
        },
        // Custom Scrollbar Styles - Minimal Design
        '*::-webkit-scrollbar': {
          width: '4px',
          height: '4px',
        },
        '*::-webkit-scrollbar-track': {
          backgroundColor: 'transparent',
        },
        '*::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0, 0, 0, 0.2)',
          borderRadius: '2px',
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
          },
          '&:active': {
            backgroundColor: 'rgba(0, 0, 0, 0.4)',
          },
        },
        '*::-webkit-scrollbar-corner': {
          backgroundColor: 'transparent',
        },
        // Firefox scrollbar styling
        '*': {
          scrollbarWidth: 'thin',
          scrollbarColor: 'rgba(0, 0, 0, 0.2) transparent',
        },
        // Dialog scrollbars - even thinner
        '.MuiDialog-paper::-webkit-scrollbar': {
          width: '3px',
        },
        '.MuiDialog-paper::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0, 0, 0, 0.15)',
          borderRadius: '1.5px',
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.25)',
          },
        },
        '.MuiDialog-paper::-webkit-scrollbar-track': {
          backgroundColor: 'transparent',
        },
        // Menu and dropdown scrollbars - ultra thin
        '.MuiMenu-paper::-webkit-scrollbar, .MuiSelect-paper::-webkit-scrollbar': {
          width: '2px',
        },
        '.MuiMenu-paper::-webkit-scrollbar-thumb, .MuiSelect-paper::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0, 0, 0, 0.15)',
          borderRadius: '1px',
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.25)',
          },
        },
        '.MuiMenu-paper::-webkit-scrollbar-track, .MuiSelect-paper::-webkit-scrollbar-track': {
          backgroundColor: 'transparent',
        },
        // Textarea scrollbars
        'textarea::-webkit-scrollbar': {
          width: '4px',
        },
        'textarea::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0, 0, 0, 0.2)',
          borderRadius: '2px',
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
          },
        },
        'textarea::-webkit-scrollbar-track': {
          backgroundColor: 'transparent',
        },
      },
    },
    MuiButton: {
      defaultProps: {
        disableElevation: true,
      },
      styleOverrides: {
        root: {
          padding: '8px 16px',
          borderRadius: 8,
        },
        contained: {
          boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.08), 0px 6px 10px 0px rgba(0,0,0,0.05), 0px 1px 18px 0px rgba(0,0,0,0.04)',
          '&:hover': {
            boxShadow: '0px 6px 10px -1px rgba(0,0,0,0.1), 0px 10px 14px 0px rgba(0,0,0,0.07), 0px 1px 18px 0px rgba(0,0,0,0.06)',
          },
        },
      },
    },
    MuiTextField: {
      defaultProps: {
        variant: 'outlined',
      },
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: 8,
          },
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.05)',
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        elevation1: {
          boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.05)',
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.08)',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiListItemButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          '&.Mui-selected': {
            backgroundColor: 'rgba(26, 115, 232, 0.1)',
            color: '#1a73e8',
            '&:hover': {
              backgroundColor: 'rgba(26, 115, 232, 0.15)',
            },
            '& .MuiListItemIcon-root': {
              color: '#1a73e8',
            },
          },
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          borderRight: '1px solid rgba(0, 0, 0, 0.12)',
        },
      },
    },
    MuiLinearProgress: {
      styleOverrides: {
        root: {
          borderRadius: 4,
          height: 8,
          backgroundColor: 'rgba(0, 0, 0, 0.06)',
        },
      },
    },
    MuiAvatar: {
      styleOverrides: {
        root: {
          backgroundColor: '#1a73e8',
        },
      },
    },
    // Adjust container widths to compensate for 90% scaling
    MuiContainer: {
      styleOverrides: {
        root: {
          // Counter the 90% scaling by making containers slightly larger
          '@media (min-width:600px)': {
            maxWidth: 'calc(600px * 1.11)',
          },
          '@media (min-width:900px)': {
            maxWidth: 'calc(900px * 1.11)',
          },
          '@media (min-width:1200px)': {
            maxWidth: 'calc(1200px * 1.11)',
          },
          '@media (min-width:1536px)': {
            maxWidth: 'calc(1536px * 1.11)',
          },
        },
      },
    },
  },
});

export default function ThemeProvider({ children }) {
  return (
    <MuiThemeProvider theme={theme}>
      <CssBaseline />
      {children}
    </MuiThemeProvider>
  );
}

================
File: src/utils/assistantService.js
================
// src/utils/assistantService.js - ENHANCED WITH RESUME EDITING CAPABILITIES AND TIMEOUT FIXES
import api from './axios';

const assistantService = {
  // ===================================================================
  // ENHANCED CHAT WITH CONVERSATION MANAGEMENT
  // ===================================================================

  /**
   * Send message to AI Assistant with enhanced context and conversation management
   */
  sendMessage: async (requestData) => {
    try {
      const {
        message,
        context = {},
        conversationId,
        newConversation = false,
        conversationHistory = []
      } = requestData;

      console.log('🚀 Sending message to AI:', { message: message.substring(0, 50) + '...', conversationId, newConversation });

      // 🔥 CRITICAL FIX: Detect resume editing requests and increase timeout
      const isResumeEditRequest = detectResumeEditRequest(message, context);
      const timeoutDuration = isResumeEditRequest ? 60000 : 30000; // 60s for resume edits, 30s for regular chat

      console.log(`⏱️ Using ${timeoutDuration/1000}s timeout for ${isResumeEditRequest ? 'resume editing' : 'regular chat'} request`);

      const response = await api.post('/assistant/chat', {
        message,
        context: {
          page: context.page || 'unknown',
          currentResume: context.currentResume || null,
          currentJob: context.currentJob || null,
          resumeCount: context.resumeCount || 0,
          jobCount: context.jobCount || 0,
          userProfile: context.userProfile || null
        },
        conversationId,
        newConversation,
        conversationHistory: conversationHistory.slice(-10) // Last 10 messages
      }, {
        timeout: timeoutDuration // 🔥 DYNAMIC TIMEOUT based on request type
      });

      console.log('✅ AI Response received:', response.data);

      return {
        message: response.data.message,
        suggestions: response.data.suggestions || [],
        actions: response.data.actions || [],
        confidence: response.data.confidence || 0.8,
        conversationId: response.data.conversationId,
        conversationTitle: response.data.conversationTitle,
        memoryInsights: response.data.memoryInsights || [],
        usage: response.data.usage || {},
        // 🔥 CRITICAL: Pass through resume update data
        resumeUpdated: response.data.resumeUpdated || false,
        newAnalysis: response.data.newAnalysis || null,
        resumeChanges: response.data.resumeChanges || null
      };

    } catch (error) {
      console.error('Enhanced AI Assistant Service Error:', error);
      
      // 🔥 ENHANCED: Better error handling for resume editing timeouts
      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
        const isResumeEdit = detectResumeEditRequest(requestData.message, requestData.context);
        if (isResumeEdit) {
          throw new Error('Resume update is taking longer than usual. The changes may still be processing. Please refresh the page in a moment to see the updated scores.');
        } else {
          throw new Error('Request timed out. The AI is taking longer than usual to respond. Please try again.');
        }
      } else if (error.response?.status === 503) {
        throw new Error('AI service temporarily unavailable. Please try again in a moment.');
      } else if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please wait before sending another message.');
      } else {
        // Fallback response
        const fallbackResponse = assistantService.getContextualFallback(requestData.message, requestData.context);
        throw new Error(fallbackResponse.error || 'AI service temporarily unavailable');
      }
    }
  },

  // ===================================================================
  // CONVERSATION MANAGEMENT
  // ===================================================================

  /**
   * Get user's conversations
   */
  getConversations: async (options = {}) => {
    try {
      const params = new URLSearchParams();
      
      if (options.category) params.append('category', options.category);
      if (options.tags && options.tags.length > 0) params.append('tags', options.tags.join(','));
      if (options.search) params.append('search', options.search);
      if (options.pinned !== undefined) params.append('pinned', options.pinned);
      if (options.starred !== undefined) params.append('starred', options.starred);
      if (options.limit) params.append('limit', options.limit);
      if (options.offset) params.append('offset', options.offset);
      if (options.sortBy) params.append('sortBy', options.sortBy);

      const response = await api.get(`/assistant/conversations?${params}`);
      return response.data;

    } catch (error) {
      console.error('Error fetching conversations:', error);
      throw error;
    }
  },

  /**
   * Get specific conversation
   */
  getConversation: async (conversationId) => {
    try {
      const response = await api.get(`/assistant/conversations/${conversationId}`);
      return response.data.conversation;
    } catch (error) {
      console.error('Error fetching conversation:', error);
      throw error;
    }
  },

  /**
   * Create new conversation
   */
  createConversation: async (conversationData) => {
    try {
      const response = await api.post('/assistant/conversations', conversationData);
      return response.data.conversation;
    } catch (error) {
      console.error('Error creating conversation:', error);
      throw error;
    }
  },

  /**
   * Update conversation
   */
  updateConversation: async (conversationId, updates) => {
    try {
      const response = await api.put(`/assistant/conversations/${conversationId}`, updates);
      return response.data.conversation;
    } catch (error) {
      console.error('Error updating conversation:', error);
      throw error;
    }
  },

  /**
   * Delete conversation
   */
  deleteConversation: async (conversationId, permanent = false) => {
    try {
      const params = permanent ? '?permanent=true' : '';
      const response = await api.delete(`/assistant/conversations/${conversationId}${params}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting conversation:', error);
      throw error;
    }
  },

  /**
   * Generate conversation summary
   */
  generateSummary: async (conversationId) => {
    try {
      const response = await api.post(`/assistant/conversations/${conversationId}/summary`);
      return response.data.summary;
    } catch (error) {
      console.error('Error generating summary:', error);
      throw error;
    }
  },

  /**
   * Get conversation insights
   */
  getConversationInsights: async (conversationId) => {
    try {
      const response = await api.get(`/assistant/conversations/${conversationId}/insights`);
      return response.data.insights;
    } catch (error) {
      console.error('Error getting insights:', error);
      throw error;
    }
  },

  /**
   * Export conversation
   */
  exportConversation: async (conversationId, format = 'json') => {
    try {
      const response = await api.get(`/assistant/conversations/${conversationId}/export?format=${format}`);
      return response.data.export;
    } catch (error) {
      console.error('Error exporting conversation:', error);
      throw error;
    }
  },

  /**
   * Bulk update conversations
   */
  bulkUpdateConversations: async (conversationIds, updates) => {
    try {
      const response = await api.post('/assistant/conversations/bulk-update', {
        conversationIds,
        updates
      });
      return response.data.result;
    } catch (error) {
      console.error('Error bulk updating conversations:', error);
      throw error;
    }
  },

  // ===================================================================
  // MEMORY MANAGEMENT
  // ===================================================================

  /**
   * Get user memories
   */
  getMemories: async (options = {}) => {
    try {
      const params = new URLSearchParams();
      
      if (options.type) params.append('type', options.type);
      if (options.category) params.append('category', options.category);
      if (options.search) params.append('search', options.search);
      if (options.minConfidence) params.append('minConfidence', options.minConfidence);
      if (options.limit) params.append('limit', options.limit);

      const response = await api.get(`/assistant/memories?${params}`);
      return response.data;

    } catch (error) {
      console.error('Error fetching memories:', error);
      throw error;
    }
  },

  /**
   * Add or update memory
   */
  updateMemory: async (memoryData) => {
    try {
      const response = await api.post('/assistant/memories', { memoryData });
      return response.data;
    } catch (error) {
      console.error('Error updating memory:', error);
      throw error;
    }
  },

  /**
   * Delete memory
   */
  deleteMemory: async (memoryId) => {
    try {
      const response = await api.delete(`/assistant/memories/${memoryId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting memory:', error);
      throw error;
    }
  },

  /**
   * Get memory insights
   */
  getMemoryInsights: async () => {
    try {
      const response = await api.get('/assistant/memory-insights');
      return response.data;
    } catch (error) {
      console.error('Error getting memory insights:', error);
      return {
        insights: [],
        analytics: {
          totalMemories: 0,
          averageConfidence: 0,
          memoriesByType: [],
          memoriesByCategory: []
        }
      };
    }
  },

  /**
   * Perform memory maintenance
   */
  performMemoryMaintenance: async () => {
    try {
      const response = await api.post('/assistant/memory-maintenance');
      return response.data.maintenance;
    } catch (error) {
      console.error('Error performing memory maintenance:', error);
      throw error;
    }
  },

  // ===================================================================
  // SEARCH & ANALYTICS
  // ===================================================================

  /**
   * Search across conversations and memories
   */
  search: async (query, options = {}) => {
    try {
      const params = new URLSearchParams();
      params.append('query', query);
      
      if (options.searchType) params.append('searchType', options.searchType);
      if (options.limit) params.append('limit', options.limit);

      const response = await api.get(`/assistant/search?${params}`);
      return response.data.results;

    } catch (error) {
      console.error('Error searching:', error);
      return { conversations: [], memories: [] };
    }
  },

  /**
   * Get analytics
   */
  getAnalytics: async (timeframe = '30d') => {
    try {
      const response = await api.get(`/assistant/analytics?timeframe=${timeframe}`);
      return response.data.analytics;
    } catch (error) {
      console.error('Error getting analytics:', error);
      throw error;
    }
  },

  // ===================================================================
  // ENHANCED RESUME OPERATIONS - FULL IMPLEMENTATION
  // ===================================================================

  /**
   * Analyze resume with memory context
   */
  analyzeResume: async (resumeId, analysisType = 'comprehensive') => {
    try {
      const response = await api.post('/assistant/analyze-resume', {
        resumeId,
        analysisType,
        includeImprovements: true,
        includeKeywords: true,
        useMemoryContext: true
      });

      return response.data;

    } catch (error) {
      console.error('Error analyzing resume:', error);
      throw error;
    }
  },

  /**
   * Apply resume changes suggested by AI
   */
  applyResumeChanges: async (resumeId, changes, changeType = 'ai_enhancement') => {
    try {
      const response = await api.post('/assistant/apply-resume-changes', {
        resumeId,
        changes,
        changeType
      }, {
        timeout: 60000 // Extended timeout for resume processing
      });

      return response.data;

    } catch (error) {
      console.error('Error applying resume changes:', error);
      throw error;
    }
  },

  /**
   * Optimize resume for ATS
   */
  optimizeForATS: async (resumeId, jobId = null) => {
    try {
      const response = await api.post('/assistant/optimize-ats', {
        resumeId,
        targetJobId: jobId,
        optimizationLevel: 'aggressive',
        useMemoryContext: true
      }, {
        timeout: 60000 // Extended timeout for ATS optimization
      });

      return response.data;

    } catch (error) {
      console.error('Error optimizing for ATS:', error);
      throw error;
    }
  },

  /**
   * Quick resume edit
   */
  quickEditResume: async (resumeId, editRequest) => {
    try {
      const response = await api.post('/assistant/resume/quick-edit', {
        resumeId,
        editRequest
      }, {
        timeout: 45000
      });

      return response.data;

    } catch (error) {
      console.error('Error with quick resume edit:', error);
      throw error;
    }
  },

  /**
   * Process resume update request from chat
   */
  processResumeUpdateFromChat: async (message, resumeId, conversationId) => {
    try {
      const response = await api.post('/assistant/chat', {
        message,
        context: {
          page: 'resumes',
          currentResume: { id: resumeId },
          intent: 'resume_update'
        },
        conversationId,
        resumeUpdateMode: true
      }, {
        timeout: 60000 // Extended timeout for resume updates
      });

      return response.data;

    } catch (error) {
      console.error('Error processing resume update from chat:', error);
      throw error;
    }
  },

  /**
   * Bulk update multiple resume sections
   */
  bulkUpdateResume: async (resumeId, updates) => {
    try {
      const response = await api.post('/assistant/resume/bulk-update', {
        resumeId,
        updates
      }, {
        timeout: 60000 // Extended timeout for bulk updates
      });

      return response.data;

    } catch (error) {
      console.error('Error with bulk resume update:', error);
      throw error;
    }
  },

  /**
   * Get resume improvement suggestions
   */
  getResumeImprovements: async (resumeId, focusArea = 'all') => {
    try {
      const response = await api.post('/assistant/resume/improvements', {
        resumeId,
        focusArea, // 'ats', 'content', 'keywords', 'formatting', 'all'
        useMemoryContext: true
      }, {
        timeout: 30000
      });

      return response.data;

    } catch (error) {
      console.error('Error getting resume improvements:', error);
      throw error;
    }
  },

  // ===================================================================
  // JOB MATCHING & CAREER GUIDANCE
  // ===================================================================

  /**
   * Get job matching insights with memory context
   */
  analyzeJobMatch: async (resumeId, jobId) => {
    try {
      const response = await api.post('/assistant/analyze-job-match', {
        resumeId,
        jobId,
        includeImprovements: true,
        includeTailoringAdvice: true,
        useMemoryContext: true
      });

      return response.data;

    } catch (error) {
      console.error('Error analyzing job match:', error);
      throw error;
    }
  },

  /**
   * Generate personalized cover letter
   */
  generateCoverLetter: async (resumeId, jobId, style = 'professional') => {
    try {
      const response = await api.post('/assistant/generate-cover-letter', {
        resumeId,
        jobId,
        style,
        customization: 'high',
        useMemoryContext: true
      });

      return response.data;

    } catch (error) {
      console.error('Error generating cover letter:', error);
      throw error;
    }
  },

  /**
   * Get career advice and guidance with memory context
   */
  getCareerAdvice: async (userProfile, specificQuestion = null) => {
    try {
      const response = await api.post('/assistant/career-advice', {
        userProfile,
        question: specificQuestion,
        includeJobSuggestions: true,
        includeSkillGaps: true,
        useMemoryContext: true
      });

      return response.data;

    } catch (error) {
      console.error('Error getting career advice:', error);
      throw error;
    }
  },

  /**
   * Get contextual suggestions for current page
   */
  getContextualSuggestions: async (page, contextData = {}) => {
    try {
      const response = await api.post('/assistant/contextual-suggestions', {
        page,
        contextData,
        maxSuggestions: 5,
        useMemoryContext: true
      });

      return response.data.suggestions || [];

    } catch (error) {
      console.error('Error getting contextual suggestions:', error);
      return assistantService.getFallbackSuggestions(page, contextData);
    }
  },

  /**
   * Get personalized tips based on user profile and memory
   */
  getPersonalizedTips: async (category = 'general') => {
    try {
      const response = await api.post('/assistant/personalized-tips', {
        category,
        includeActions: true,
        useMemoryContext: true
      });

      return response.data.tips || [];

    } catch (error) {
      console.error('Error getting personalized tips:', error);
      return assistantService.getFallbackTips(category);
    }
  },

  // ===================================================================
  // SYSTEM & HEALTH
  // ===================================================================

  /**
   * Get AI Assistant capabilities and status
   */
  getCapabilities: async () => {
    try {
      const response = await api.get('/assistant/capabilities');
      return response.data;
    } catch (error) {
      console.error('Error getting AI capabilities:', error);
      return {
        available: false,
        features: ['basic_chat', 'contextual_suggestions'],
        limitations: ['Full AI features unavailable in test mode'],
        memory_features: {
          available: false
        },
        resume_features: {
          available: false
        }
      };
    }
  },

  /**
   * Check AI Assistant health
   */
  checkHealth: async () => {
    try {
      const response = await api.get('/assistant/health');
      return response.data;
    } catch (error) {
      console.error('Health check failed:', error);
      return {
        status: 'unhealthy',
        error: error.message
      };
    }
  },

  /**
   * Get user's AI usage statistics
   */
  getUsageStats: async () => {
    try {
      const response = await api.get('/assistant/usage-stats');
      return response.data;
    } catch (error) {
      console.error('Error getting usage stats:', error);
      return {
        messagesThisMonth: 0,
        resumeAnalyses: 0,
        jobMatches: 0,
        careerAdviceRequests: 0,
        conversationsCreated: 0,
        memoriesStored: 0,
        resumeEdits: 0,
        atsOptimizations: 0
      };
    }
  },

  /**
   * Track user interaction
   */
  trackInteraction: async (interactionType, data) => {
    try {
      await api.post('/assistant/track-interaction', {
        type: interactionType,
        data,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      // Non-critical, just log
      console.warn('Failed to track interaction:', error);
    }
  },

  /**
   * Reset AI conversation context
   */
  resetContext: async () => {
    try {
      await api.post('/assistant/reset-context');
      return { success: true };
    } catch (error) {
      console.error('Error resetting context:', error);
      return { success: false };
    }
  },

  // ===================================================================
  // CONVERSATION UTILITIES
  // ===================================================================

  /**
   * Auto-generate conversation title based on content
   */
  generateConversationTitle: async (messages, context = {}) => {
    try {
      if (!messages || messages.length === 0) return 'New Conversation';

      // Use the first user message to generate title
      const firstUserMessage = messages.find(m => m.type === 'user');
      if (!firstUserMessage) return 'New Conversation';

      // Simple client-side title generation for immediate feedback
      const content = firstUserMessage.content.toLowerCase();
      
      if (content.includes('resume')) return 'Resume Assistance';
      if (content.includes('job') || content.includes('application')) return 'Job Search Help';
      if (content.includes('interview')) return 'Interview Preparation';
      if (content.includes('career')) return 'Career Guidance';
      if (content.includes('skill')) return 'Skill Development';
      
      // Fallback based on context
      const contextTitles = {
        'resumes': 'Resume Help',
        'jobs': 'Job Search',
        'dashboard': 'Career Planning'
      };
      
      return contextTitles[context.page] || 'Career Assistance';

    } catch (error) {
      console.error('Error generating conversation title:', error);
      return 'New Conversation';
    }
  },

  /**
   * Format conversation for display
   */
  formatConversation: (conversation) => {
    if (!conversation) return null;

    return {
      ...conversation,
      formattedDate: new Date(conversation.createdAt).toLocaleDateString(),
      formattedTime: new Date(conversation.lastActiveAt).toLocaleTimeString(),
      preview: conversation.messages && conversation.messages.length > 0
        ? conversation.messages[conversation.messages.length - 1].content.substring(0, 100) + '...'
        : conversation.description || 'No messages yet',
      messageCount: conversation.messages ? conversation.messages.length : 0,
      isRecent: Date.now() - new Date(conversation.lastActiveAt).getTime() < 24 * 60 * 60 * 1000
    };
  },

  /**
   * Format memory for display
   */
  formatMemory: (memory) => {
    if (!memory) return null;

    return {
      ...memory,
      formattedDate: new Date(memory.createdAt).toLocaleDateString(),
      confidencePercentage: Math.round(memory.confidence * 100),
      isHighConfidence: memory.confidence >= 0.8,
      isRecentlyAccessed: memory.usage?.lastAccessedAt && 
        Date.now() - new Date(memory.usage.lastAccessedAt).getTime() < 7 * 24 * 60 * 60 * 1000,
      typeLabel: assistantService.getMemoryTypeLabel(memory.type),
      categoryLabel: assistantService.getCategoryLabel(memory.category)
    };
  },

  /**
   * Get human-readable memory type labels
   */
  getMemoryTypeLabel: (type) => {
    const labels = {
      'preference': 'Preference',
      'skill': 'Skill',
      'career_goal': 'Career Goal',
      'experience': 'Experience',
      'achievement': 'Achievement',
      'challenge': 'Challenge',
      'personality_trait': 'Personality',
      'communication_style': 'Communication Style',
      'work_style': 'Work Style',
      'industry_knowledge': 'Industry Knowledge',
      'tool_preference': 'Tool Preference',
      'feedback_pattern': 'Feedback Pattern'
    };
    return labels[type] || type;
  },

  /**
   * Get human-readable category labels
   */
  getCategoryLabel: (category) => {
    const labels = {
      'personal': 'Personal',
      'professional': 'Professional',
      'technical': 'Technical',
      'behavioral': 'Behavioral',
      'contextual': 'Contextual'
    };
    return labels[category] || category;
  },

  // ===================================================================
  // ENHANCED FALLBACK RESPONSES
  // ===================================================================

  /**
   * Enhanced fallback responses based on context
   */
  getContextualFallback: (message, context) => {
    const lowercaseMessage = message?.toLowerCase() || '';

    // Resume-related queries
    if (lowercaseMessage.includes('resume') || lowercaseMessage.includes('cv')) {
      if (context?.page === 'resumes' && context?.currentResume) {
        return {
          message: `I can see you're working on "${context.currentResume.name}". While I can't access my full AI capabilities right now, I can still help with resume improvements, ATS optimization, and real-time editing. What would you like me to update?`,
          suggestions: [
            'Improve work experience section',
            'Optimize for ATS',
            'Add missing skills',
            'Enhance summary section'
          ]
        };
      }
      return {
        message: "I'd love to help improve your resume! I can edit resumes in real-time, optimize for ATS systems, and provide personalized suggestions. Which resume would you like to work on?",
        suggestions: [
          'Analyze my best resume',
          'Edit resume content',
          'Optimize for ATS',
          'Add new skills'
        ]
      };
    }

    // Job-related queries
    if (lowercaseMessage.includes('job') || lowercaseMessage.includes('application') || lowercaseMessage.includes('interview')) {
      if (context?.page === 'jobs' && context?.currentJob) {
        return {
          message: `Looking at "${context.currentJob.title}" at ${context.currentJob.company}. I can help optimize your resume for this specific position and improve your match score.`,
          suggestions: [
            'Tailor resume to this job',
            'What skills am I missing?',
            'Optimize for ATS',
            'Generate cover letter'
          ]
        };
      }
      return {
        message: "I can help you with job applications, resume tailoring, and interview preparation! What specific aspect would you like assistance with?",
        suggestions: [
          'Find matching jobs',
          'Improve application materials',
          'Interview preparation',
          'Salary negotiation'
        ]
      };
    }

    // Career guidance queries
    if (lowercaseMessage.includes('career') || lowercaseMessage.includes('advice') || lowercaseMessage.includes('guidance')) {
      return {
        message: "I'm here to provide personalized career guidance! I can help with career planning, skill development, resume optimization, and strategic job search approaches. What's your biggest career challenge right now?",
        suggestions: [
          'Plan my next career move',
          'Identify skill gaps',
          'Industry insights',
          'Resume improvements'
        ]
      };
    }

    // Resume editing specific queries
    if (lowercaseMessage.includes('edit') || lowercaseMessage.includes('update') || lowercaseMessage.includes('change')) {
      return {
        message: "I can edit your resume in real-time! Just tell me what you'd like to change - whether it's updating your experience, adding new skills, or optimizing for specific jobs. I'll make the changes immediately.",
        suggestions: [
          'Update work experience',
          'Add new skills',
          'Improve summary',
          'Optimize formatting'
        ]
      };
    }

    // Default fallback
    return {
      message: "I'm here to help with your career and can edit resumes in real-time! I remember our previous conversations and can provide personalized advice. What would you like to explore?",
      suggestions: [
        'Edit my resume',
        'Career guidance',
        'Job search help',
        'Skill development'
      ],
      error: 'AI service temporarily experiencing connectivity issues'
    };
  },

  /**
   * Get fallback suggestions based on page context
   */
  getFallbackSuggestions: (page, contextData) => {
    const suggestions = {
      dashboard: [
        'Review my career progress',
        'What should I focus on today?',
        'Find new job opportunities',
        'Edit my resume'
      ],
      resumes: [
        'Edit this resume',
        'Optimize for ATS',
        'Add missing skills',
        'Improve work experience'
      ],
      jobs: [
        'Tailor resume to this job',
        'Find similar positions',
        'Improve match score',
        'Generate cover letter'
      ],
      'ai-searches': [
        'Optimize search criteria',
        'Review found opportunities',
        'Adjust parameters',
        'Set up new searches'
      ]
    };

    return suggestions[page] || [
      'Edit my resume',
      'Find job opportunities',
      'Career guidance',
      'Skill development'
    ];
  },

  /**
   * Get fallback tips based on category
   */
  getFallbackTips: (category) => {
    const fallbackTips = {
      resume: [
        'Use action verbs to start bullet points',
        'Quantify achievements with numbers',
        'Tailor keywords to job descriptions',
        'Keep formatting ATS-friendly',
        'Update regularly with new skills'
      ],
      job_search: [
        'Apply within 24-48 hours of posting',
        'Customize resume for each application',
        'Research company culture',
        'Follow up professionally',
        'Leverage your network'
      ],
      career: [
        'Set SMART career goals',
        'Build professional network',
        'Stay updated with trends',
        'Invest in skill development',
        'Seek feedback regularly'
      ],
      interview: [
        'Practice common questions',
        'Research company thoroughly',
        'Prepare STAR examples',
        'Ask thoughtful questions',
        'Send thank-you notes'
      ],
      general: [
        'Keep LinkedIn updated',
        'Track applications systematically',
        'Practice interviewing',
        'Maintain online presence',
        'Document achievements'
      ]
    };

    return fallbackTips[category] || fallbackTips.general;
  },

  // ===================================================================
  // VALIDATION & UTILITIES
  // ===================================================================

  /**
   * Validate message content before sending
   */
  validateMessage: (message) => {
    if (!message || typeof message !== 'string') {
      return { valid: false, error: 'Message must be a non-empty string' };
    }

    if (message.trim().length === 0) {
      return { valid: false, error: 'Message cannot be empty' };
    }

    if (message.length > 3000) {
      return { valid: false, error: 'Message too long (max 3000 characters)' };
    }

    // Check for potential harmful content
    const harmfulPatterns = [
      /password/i,
      /credit card/i,
      /social security/i,
      /ssn/i
    ];

    for (const pattern of harmfulPatterns) {
      if (pattern.test(message)) {
        return { 
          valid: false, 
          error: 'Please avoid sharing sensitive personal information' 
        };
        }
   }

   return { valid: true };
 },


/**
 * Format AI response for display
 */
formatResponse: (response) => {
  if (!response || typeof response !== 'string') {
    return 'I encountered an issue processing that request. Please try again.';
  }

  // Clean up common AI response artifacts and convert markdown to HTML
  let formatted = response
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Convert **text** to <strong>text</strong>
    .replace(/\*(.*?)\*/g, '<em>$1</em>')           // Convert *text* to <em>text</em>
    .replace(/\n\n+/g, '\n\n')                      // Normalize line breaks
    .trim();

  // Ensure proper sentence structure
  if (formatted && !formatted.endsWith('.') && !formatted.endsWith('!') && !formatted.endsWith('?')) {
    formatted += '.';
  }

  return formatted;
},

 /**
  * Check if AI service is available
  */
 isAvailable: async () => {
   try {
     const response = await api.get('/assistant/health');
     return response.data.status === 'healthy';
   } catch (error) {
     console.warn('AI Assistant service unavailable:', error.message);
     return false;
   }
 },

 /**
  * Get conversation statistics
  */
 getConversationStats: async () => {
   try {
     const analytics = await assistantService.getAnalytics('30d');
     return {
       totalConversations: analytics.totalConversations || 0,
       totalMessages: analytics.totalMessages || 0,
       avgEngagement: analytics.avgEngagement || 0,
       mostActiveCategory: analytics.categoryDistribution ? 
         Object.keys(analytics.categoryDistribution)[0] : 'general'
     };
   } catch (error) {
     console.error('Error getting conversation stats:', error);
     return {
       totalConversations: 0,
       totalMessages: 0,
       avgEngagement: 0,
       mostActiveCategory: 'general'
     };
   }
 },

 /**
  * Estimate tokens for message
  */
 estimateTokens: (text) => {
   // Rough estimation: ~4 characters per token
   return Math.ceil(text.length / 4);
 },

 /**
  * Calculate estimated cost
  */
 estimateCost: (tokens) => {
   // GPT-4 Turbo pricing estimate
   const inputCost = 0.01 / 1000;
   const outputCost = 0.03 / 1000;
   return ((tokens * 0.5 * inputCost) + (tokens * 0.5 * outputCost)).toFixed(4);
 },

 // ===================================================================
 // RESUME EDITING HELPER METHODS
 // ===================================================================

 /**
  * Detect if message is a resume edit request
  */
 isResumeEditRequest: (message, context) => {
   if (context?.page !== 'resumes' || !context?.currentResume) {
     return false;
   }

   const editKeywords = [
     'update', 'change', 'edit', 'modify', 'improve', 'enhance', 
     'add', 'remove', 'rewrite', 'fix', 'optimize', 'tailor'
   ];

   const messageWords = message.toLowerCase().split(' ');
   return editKeywords.some(keyword => 
     messageWords.some(word => word.includes(keyword))
   );
 },

 /**
  * Parse resume edit intent from natural language
  */
 parseResumeEditIntent: (message) => {
   const intent = {
     type: 'general',
     section: null,
     action: null,
     content: message
   };

   const messageLower = message.toLowerCase();

   // Detect section
   if (messageLower.includes('summary') || messageLower.includes('objective')) {
     intent.section = 'summary';
   } else if (messageLower.includes('experience') || messageLower.includes('work') || messageLower.includes('job')) {
     intent.section = 'experience';
   } else if (messageLower.includes('skill')) {
     intent.section = 'skills';
   } else if (messageLower.includes('education') || messageLower.includes('degree')) {
     intent.section = 'education';
   } else if (messageLower.includes('certification')) {
     intent.section = 'certifications';
   } else if (messageLower.includes('project')) {
     intent.section = 'projects';
   }

   // Detect action
   if (messageLower.includes('add') || messageLower.includes('include')) {
     intent.action = 'add';
   } else if (messageLower.includes('remove') || messageLower.includes('delete')) {
     intent.action = 'remove';
   } else if (messageLower.includes('update') || messageLower.includes('change')) {
     intent.action = 'update';
   } else if (messageLower.includes('rewrite') || messageLower.includes('improve')) {
     intent.action = 'enhance';
   } else if (messageLower.includes('optimize') || messageLower.includes('ats')) {
     intent.action = 'optimize';
     intent.type = 'ats_optimization';
   }

   return intent;
 },

 /**
  * Generate resume edit confirmation message
  */
 generateEditConfirmation: (changes, resumeName) => {
   if (!changes || changes.length === 0) {
     return `I've updated your resume "${resumeName}" as requested.`;
   }

   const changeDescriptions = changes.map(change => {
     const section = change.section || 'content';
     const action = change.action || 'updated';
     return `${action} ${section}`;
   });

   return `✅ I've successfully updated your resume "${resumeName}"! Changes made: ${changeDescriptions.join(', ')}.`;
 },

 // ===================================================================
 // RESUME REAL-TIME EDITING WORKFLOW
 // ===================================================================

 /**
  * Handle complete resume editing workflow from chat
  */
 handleResumeEditWorkflow: async (message, context, conversationId) => {
   try {
     const { currentResume } = context;
     
     if (!currentResume) {
       throw new Error('No resume context available');
     }

     console.log(`🔧 Starting resume edit workflow for: ${currentResume.name}`);

     // Step 1: Parse the edit intent
     const editIntent = assistantService.parseResumeEditIntent(message);
     
     // Step 2: Apply the changes
     const result = await assistantService.applyResumeChanges(
       currentResume.id,
       message,
       editIntent.type || 'ai_enhancement'
     );

     // Step 3: Generate confirmation
     const confirmation = assistantService.generateEditConfirmation(
       result.result?.changes,
       currentResume.name
     );

     // Step 4: Return structured response
     return {
       success: true,
       message: confirmation,
       suggestions: [
         'Make more changes',
         'Optimize for ATS',
         'View updated resume',
         'Download new version'
       ],
       resumeUpdated: true,
       updatedResume: result.result?.updatedResume,
       changes: result.result?.changes,
       newFileUrl: result.result?.newFileUrl
     };

   } catch (error) {
     console.error('Resume edit workflow error:', error);
     throw error;
   }
 },

 /**
  * Quick resume fixes with predefined templates
  */
 applyQuickResumeFix: async (resumeId, fixType) => {
   const quickFixes = {
     'action-verbs': 'Replace weak verbs with strong action verbs throughout the resume',
     'quantify': 'Add specific numbers and metrics to achievements where possible',
     'keywords': 'Add relevant industry keywords to improve ATS compatibility',
     'formatting': 'Optimize formatting for better ATS parsing and readability',
     'grammar': 'Fix any grammar, spelling, or punctuation errors',
     'consistency': 'Ensure consistent formatting, dates, and style throughout'
   };

   const instruction = quickFixes[fixType] || quickFixes['formatting'];
   
   return await assistantService.applyResumeChanges(
     resumeId,
     instruction,
     'quick_fix'
   );
 },

 // ===================================================================
 // ERROR HANDLING & RETRY LOGIC
 // ===================================================================

 /**
  * Retry failed requests with exponential backoff
  */
 retryWithBackoff: async (operation, maxRetries = 3) => {
   let lastError;
   
   for (let attempt = 1; attempt <= maxRetries; attempt++) {
     try {
       return await operation();
     } catch (error) {
       lastError = error;
       
       if (attempt === maxRetries) {
         break;
       }
       
       // Don't retry on client errors (4xx)
       if (error.response?.status >= 400 && error.response?.status < 500) {
         break;
       }
       
       // Exponential backoff: 1s, 2s, 4s
       const delay = Math.pow(2, attempt - 1) * 1000;
       console.log(`Attempt ${attempt} failed, retrying in ${delay}ms...`);
       await new Promise(resolve => setTimeout(resolve, delay));
     }
   }
   
   throw lastError;
 },

 /**
  * Handle network errors gracefully
  */
 handleNetworkError: (error, operation) => {
   if (error.code === 'ECONNABORTED') {
     return {
       success: false,
       error: 'Request timed out. Please try again.',
       canRetry: true
     };
   }
   
   if (error.code === 'ECONNREFUSED') {
     return {
       success: false,
       error: 'Unable to connect to AI service. Please check your connection.',
       canRetry: true
     };
   }
   
   if (error.response?.status === 429) {
     return {
       success: false,
       error: 'Rate limit exceeded. Please wait a moment before trying again.',
       canRetry: true,
       retryAfter: error.response.headers['retry-after'] || 60
     };
   }
   
   return {
     success: false,
     error: `Failed to ${operation}. Please try again.`,
     canRetry: false
   };
 },

 // ===================================================================
 // ADVANCED RESUME FEATURES
 // ===================================================================

 /**
  * Compare resume versions
  */
 compareResumeVersions: async (resumeId, version1, version2) => {
   try {
     const response = await api.post('/assistant/resume/compare-versions', {
       resumeId,
       version1,
       version2
     });

     return response.data;

   } catch (error) {
     console.error('Error comparing resume versions:', error);
     throw error;
   }
 },

 /**
  * Generate resume metrics and insights
  */
 getResumeMetrics: async (resumeId) => {
   try {
     const response = await api.get(`/assistant/resume/${resumeId}/metrics`);
     return response.data;

   } catch (error) {
     console.error('Error getting resume metrics:', error);
     throw error;
   }
 },

 /**
  * Export resume in different formats
  */
 exportResume: async (resumeId, format = 'pdf', options = {}) => {
   try {
     const response = await api.post(`/assistant/resume/${resumeId}/export`, {
       format,
       options
     });

     return response.data;

   } catch (error) {
     console.error('Error exporting resume:', error);
     throw error;
   }
 },

 /**
  * Schedule resume review reminders
  */
 scheduleResumeReview: async (resumeId, reminderSettings) => {
   try {
     const response = await api.post(`/assistant/resume/${resumeId}/schedule-review`, {
       reminderSettings
     });

     return response.data;

   } catch (error) {
     console.error('Error scheduling resume review:', error);
     throw error;
   }
 },

 // ===================================================================
 // CONTEXTUAL HELPERS
 // ===================================================================

 /**
  * Get page-specific AI capabilities
  */
 getPageCapabilities: (page) => {
   const capabilities = {
     dashboard: [
       'career_overview',
       'progress_tracking',
       'goal_setting',
       'quick_insights'
     ],
     resumes: [
       'real_time_editing',
       'ats_optimization',
       'content_enhancement',
       'version_management',
       'comparative_analysis'
     ],
     jobs: [
       'job_matching',
       'resume_tailoring',
       'application_optimization',
       'cover_letter_generation'
     ],
     recruiters: [
       'outreach_personalization',
       'relationship_tracking',
       'message_optimization'
     ],
     applications: [
       'status_tracking',
       'follow_up_reminders',
       'interview_preparation'
     ]
   };

   return capabilities[page] || ['basic_chat', 'contextual_suggestions'];
 },

 /**
  * Get contextual AI prompts based on current state
  */
 getContextualPrompts: (context) => {
   const prompts = [];

   if (context?.currentResume) {
     const score = context.currentResume.score || 0;
     if (score < 70) {
       prompts.push({
         type: 'improvement',
         message: 'I notice your resume score could be improved. Would you like me to help optimize it?',
         action: 'optimize_resume'
       });
     }

     if (score >= 80) {
       prompts.push({
         type: 'congratulations',
         message: 'Great resume score! Want me to help you find jobs that match your profile?',
         action: 'find_jobs'
       });
     }
   }

   if (context?.page === 'jobs' && context?.currentJob) {
     prompts.push({
       type: 'matching',
       message: `Want me to check how well your resume matches "${context.currentJob.title}"?`,
       action: 'analyze_match'
     });
   }

   return prompts;
 },

 /**
  * Handle contextual AI suggestions
  */
 processContextualAction: async (action, context) => {
   try {
     switch (action) {
       case 'optimize_resume':
         if (context?.currentResume?.id) {
           return await assistantService.optimizeForATS(context.currentResume.id);
         }
         break;

       case 'find_jobs':
         return await assistantService.getContextualSuggestions('jobs', context);

       case 'analyze_match':
         if (context?.currentResume?.id && context?.currentJob?.id) {
           return await assistantService.analyzeJobMatch(
             context.currentResume.id,
             context.currentJob.id
           );
         }
         break;

       default:
         return { success: false, error: 'Unknown action' };
     }
   } catch (error) {
     console.error('Error processing contextual action:', error);
     throw error;
   }
 }
};

// ===================================================================
// HELPER FUNCTIONS (Outside of object for proper scoping)
// ===================================================================

/**
* Detect if message is a resume edit request - FIXED FUNCTION
*/
function detectResumeEditRequest(message, context) {
 if (context?.page !== 'resumes' || !context?.currentResume?.id) {
   return false;
 }

 const messageLower = message.toLowerCase();
 const editingKeywords = [
   'update', 'change', 'edit', 'modify', 'improve', 'enhance', 
   'add', 'remove', 'rewrite', 'fix', 'optimize', 'tailor'
 ];

 const hasEditingKeyword = editingKeywords.some(keyword => messageLower.includes(keyword));
 const hasResumeReference = messageLower.includes('resume') || 
                            messageLower.includes('cv') ||
                            messageLower.includes('experience') ||
                            messageLower.includes('work');

 return hasEditingKeyword && hasResumeReference;
}

/**
* Format error messages for user display
*/
function formatErrorMessage(error, context) {
 if (error.message?.includes('timeout')) {
   if (context?.page === 'resumes') {
     return 'Resume processing is taking longer than expected. Your changes may still be applying in the background.';
   }
   return 'The request is taking longer than usual. Please try again.';
 }

 if (error.response?.status === 429) {
   return 'Too many requests. Please wait a moment before trying again.';
 }

 if (error.response?.status === 503) {
   return 'AI service is temporarily unavailable. Please try again in a few moments.';
 }

 return error.message || 'An unexpected error occurred. Please try again.';
}

/**
* Validate context data for AI requests
*/
function validateContext(context) {
 const validContext = {
   page: context?.page || 'unknown',
   currentResume: null,
   currentJob: null,
   resumeCount: 0,
   jobCount: 0,
   userProfile: null
 };

 if (context?.currentResume && context.currentResume.id) {
   validContext.currentResume = {
     id: context.currentResume.id,
     name: context.currentResume.name || 'Resume',
     score: context.currentResume.score || 0
   };
 }

 if (context?.currentJob && context.currentJob.id) {
   validContext.currentJob = {
     id: context.currentJob.id,
     title: context.currentJob.title || 'Job',
     company: context.currentJob.company || 'Company'
   };
 }

 validContext.resumeCount = Number(context?.resumeCount) || 0;
 validContext.jobCount = Number(context?.jobCount) || 0;

 if (context?.userProfile) {
   validContext.userProfile = {
     name: context.userProfile.name || 'User',
     email: context.userProfile.email || ''
   };
 }

 return validContext;
}

export default assistantService;

================
File: src/utils/axios.js
================
// frontend/src/utils/axios.js - ENHANCED WITH RATE LIMITING PROTECTION
import axios from 'axios';

// Create axios instance with base configuration
const api = axios.create({
  baseURL: 'http://localhost:5000/api',
  withCredentials: true, // Send cookies with requests
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  timeout: 60000, // 60 second timeout for AI requests
});

// Rate limiting state
let isRateLimited = false;
let rateLimitTimeout = null;
let retryQueue = [];

// Helper function to handle rate limit delays
const handleRateLimit = (retryAfter = 60) => {
  console.log(`⏱️ Rate limited - waiting ${retryAfter} seconds before retrying`);
  isRateLimited = true;
  
  if (rateLimitTimeout) {
    clearTimeout(rateLimitTimeout);
  }
  
  rateLimitTimeout = setTimeout(() => {
    console.log('✅ Rate limit window expired, resuming requests');
    isRateLimited = false;
    
    // Process any queued requests
    const queue = [...retryQueue];
    retryQueue = [];
    queue.forEach(({ resolve, config }) => {
      api.request(config).then(resolve).catch(err => {
        // If still rate limited, re-queue
        if (err.response?.status === 429) {
          retryQueue.push({ resolve, config });
        } else {
          resolve(Promise.reject(err));
        }
      });
    });
  }, retryAfter * 1000);
};

// Request interceptor to add auth token and handle requests
api.interceptors.request.use(
  (config) => {
    // Add timestamp to prevent caching issues
    config.metadata = { startTime: new Date() };
    
    // Get token from localStorage
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // Log request in development
    if (process.env.NODE_ENV === 'development') {
      console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);
    }
    
    return config;
  },
  (error) => {
    console.error('❌ Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor to handle responses and errors
api.interceptors.response.use(
  (response) => {
    // Log response time in development
    if (process.env.NODE_ENV === 'development' && response.config.metadata) {
      const duration = new Date() - response.config.metadata.startTime;
      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} - ${duration}ms - Status: ${response.status}`);
    }
    
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // Log error details
    console.error('❌ API Error Details:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      url: error.config?.url,
      method: error.config?.method?.toUpperCase(),
      responseData: error.response?.data,
      timeout: error.config?.timeout
    });
    
    // Handle rate limiting (429) - NEW FEATURE
    if (error.response?.status === 429) {
      const retryAfter = parseInt(error.response.headers['retry-after']) || 60;
      
      console.warn(`⏱️ Rate limited - too many requests. Waiting ${retryAfter} seconds.`);
      
      // If not already handling rate limit, start the delay
      if (!isRateLimited) {
        handleRateLimit(retryAfter);
      }
      
      // Queue the request for retry
      return new Promise((resolve) => {
        retryQueue.push({ resolve, config: originalRequest });
      });
    }
    
    // Handle different types of errors
    if (error.response) {
      // Server responded with error status
      const { status, data } = error.response;
      
      switch (status) {
        case 401:
          // Unauthorized - token expired or invalid
          console.warn('🔒 Authentication error - clearing token and redirecting');
          localStorage.removeItem('token');
          delete api.defaults.headers.common['Authorization'];
          
          // Only redirect if not already on auth pages
          const currentPath = window.location.pathname;
          if (!currentPath.includes('/login') && 
              !currentPath.includes('/register') && 
              !currentPath.includes('/forgot-password') &&
              !currentPath.includes('/reset-password')) {
            
            // Use a small delay to prevent multiple redirects
            setTimeout(() => {
              window.location.href = '/login?expired=true';
            }, 100);
          }
          break;
          
        case 403:
          // Forbidden - user doesn't have permission
          console.warn('🚫 Access forbidden:', data?.error || 'Permission denied');
          break;
          
        case 404:
          // Not found - API endpoint doesn't exist
          console.warn('🔍 API endpoint not found:', error.config?.url);
          console.warn('💡 Check if the backend server is running and routes are properly configured');
          break;
          
        case 429:
          // Rate limited - already handled above
          console.warn('⏱️ Rate limited - request queued for retry');
          break;
          
        case 500:
          // Server error
          console.error('🔥 Server error occurred');
          break;
          
        default:
          console.error(`❌ HTTP ${status}:`, data?.error || error.message);
      }
      
      // Enhance error object with additional info
      error.isApiError = true;
      error.apiStatus = status;
      error.apiMessage = data?.error || data?.message || 'An error occurred';
      
    } else if (error.request) {
      // Network error - no response received
      if (error.code === 'ECONNABORTED' && error.message.includes('timeout')) {
        console.error('⏱️ Request timed out after', error.config?.timeout, 'ms');
        error.isTimeoutError = true;
        error.apiMessage = 'The request is taking longer than expected. AI processing can take up to 60 seconds for complex requests. Please try again.';
      } else {
        console.error('🌐 Network error - server may be down:', error.message);
        error.isNetworkError = true;
        error.apiMessage = 'Network error - please check your connection and try again';
        
        // Check if backend server is running
        if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {
          error.apiMessage = 'Cannot connect to server. Please ensure the backend is running on http://localhost:5000';
          console.error('💡 Backend server might not be running. Check: npm start in backend directory');
        }
      }
      
    } else {
      // Request setup error
      console.error('⚙️ Request setup error:', error.message);
      error.apiMessage = 'Request configuration error';
    }
    
    return Promise.reject(error);
  }
);

// Helper function to check if error is authentication related
export const isAuthError = (error) => {
  return error?.response?.status === 401 || 
         error?.apiStatus === 401 ||
         error?.message?.includes('token');
};

// Helper function to check if error is network related
export const isNetworkError = (error) => {
  return error?.isNetworkError || 
         error?.code === 'ECONNREFUSED' ||
         error?.message === 'Network Error';
};

// Helper function to check if error is timeout related
export const isTimeoutError = (error) => {
  return error?.isTimeoutError ||
         error?.code === 'ECONNABORTED' ||
         error?.message?.includes('timeout');
};

// Helper function to check if error is rate limit related - NEW
export const isRateLimitError = (error) => {
  return error?.response?.status === 429 ||
         error?.apiStatus === 429 ||
         error?.message?.includes('rate limit');
};

// Helper function to get user-friendly error message
export const getErrorMessage = (error) => {
  // Handle rate limiting with specific message
  if (isRateLimitError(error)) {
    return 'Too many requests. Please wait a moment before trying again.';
  }
  
  if (error?.apiMessage) {
    return error.apiMessage;
  }
  
  if (error?.response?.data?.error) {
    return error.response.data.error;
  }
  
  if (error?.response?.data?.message) {
    return error.response.data.message;
  }
  
  if (error?.message) {
    return error.message;
  }
  
  return 'An unexpected error occurred. Please try again.';
};

// Helper function to handle API responses consistently
export const handleApiResponse = (response) => {
  if (response?.data?.success === false) {
    throw new Error(response.data.error || 'API returned unsuccessful response');
  }
  return response.data;
};

// Helper function to check if we're currently rate limited - NEW
export const isCurrentlyRateLimited = () => isRateLimited;

// Helper function to clear rate limit state (for testing) - NEW
export const clearRateLimit = () => {
  isRateLimited = false;
  if (rateLimitTimeout) {
    clearTimeout(rateLimitTimeout);
    rateLimitTimeout = null;
  }
  retryQueue = [];
};

export default api;

================
File: src/utils/jobService.js
================
// src/utils/jobService.js - Updated with Analysis Status Polling
import api from './axios';

const jobService = {
  // Create a new job
  createJob: async (jobData) => {
    try {
      const response = await api.post('/jobs', jobData);
      return response.data;
    } catch (error) {
      console.error('Error creating job:', error);
      throw error;
    }
  },

  // Get all user jobs
  getUserJobs: async () => {
    try {
      const response = await api.get('/jobs');
      return response.data.jobs;
    } catch (error) {
      console.error('Error fetching user jobs:', error);
      throw error;
    }
  },

  // Alias for backward compatibility
  getAllJobs: async () => {
    try {
      const response = await api.get('/jobs');
      return response.data.jobs;
    } catch (error) {
      console.error('Error fetching user jobs:', error);
      throw error;
    }
  },

  // Get job by ID
  getJobById: async (jobId) => {
    try {
      const response = await api.get(`/jobs/${jobId}`);
      return response.data.job;
    } catch (error) {
      console.error('Error fetching job:', error);
      throw error;
    }
  },

  // Get job analysis status
  getJobAnalysisStatus: async (jobId) => {
    try {
      const response = await api.get(`/jobs/analysis-status/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching job analysis status:', error);
      throw error;
    }
  },

  pollJobAnalysisStatus: async (jobId, onProgress = null, maxAttempts = 30) => {
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      try {
        console.log(`📊 Polling attempt ${attempts + 1} for job ${jobId}`);
        
        const statusData = await jobService.getJobAnalysisStatus(jobId);
        const { analysisStatus } = statusData;
        
        console.log(`📊 Status: ${analysisStatus.status} (${analysisStatus.progress}%) - ${analysisStatus.message}`);
        
        // Call progress callback if provided
        if (onProgress) {
          onProgress(analysisStatus);
        }
        
        // Check if analysis is complete
        if (analysisStatus.status === 'completed' || analysisStatus.status === 'error') {
          console.log(`✅ Polling completed for job ${jobId}: ${analysisStatus.status}`);
          return statusData;
        }
        
        // Wait before next poll (2 seconds)
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;
        
      } catch (error) {
        console.error(`❌ Error polling job analysis status (attempt ${attempts + 1}):`, error);
        attempts++;
        
        // Wait a bit longer on error
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
    
    // Timeout reached
    console.error(`⏰ Analysis status polling timed out for job ${jobId}`);
    throw new Error('Analysis status polling timed out');
  },

  // NEW: Check if job can be viewed (analysis complete)
  canJobBeViewed: async (jobId) => {
    try {
      const statusData = await jobService.getJobAnalysisStatus(jobId);
      return statusData.analysisStatus.canViewJob;
    } catch (error) {
      console.error('Error checking if job can be viewed:', error);
      return false;
    }
  },

  // Get resume match status for a specific job
  getResumeMatchStatus: async (jobId) => {
    try {
      const response = await api.get(`/jobs/${jobId}/resume-match-status`);
      return response.data;
    } catch (error) {
      console.error('Error fetching resume match status:', error);
      throw error;
    }
  },

  // Update job
  updateJob: async (jobId, jobData) => {
    try {
      const response = await api.put(`/jobs/${jobId}`, jobData);
      return response.data;
    } catch (error) {
      console.error('Error updating job:', error);
      throw error;
    }
  },

  // Delete job
  deleteJob: async (jobId) => {
    try {
      const response = await api.delete(`/jobs/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting job:', error);
      throw error;
    }
  },

  // Enhanced match resume with job (now returns detailed analysis)
  matchResumeWithJob: async (jobId, resumeId) => {
    try {
      const response = await api.post(`/jobs/match/${jobId}/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error matching resume with job:', error);
      throw error;
    }
  },

  // Get tailoring recommendations
  getTailoringRecommendations: async (jobId, resumeId) => {
    try {
      const response = await api.post(`/jobs/tailor/${jobId}/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error getting tailoring recommendations:', error);
      throw error;
    }
  },

  // Re-analyze a job with updated AI algorithm
  reAnalyzeJob: async (jobId) => {
    try {
      const response = await api.post(`/jobs/re-analyze/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error re-analyzing job:', error);
      throw error;
    }
  },

  // Get job analysis insights and statistics
  getJobAnalysisInsights: async () => {
    try {
      const response = await api.get('/jobs/analysis-insights');
      return response.data;
    } catch (error) {
      console.error('Error fetching job analysis insights:', error);
      throw error;
    }
  },

  // Bulk match resume against multiple jobs
  bulkMatchResume: async (resumeId, jobIds) => {
    try {
      const response = await api.post(`/jobs/bulk-match/${resumeId}`, { jobIds });
      return response.data;
    } catch (error) {
      console.error('Error bulk matching resume:', error);
      throw error;
    }
  },

  // Enhanced: Find jobs with AI (now with better error handling and status)
  findJobsWithAi: async (resumeId) => {
    try {
      const response = await api.post(`/jobs/find-with-ai/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error finding jobs with AI:', error);
      throw error;
    }
  },

  // AI Job Search Management
  getAiSearches: async () => {
    try {
      const response = await api.get('/jobs/ai-searches');
      return response.data.searches;
    } catch (error) {
      console.error('Error fetching AI searches:', error);
      throw error;
    }
  },

  pauseAiSearch: async (searchId) => {
    try {
      const response = await api.post(`/jobs/ai-search/${searchId}/pause`);
      return response.data;
    } catch (error) {
      console.error('Error pausing AI search:', error);
      throw error;
    }
  },

  resumeAiSearch: async (searchId) => {
    try {
      const response = await api.post(`/jobs/ai-search/${searchId}/resume`);
      return response.data;
    } catch (error) {
      console.error('Error resuming AI search:', error);
      throw error;
    }
  },

  deleteAiSearch: async (searchId) => {
    try {
      const response = await api.delete(`/jobs/ai-search/${searchId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting AI search:', error);
      throw error;
    }
  },

  // Get detailed match history for a job
  getMatchHistory: async (jobId) => {
    try {
      const response = await api.get(`/jobs/match-history/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching match history:', error);
      throw error;
    }
  },

  // Analyze job description text (for manual job entry)
  analyzeJobDescription: async (jobId) => {
    try {
      const response = await api.post(`/jobs/analyze/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error analyzing job description:', error);
      throw error;
    }
  },

  // Get job matching trends and analytics
  getMatchingTrends: async (timeframe = '30d') => {
    try {
      const response = await api.get(`/jobs/trends?timeframe=${timeframe}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching matching trends:', error);
      throw error;
    }
  },

  // Re-match job with best available resume
  rematchJobWithBestResume: async (jobId) => {
    try {
      const response = await api.post(`/jobs/rematch-best/${jobId}`);
      return response.data;
    } catch (error) {
      console.error('Error re-matching job:', error);
      throw error;
    }
  },

  // UTILITY: Check if job analysis is complete
  isJobAnalysisComplete: (job) => {
    return job && 
           job.analysisStatus && 
           job.analysisStatus.status === 'completed' &&
           job.parsedData && 
           Object.keys(job.parsedData).length > 0 && 
           !job.parsedData.analysisError;
  },

  // UTILITY: Check if job has match analysis
  hasMatchAnalysis: (job) => {
    return job && 
           job.matchAnalysis && 
           job.matchAnalysis.overallScore !== undefined;
  },

  // UTILITY: Get match quality description
  getMatchQualityDescription: (score) => {
    if (score >= 85) return { label: 'Excellent', color: 'success' };
    if (score >= 70) return { label: 'Good', color: 'info' };
    if (score >= 55) return { label: 'Fair', color: 'warning' };
    return { label: 'Needs Work', color: 'error' };
  },

  // UTILITY: Get analysis status description
  getAnalysisStatusDescription: (status) => {
    switch (status) {
      case 'pending':
        return { label: 'Queued', color: 'info', icon: 'HourglassEmpty' };
      case 'analyzing':
        return { label: 'Analyzing', color: 'primary', icon: 'AutoAwesome' };
      case 'completed':
        return { label: 'Complete', color: 'success', icon: 'CheckCircle' };
      case 'error':
        return { label: 'Failed', color: 'error', icon: 'Error' };
      default:
        return { label: 'Unknown', color: 'default', icon: 'Help' };
    }
  },

  // UTILITY: Format skill importance level
  getSkillImportanceLabel: (importance) => {
    if (importance >= 9) return 'Critical';
    if (importance >= 7) return 'Very Important';
    if (importance >= 5) return 'Important';
    if (importance >= 3) return 'Nice to Have';
    return 'Optional';
  },

  // UTILITY: Extract skill name safely
  getSkillName: (skill) => {
    if (typeof skill === 'string') {
      return skill;
    }
    if (skill && typeof skill === 'object') {
      return skill.name || skill.skill || 'Unknown Skill';
    }
    return 'Unknown Skill';
  },

  // NEW: Create job with status tracking
  createJobWithStatusTracking: async (jobData, onProgress = null) => {
    try {
      // Create the job
      const createResponse = await jobService.createJob(jobData);
      const jobId = createResponse.job.id;
      
      // Start polling for status if callback provided
      if (onProgress) {
        setTimeout(() => {
          jobService.pollJobAnalysisStatus(jobId, onProgress).catch(error => {
            console.error('Error polling job status:', error);
            onProgress({
              status: 'error',
              message: 'Status polling failed',
              progress: 0
            });
          });
        }, 1000);
      }
      
      return createResponse;
    } catch (error) {
      console.error('Error creating job with status tracking:', error);
      throw error;
    }
  }
};

export default jobService;

================
File: src/utils/recruiterService.js
================
// frontend/src/utils/recruiterService.js - COMPLETE UPDATED VERSION
import api from './axios';

const recruiterService = {
  // ===================================================================
  // RECRUITER SEARCH & DISCOVERY
  // ===================================================================

  /**
   * Search recruiters with advanced filtering
   */
  searchRecruiters: async (filters = {}) => {
    try {
      const {
        query = '',
        company = '',
        industry = '',
        location = '',
        title = '',
        experienceMin = '',
        experienceMax = '',
        experience_min = '', // Support both formats
        experience_max = '', // Support both formats
        limit = 20,
        offset = 0,
        sortBy = 'last_active_date',
        sortOrder = 'DESC',
        sort_by = '', // Support both formats
        sort_order = '' // Support both formats
      } = filters;

      console.log('🔍 Searching recruiters with filters:', filters);

      const params = new URLSearchParams();
      if (query) params.append('query', query);
      if (company) params.append('company', company);
      if (industry) params.append('industry', industry);
      if (location) params.append('location', location);
      if (title) params.append('title', title);
      if (experienceMin || experience_min) params.append('experience_min', experienceMin || experience_min);
      if (experienceMax || experience_max) params.append('experience_max', experienceMax || experience_max);
      params.append('limit', limit);
      params.append('offset', offset);
      params.append('sort_by', sort_by || sortBy);
      params.append('sort_order', sort_order || sortOrder);

      const response = await api.get(`/recruiters/search?${params}`);
      
      console.log(`✅ Found ${response.data.recruiters.length} recruiters`);
      return response.data;

    } catch (error) {
      console.error('Search recruiters error:', error);
      throw error;
    }
  },

  /**
   * Get recruiter details by ID
   */
  getRecruiterDetails: async (recruiterId) => {
    try {
      console.log(`👤 Fetching details for recruiter ${recruiterId}`);
      const response = await api.get(`/recruiters/${recruiterId}`);
      
      console.log(`✅ Retrieved recruiter: ${response.data.recruiter.fullName}`);
      return response.data;

    } catch (error) {
      console.error('Get recruiter details error:', error);
      throw error;
    }
  },

  // Alias for compatibility with components
  getRecruiterById: async (recruiterId) => {
    return await recruiterService.getRecruiterDetails(recruiterId);
  },

  /**
   * Get filter options for search
   */
  getFilterOptions: async () => {
    try {
      console.log('📊 Fetching filter options');
      const response = await api.get('/recruiters/filters');
      
      console.log('✅ Retrieved filter options');
      return response.data;

    } catch (error) {
      console.error('Get filter options error:', error);
      throw error;
    }
  },

  // ===================================================================
  // OUTREACH MANAGEMENT
  // ===================================================================

  /**
   * Create outreach campaign
   */
  createOutreach: async (outreachData) => {
    try {
      const {
        recruiterId,
        jobId,
        messageContent,
        messageTemplate,
        sentVia = 'linkedin',
        customizations = []
      } = outreachData;

      console.log(`📧 Creating outreach for recruiter ${recruiterId}`);

      const response = await api.post('/recruiters/outreach', {
        recruiterId,
        jobId,
        messageContent,
        messageTemplate,
        sentVia,
        customizations
      });

      console.log(`✅ Created outreach campaign: ${response.data.outreach.id}`);
      return response.data;

    } catch (error) {
      console.error('Create outreach error:', error);
      throw error;
    }
  },

  /**
   * Update outreach campaign
   */
  updateOutreach: async (outreachId, updates) => {
    try {
      console.log(`📝 Updating outreach ${outreachId}`);
      const response = await api.put(`/recruiters/outreach/${outreachId}`, updates);
      
      console.log('✅ Outreach updated successfully');
      return response.data;

    } catch (error) {
      console.error('Update outreach error:', error);
      throw error;
    }
  },

  /**
   * Delete outreach campaign
   */
  deleteOutreach: async (outreachId) => {
    try {
      console.log(`🗑️ Deleting outreach ${outreachId}`);
      const response = await api.delete(`/recruiters/outreach/${outreachId}`);
      
      console.log('✅ Outreach deleted successfully');
      return response.data;

    } catch (error) {
      console.error('Delete outreach error:', error);
      throw error;
    }
  },

  /**
   * Send outreach message
   */
  sendOutreach: async (outreachId) => {
    try {
      console.log(`📤 Sending outreach ${outreachId}`);
      const response = await api.put(`/recruiters/outreach/${outreachId}/send`);
      
      console.log('✅ Outreach sent successfully');
      return response.data;

    } catch (error) {
      console.error('Send outreach error:', error);
      throw error;
    }
  },

  /**
   * Get user's outreach campaigns
   */
  getUserOutreach: async (filters = {}) => {
    try {
      const {
        status = '',
        limit = 20,
        offset = 0
      } = filters;

      console.log('📋 Fetching user outreach campaigns');

      const params = new URLSearchParams();
      if (status) params.append('status', status);
      params.append('limit', limit);
      params.append('offset', offset);

      const response = await api.get(`/recruiters/outreach?${params}`);
      
      console.log(`✅ Retrieved ${response.data.outreaches.length} outreach campaigns`);
      return response.data;

    } catch (error) {
      console.error('Get user outreach error:', error);
      throw error;
    }
  },

  // ===================================================================
  // AI-POWERED FEATURES
  // ===================================================================

  /**
   * Generate personalized message using AI
   */
  generatePersonalizedMessage: async (messageParams) => {
    try {
      const {
        recruiterId,
        resumeId,
        jobId,
        messageType = 'introduction',
        tone = 'professional',
        customRequirements = ''
      } = messageParams;

      console.log(`🤖 Generating personalized message for recruiter ${recruiterId}`);

      const response = await api.post('/recruiters/generate-message', {
        recruiterId,
        resumeId,
        jobId,
        messageType,
        tone,
        customRequirements
      });

      console.log(`✅ Generated ${response.data.message.length} character message`);
      return response.data;

    } catch (error) {
      console.error('Generate message error:', error);
      throw error;
    }
  },

  // ===================================================================
  // ANALYTICS & REPORTING
  // ===================================================================

  /**
   * Get outreach analytics
   */
  getAnalytics: async (timeframe = '30d') => {
    try {
      console.log(`📊 Fetching outreach analytics for ${timeframe}`);
      const response = await api.get(`/recruiters/analytics?timeframe=${timeframe}`);
      
      console.log('✅ Retrieved outreach analytics');
      
      // Ensure consistent response format
      if (response.data.analytics) {
        return response.data;
      } else {
        return { analytics: response.data };
      }

    } catch (error) {
      console.error('Get analytics error:', error);
      throw error;
    }
  },

  // ===================================================================
  // UTILITY FUNCTIONS
  // ===================================================================

  /**
   * Format recruiter data for display
   */
  formatRecruiterForDisplay: (recruiter) => {
    if (!recruiter) return null;

    return {
      ...recruiter,
      displayName: recruiter.fullName || `${recruiter.firstName} ${recruiter.lastName}`,
      companyDisplay: recruiter.company?.name || 'Unknown Company',
      locationDisplay: recruiter.location ? 
        `${recruiter.location.city || ''}${recruiter.location.state ? `, ${recruiter.location.state}` : ''}${recruiter.location.country ? `, ${recruiter.location.country}` : ''}`.replace(/^, /, '') :
        'Location not specified',
      experienceDisplay: recruiter.experienceYears ? 
        `${recruiter.experienceYears} year${recruiter.experienceYears !== 1 ? 's' : ''} experience` :
        'Experience not specified',
      lastActiveDisplay: recruiter.lastActiveDate ? 
        new Date(recruiter.lastActiveDate).toLocaleDateString() :
        'Last active not specified',
      hasContactInfo: !!(recruiter.email || recruiter.phone || recruiter.linkedinUrl),
      hasBeenContacted: recruiter.outreach?.hasContacted || false,
      outreachStatus: recruiter.outreach?.status || 'not_contacted'
    };
  },

  /**
   * Format outreach campaign for display
   */
  formatOutreachForDisplay: (outreach) => {
    if (!outreach) return null;

    return {
      ...outreach,
      recruiterDisplay: outreach.recruiter?.name || 'Unknown Recruiter',
      companyDisplay: outreach.recruiter?.company?.name || 'Unknown Company',
      statusDisplay: outreach.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()),
      createdDisplay: new Date(outreach.createdAt).toLocaleDateString(),
      sentDisplay: outreach.sentAt ? new Date(outreach.sentAt).toLocaleDateString() : null,
      messagePreview: outreach.messageContent.length > 100 ? 
        outreach.messageContent.substring(0, 100) + '...' :
        outreach.messageContent,
      canSend: outreach.status === 'drafted',
      canEdit: outreach.status === 'drafted',
      hasReplies: outreach.repliesCount > 0,
      hasFollowUps: outreach.followUpsCount > 0
    };
  },

  /**
   * Validate outreach data before sending
   */
  validateOutreachData: (outreachData) => {
    const errors = [];

    if (!outreachData.recruiterId) {
      errors.push('Recruiter selection is required');
    }

    if (!outreachData.messageContent || outreachData.messageContent.trim().length < 10) {
      errors.push('Message content must be at least 10 characters');
    }

    if (outreachData.messageContent && outreachData.messageContent.length > 2000) {
      errors.push('Message content must be less than 2000 characters');
    }

    if (!['email', 'linkedin', 'phone', 'other'].includes(outreachData.sentVia)) {
      errors.push('Invalid communication method');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  },

  /**
   * Get default message templates
   */
  getMessageTemplates: () => {
    return {
      introduction: {
        name: 'Introduction',
        description: 'Initial outreach to introduce yourself',
        defaultTone: 'professional',
        suggestedLength: '150-250 words'
      },
      follow_up: {
        name: 'Follow Up',
        description: 'Follow up on previous communication',
        defaultTone: 'friendly',
        suggestedLength: '100-200 words'
      },
      application: {
        name: 'Job Application',
        description: 'Express interest in a specific position',
        defaultTone: 'professional',
        suggestedLength: '200-300 words'
      },
      thank_you: {
        name: 'Thank You',
        description: 'Thank recruiter for their time or assistance',
        defaultTone: 'grateful',
        suggestedLength: '75-150 words'
      }
    };
  },

  /**
   * Get available tone options
   */
  getToneOptions: () => {
    return [
      { value: 'professional', label: 'Professional', description: 'Formal and business-appropriate' },
      { value: 'friendly', label: 'Friendly', description: 'Warm and approachable' },
      { value: 'casual', label: 'Casual', description: 'Relaxed and conversational' },
      { value: 'formal', label: 'Formal', description: 'Very structured and traditional' }
    ];
  },

  /**
   * Get experience level filters
   */
  getExperienceLevels: () => {
    return [
      { value: '0-2', label: '0-2 years', min: 0, max: 2 },
      { value: '3-5', label: '3-5 years', min: 3, max: 5 },
      { value: '6-10', label: '6-10 years', min: 6, max: 10 },
      { value: '11-15', label: '11-15 years', min: 11, max: 15 },
      { value: '16+', label: '16+ years', min: 16, max: 50 }
    ];
  },

  /**
   * Calculate outreach success metrics
   */
  calculateSuccessMetrics: (outreaches) => {
    if (!outreaches || outreaches.length === 0) {
      return {
        totalSent: 0,
        responseRate: 0,
        averageResponseTime: 0,
        topPerformingTemplate: null,
        engagementScore: 0
      };
    }

    const sent = outreaches.filter(o => ['sent', 'delivered', 'opened', 'replied'].includes(o.status));
    const replied = outreaches.filter(o => o.status === 'replied');
    
    const responseRate = sent.length > 0 ? (replied.length / sent.length) * 100 : 0;
    
    // Calculate template performance
    const templateStats = {};
    outreaches.forEach(outreach => {
      const template = outreach.messageTemplate || 'custom';
      if (!templateStats[template]) {
        templateStats[template] = { total: 0, replied: 0 };
      }
      templateStats[template].total++;
      if (outreach.status === 'replied') {
        templateStats[template].replied++;
      }
    });

    const topTemplate = Object.entries(templateStats)
      .map(([template, stats]) => ({
        template,
        responseRate: stats.total > 0 ? (stats.replied / stats.total) * 100 : 0,
        total: stats.total
      }))
      .sort((a, b) => b.responseRate - a.responseRate)[0];

    return {
      totalSent: sent.length,
      totalReplies: replied.length,
      responseRate: Math.round(responseRate * 100) / 100,
      topPerformingTemplate: topTemplate?.template || null,
      topPerformingRate: topTemplate?.responseRate || 0,
      engagementScore: Math.round(responseRate * 2) // Simple engagement calculation
    };
  },

  /**
   * Export outreach data for external use
   */
  exportOutreachData: async (format = 'csv', filters = {}) => {
    try {
      console.log(`📤 Exporting outreach data in ${format} format`);
      
      const outreachData = await recruiterService.getUserOutreach({
        ...filters,
        limit: 1000 // Get all data for export
      });

      if (format === 'csv') {
        return recruiterService.convertToCSV(outreachData.outreaches);
      } else if (format === 'json') {
        return JSON.stringify(outreachData.outreaches, null, 2);
      }

      throw new Error('Unsupported export format');

    } catch (error) {
      console.error('Export outreach data error:', error);
      throw error;
    }
  },

  /**
   * Convert outreach data to CSV format
   */
  convertToCSV: (outreaches) => {
    if (!outreaches || outreaches.length === 0) {
      return 'No data to export';
    }

    const headers = [
      'Recruiter Name',
      'Company',
      'Email',
      'Status',
      'Message Type',
      'Sent Via',
      'Created Date',
      'Sent Date',
      'Replies Count',
      'Message Preview'
    ];

    const rows = outreaches.map(outreach => [
      outreach.recruiter?.name || 'Unknown',
      outreach.recruiter?.company?.name || 'Unknown',
      outreach.recruiter?.email || '',
      outreach.status,
      outreach.messageTemplate || 'custom',
      outreach.sentVia,
      new Date(outreach.createdAt).toLocaleDateString(),
      outreach.sentAt ? new Date(outreach.sentAt).toLocaleDateString() : '',
      outreach.repliesCount || 0,
      outreach.messageContent.substring(0, 100) + '...'
    ]);

    const csvContent = [headers, ...rows]
      .map(row => row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(','))
      .join('\n');

    return csvContent;
  },

  /**
   * Get intelligent recommendations for message improvements
   */
  getMessageRecommendations: (messageContent, recruiterData, userContext = {}) => {
    const recommendations = [];
    const content = messageContent.toLowerCase();

    // Length recommendations
    if (messageContent.length < 50) {
      recommendations.push({
        type: 'length',
        severity: 'warning',
        message: 'Message is quite short. Consider adding more context about your background or interest.'
      });
    } else if (messageContent.length > 1500) {
      recommendations.push({
        type: 'length',
        severity: 'warning',
        message: 'Message is quite long. Consider shortening it for better readability.'
      });
    }

    // Personalization recommendations
    if (!content.includes(recruiterData.firstName?.toLowerCase()) && 
        !content.includes(recruiterData.company?.name?.toLowerCase())) {
      recommendations.push({
        type: 'personalization',
        severity: 'info',
        message: 'Consider mentioning the recruiter\'s name or company for better personalization.'
      });
    }

    // Call-to-action recommendations
    if (!content.includes('would love to') && 
        !content.includes('would like to') && 
        !content.includes('schedule') && 
        !content.includes('discuss')) {
      recommendations.push({
        type: 'call_to_action',
        severity: 'info',
        message: 'Consider adding a clear call-to-action like "Would love to schedule a brief call".'
      });
    }

    // Subject matter recommendations
    if (userContext.targetRole && !content.includes(userContext.targetRole.toLowerCase())) {
      recommendations.push({
        type: 'relevance',
        severity: 'info',
        message: `Consider mentioning your target role (${userContext.targetRole}) to show clear intent.`
      });
    }

    return recommendations;
  }
};

export default recruiterService;

================
File: src/utils/resumeService.js
================
// src/utils/resumeService.js
import api from './axios';

const resumeService = {
  // Get all resumes for the user
  getUserResumes: async () => {
    try {
      const response = await api.get('/resumes');
      return response.data.resumes || [];
    } catch (error) {
      console.error('Error fetching resumes:', error);
      throw error;
    }
  },
  
  // Get a specific resume by ID
  getResumeById: async (resumeId) => {
    try {
      const response = await api.get(`/resumes/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching resume:', error);
      throw error;
    }
  },
  
  // Upload a new resume
  uploadResume: async (formData) => {
    try {
      const response = await api.post('/resumes/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error uploading resume:', error);
      throw error;
    }
  },
  
  // Check resume processing status
  checkResumeStatus: async (resumeId) => {
    try {
      const response = await api.get(`/resumes/status/${resumeId}`);
      return response.data.processingStatus;
    } catch (error) {
      console.error('Error checking resume status:', error);
      throw error;
    }
  },
  
  // Poll resume status until completion or timeout
  pollResumeStatus: async (resumeId, onProgress, timeout = 300000) => {
    return new Promise((resolve, reject) => {
      const startTime = Date.now();
      const interval = 2000; // Poll every 2 seconds
      
      const checkStatus = async () => {
        try {
          if (Date.now() - startTime > timeout) {
            clearInterval(pollInterval);
            reject(new Error('Resume processing timed out'));
            return;
          }
          
          const status = await resumeService.checkResumeStatus(resumeId);
          
          if (onProgress) onProgress(status);
          
          if (status.status === 'completed') {
            clearInterval(pollInterval);
            resolve(status);
          }
          
          if (status.status === 'error') {
            clearInterval(pollInterval);
            reject(new Error(status.error || 'Processing failed'));
          }
        } catch (error) {
          console.error('Error polling status:', error);
        }
      };
      
      const pollInterval = setInterval(checkStatus, interval);
      checkStatus(); // Immediate first check
    });
  },
  
  // Analyze a resume
  analyzeResume: async (resumeId) => {
    try {
      const response = await api.post(`/resumes/analyze/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error analyzing resume:', error);
      throw error;
    }
  },
  
  // Add a new version to an existing resume
  addResumeVersion: async (resumeId, formData) => {
    try {
      const response = await api.post(`/resumes/versions/${resumeId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error adding resume version:', error);
      throw error;
    }
  },
  
  // Create a tailored resume
  createTailoredResume: async (resumeId, jobId, options = {}) => {
    try {
      const response = await api.post(`/resumes/tailor/${resumeId}/${jobId}`, options);
      return response.data;
    } catch (error) {
      console.error('Error creating tailored resume:', error);
      throw error;
    }
  },
  
  // Delete a resume
  deleteResume: async (resumeId) => {
    try {
      const response = await api.delete(`/resumes/${resumeId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting resume:', error);
      throw error;
    }
  }
};

export default resumeService;

================
File: src/utils/searchService.js
================
// src/utils/searchService.js
import api from './axios';

const searchService = {
  /**
   * Global search across all content types
   */
  globalSearch: async (query, options = {}) => {
    try {
      const {
        category = 'all',
        limit = 20,
        includeContent = false
      } = options;

      if (!query || query.trim().length < 2) {
        return {
          success: false,
          error: 'Search query must be at least 2 characters long'
        };
      }

      console.log(`🔍 Searching for: "${query}" in category: ${category}`);

      const params = new URLSearchParams();
      params.append('query', query.trim());
      params.append('category', category);
      params.append('limit', limit);
      if (includeContent) params.append('includeContent', 'true');

      const response = await api.get(`/search?${params}`);
      
      console.log(`✅ Search completed: ${response.data.data.results.totalCount} results`);
      return response.data;

    } catch (error) {
      console.error('Global search error:', error);
      throw error;
    }
  },

  /**
   * Get search suggestions as user types
   */
  getSuggestions: async (query, limit = 5) => {
    try {
      if (!query || query.length < 2) {
        return { suggestions: [] };
      }

      const params = new URLSearchParams();
      params.append('query', query);
      params.append('limit', limit);

      const response = await api.get(`/search/suggestions?${params}`);
      return response.data.data;

    } catch (error) {
      console.error('Get suggestions error:', error);
      return { suggestions: [] };
    }
  },

  /**
   * Get popular searches
   */
  getPopularSearches: async () => {
    try {
      const response = await api.get('/search/popular');
      return response.data.data;
    } catch (error) {
      console.error('Get popular searches error:', error);
      return { searches: [] };
    }
  },

  /**
   * Search specific category with custom parameters
   */
  searchJobs: async (query, options = {}) => {
    try {
      const result = await searchService.globalSearch(query, {
        ...options,
        category: 'jobs'
      });
      return result.data?.results?.jobs || [];
    } catch (error) {
      console.error('Search jobs error:', error);
      return [];
    }
  },

  searchResumes: async (query, options = {}) => {
    try {
      const result = await searchService.globalSearch(query, {
        ...options,
        category: 'resumes'
      });
      return result.data?.results?.resumes || [];
    } catch (error) {
      console.error('Search resumes error:', error);
      return [];
    }
  },

  searchRecruiters: async (query, options = {}) => {
    try {
      const result = await searchService.globalSearch(query, {
        ...options,
        category: 'recruiters'
      });
      return result.data?.results?.recruiters || [];
    } catch (error) {
      console.error('Search recruiters error:', error);
      return [];
    }
  },

  /**
   * Format search results for display
   */
  formatSearchResults: (results) => {
    const formatted = {
      all: [],
      jobs: [],
      resumes: [],
      recruiters: [],
      totalCount: 0
    };

    if (!results) return formatted;

    // Combine all results for 'all' category view
    const allResults = [
      ...(results.jobs || []),
      ...(results.resumes || []),
      ...(results.recruiters || [])
    ];

    // Sort all results by relevance/date
    allResults.sort((a, b) => {
      // Prioritize by type relevance, then by date
      const typeOrder = { job: 0, resume: 1, recruiter: 2 };
      if (typeOrder[a.type] !== typeOrder[b.type]) {
        return typeOrder[a.type] - typeOrder[b.type];
      }
      return new Date(b.createdAt || b.lastActiveDate) - new Date(a.createdAt || a.lastActiveDate);
    });

    formatted.all = allResults;
    formatted.jobs = results.jobs || [];
    formatted.resumes = results.resumes || [];
    formatted.recruiters = results.recruiters || [];
    formatted.totalCount = results.totalCount || 0;

    return formatted;
  },

  /**
   * Get result type icon and color
   */
  getResultTypeDisplay: (type) => {
    const displays = {
      job: {
        icon: 'Work',
        color: '#4285f4',
        label: 'Job'
      },
      resume: {
        icon: 'Description',
        color: '#34a853',
        label: 'Resume'
      },
      recruiter: {
        icon: 'Person',
        color: '#00c4b4',
        label: 'Recruiter'
      }
    };

    return displays[type] || {
      icon: 'Search',
      color: '#666',
      label: 'Unknown'
    };
  },

  /**
   * Highlight search terms in text
   */
  highlightSearchTerms: (text, searchQuery) => {
    if (!text || !searchQuery) return text;

    const regex = new RegExp(`(${searchQuery.split(' ').join('|')})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  },

  /**
   * Get search categories for filtering
   */
  getSearchCategories: () => {
    return [
      { value: 'all', label: 'All Results', icon: 'Search' },
      { value: 'jobs', label: 'Jobs', icon: 'Work' },
      { value: 'resumes', label: 'Resumes', icon: 'Description' },
      { value: 'recruiters', label: 'Recruiters', icon: 'Person' }
    ];
  },

  /**
   * Debounced search function
   */
  createDebouncedSearch: (callback, delay = 300) => {
    let timeoutId;
    
    return (...args) => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => callback.apply(null, args), delay);
    };
  },

  /**
   * Save search to local storage for recent searches
   */
  saveRecentSearch: (query, results) => {
    try {
      const recentSearches = searchService.getRecentSearches();
      
      // Remove if already exists
      const filtered = recentSearches.filter(search => 
        search.query.toLowerCase() !== query.toLowerCase()
      );
      
      // Add to beginning
      filtered.unshift({
        query,
        timestamp: new Date().toISOString(),
        resultCount: results.totalCount || 0
      });
      
      // Keep only last 10 searches
      const limited = filtered.slice(0, 10);
      
      localStorage.setItem('recentSearches', JSON.stringify(limited));
    } catch (error) {
      console.error('Save recent search error:', error);
    }
  },

  /**
   * Get recent searches from local storage
   */
  getRecentSearches: () => {
    try {
      const stored = localStorage.getItem('recentSearches');
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('Get recent searches error:', error);
      return [];
    }
  },

  /**
   * Clear recent searches
   */
  clearRecentSearches: () => {
    try {
      localStorage.removeItem('recentSearches');
    } catch (error) {
      console.error('Clear recent searches error:', error);
    }
  },

  /**
   * Validate search query
   */
  validateSearchQuery: (query) => {
    const errors = [];
    
    if (!query || query.trim().length === 0) {
      errors.push('Search query cannot be empty');
    }
    
    if (query && query.trim().length < 2) {
      errors.push('Search query must be at least 2 characters long');
    }
    
    if (query && query.length > 100) {
      errors.push('Search query must be less than 100 characters');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  },

  /**
   * Get search keyboard shortcuts
   */
  getKeyboardShortcuts: () => {
    return {
      openSearch: ['/', 'Ctrl+K', 'Cmd+K'],
      closeSearch: ['Escape'],
      navigateResults: ['ArrowUp', 'ArrowDown'],
      selectResult: ['Enter'],
      nextCategory: ['Tab'],
      previousCategory: ['Shift+Tab']
    };
  }
};

export default searchService;

================
File: src/utils/settingsService.js
================
// src/utils/settingsService.js
import api from './axios';

const settingsService = {
  /**
   * Get user profile information
   */
  getProfile: async () => {
    try {
      console.log('📋 Fetching user profile...');
      const response = await api.get('/settings/profile');
      console.log('✅ Profile fetched successfully');
      return response.data;
    } catch (error) {
      console.error('❌ Get profile error:', error);
      throw error;
    }
  },

  /**
   * Update user profile information
   */
  updateProfile: async (profileData) => {
    try {
      console.log('📝 Updating user profile...', profileData);
      const response = await api.put('/settings/profile', profileData);
      console.log('✅ Profile updated successfully');
      return response.data;
    } catch (error) {
      console.error('❌ Update profile error:', error);
      throw error;
    }
  },

  /**
   * Change user password
   */
  changePassword: async (passwordData) => {
    try {
      console.log('🔒 Changing password...');
      const response = await api.put('/settings/change-password', passwordData);
      console.log('✅ Password changed successfully');
      return response.data;
    } catch (error) {
      console.error('❌ Change password error:', error);
      throw error;
    }
  },

  /**
   * Delete user account
   */
  deleteAccount: async (confirmationData = {}) => {
    try {
      console.log('🗑️ Deleting account...');
      const response = await api.delete('/settings/delete-account', {
        data: confirmationData
      });
      console.log('✅ Account deleted successfully');
      return response.data;
    } catch (error) {
      console.error('❌ Delete account error:', error);
      throw error;
    }
  },

  /**
   * Send email verification
   */
  sendVerificationEmail: async () => {
    try {
      console.log('📧 Sending verification email...');
      const response = await api.post('/settings/send-verification-email');
      console.log('✅ Verification email sent');
      return response.data;
    } catch (error) {
      console.error('❌ Send verification email error:', error);
      throw error;
    }
  },

  /**
   * Verify email address
   */
  verifyEmail: async (token) => {
    try {
      console.log('✉️ Verifying email...');
      const response = await api.get(`/settings/verify-email/${token}`);
      console.log('✅ Email verified successfully');
      return response.data;
    } catch (error) {
      console.error('❌ Verify email error:', error);
      throw error;
    }
  },

  /**
   * Validate profile data before submission
   */
  validateProfileData: (profileData) => {
    const errors = [];

    // Required fields
    if (!profileData.firstName?.trim()) {
      errors.push('First name is required');
    }

    if (!profileData.lastName?.trim()) {
      errors.push('Last name is required');
    }

    if (!profileData.email?.trim()) {
      errors.push('Email address is required');
    }

    // Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (profileData.email && !emailRegex.test(profileData.email)) {
      errors.push('Please enter a valid email address');
    }

    // Phone number validation (optional)
    if (profileData.phoneNumber) {
      const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
      if (!phoneRegex.test(profileData.phoneNumber.replace(/\D/g, ''))) {
        errors.push('Please enter a valid phone number');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  },

  /**
   * Validate password data before submission
   */
  validatePasswordData: (passwordData) => {
    const errors = [];

    if (!passwordData.currentPassword) {
      errors.push('Current password is required');
    }

    if (!passwordData.newPassword) {
      errors.push('New password is required');
    }

    if (!passwordData.confirmPassword) {
      errors.push('Please confirm your new password');
    }

    if (passwordData.newPassword && passwordData.newPassword.length < 8) {
      errors.push('New password must be at least 8 characters long');
    }

    if (passwordData.newPassword && passwordData.confirmPassword && 
        passwordData.newPassword !== passwordData.confirmPassword) {
      errors.push('New passwords do not match');
    }

    if (passwordData.currentPassword && passwordData.newPassword && 
        passwordData.currentPassword === passwordData.newPassword) {
      errors.push('New password must be different from current password');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  },

  /**
   * Calculate password strength
   */
  calculatePasswordStrength: (password) => {
    if (!password) return { strength: 0, label: '', color: 'default' };

    let score = 0;
    const checks = {
      length: password.length >= 8,
      lowercase: /[a-z]/.test(password),
      uppercase: /[A-Z]/.test(password),
      numbers: /\d/.test(password),
      symbols: /[^A-Za-z0-9]/.test(password)
    };

    // Calculate score
    Object.values(checks).forEach(check => {
      if (check) score += 20;
    });

    // Bonus for length
    if (password.length >= 12) score += 10;
    if (password.length >= 16) score += 10;

    // Determine strength level
    let strength, label, color;
    if (score < 40) {
      strength = score;
      label = 'Weak';
      color = 'error';
    } else if (score < 60) {
      strength = score;
      label = 'Fair';
      color = 'warning';
    } else if (score < 80) {
      strength = score;
      label = 'Good';
      color = 'info';
    } else {
      strength = Math.min(score, 100);
      label = 'Strong';
      color = 'success';
    }

    return { strength, label, color, checks };
  },

  /**
   * Format phone number for display
   */
  formatPhoneNumber: (phoneNumber) => {
    if (!phoneNumber) return '';
    
    // Remove all non-digit characters
    const digits = phoneNumber.replace(/\D/g, '');
    
    // Format US phone numbers
    if (digits.length === 10) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
    } else if (digits.length === 11 && digits[0] === '1') {
      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
    }
    
    // Return original if can't format
    return phoneNumber;
  },

  /**
   * Get error message from API response
   */
  getErrorMessage: (error) => {
    if (error.response?.data?.error) {
      return error.response.data.error;
    } else if (error.response?.data?.message) {
      return error.response.data.message;
    } else if (error.message) {
      return error.message;
    } else {
      return 'An unexpected error occurred';
    }
  },

  /**
   * Check if email verification is needed
   */
  needsEmailVerification: (user) => {
    return user && !user.isEmailVerified;
  },

  /**
   * Calculate profile completion percentage
   */
  calculateProfileCompletion: (user) => {
    if (!user) return 0;

    const fields = [
      user.firstName,
      user.lastName,
      user.email,
      user.phoneNumber
    ];

    const completedFields = fields.filter(field => field && field.trim()).length;
    return Math.round((completedFields / fields.length) * 100);
  },

  /**
   * Get account security score
   */
  getSecurityScore: (user) => {
    if (!user) return 0;

    let score = 0;
    const maxScore = 100;

    // Email verification (40 points)
    if (user.isEmailVerified) score += 40;

    // Profile completeness (30 points)
    const completionPercentage = settingsService.calculateProfileCompletion(user);
    score += (completionPercentage / 100) * 30;

    // Account age (15 points)
    if (user.createdAt) {
      const accountAge = Date.now() - new Date(user.createdAt).getTime();
      const daysOld = accountAge / (1000 * 60 * 60 * 24);
      if (daysOld > 30) score += 15;
      else score += (daysOld / 30) * 15;
    }

    // Phone number (15 points)
    if (user.phoneNumber) score += 15;

    return Math.min(Math.round(score), maxScore);
  }
};

export default settingsService;
